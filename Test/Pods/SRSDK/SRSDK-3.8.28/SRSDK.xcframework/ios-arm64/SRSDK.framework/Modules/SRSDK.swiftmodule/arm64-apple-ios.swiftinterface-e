// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SRSDK
import Alamofire
import Foundation
import Logging
@_exported import SRSDK
import Swift
import UIKit
import _Concurrency
@_hasMissingDesignatedInitializers final public class BadmintonTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BadmintonTeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> BadmintonTeamDetailsParams
  @discardableResult
  final public func includeSquad() -> BadmintonTeamDetailsParams
  @discardableResult
  final public func includeRoles() -> BadmintonTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> BadmintonTeamDetailsParams
  @discardableResult
  final public func includeStages() -> BadmintonTeamDetailsParams
  @discardableResult
  final public func includeManager() -> BadmintonTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> BadmintonTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> BadmintonTeamDetailsParams
  @objc deinit
}
extension Country : Swift.Codable, Unmarshaling {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public init(object: MarshaledObject) throws
  public typealias ConvertibleType = Country
  public typealias Value = Country
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FutsalStatistics : MatchStatistics, CardsStatistics {
  public var isGoals: Swift.Bool {
    get
  }
  public var isBallPossession: Swift.Bool {
    get
  }
  public var isCornerKicks: Swift.Bool {
    get
  }
  public var isTimeouts: Swift.Bool {
    get
  }
  public var isPenalties: Swift.Bool {
    get
  }
  public var isDirectFouls: Swift.Bool {
    get
  }
  public var isDirectFreeKicks: Swift.Bool {
    get
  }
  public var isDirectFreeKicksScored: Swift.Bool {
    get
  }
  public var isDirectFreeKicksMissed: Swift.Bool {
    get
  }
  public var isPenaltiesScored: Swift.Bool {
    get
  }
  public var isPenaltiesMissed: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BandyTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BandyTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> BandyTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> BandyTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> BandyTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> BandyTournamentDetailsParams
  @objc deinit
}
public protocol GenericMotorsportController {
  func loadGenericSeasons(completion: @escaping (Response<[Season]>) -> Swift.Void)
  func loadGenericActiveSeason(completion: @escaping (Response<Season>) -> Swift.Void)
  func loadGenericStagesForSeason(season: Season, completion: @escaping (Response<[Contest]>) -> Swift.Void)
  func loadGenericLastSeasonStages(completion: @escaping (Response<[Contest]?>) -> Swift.Void)
  func getGenericSeason(by id: Swift.Int, completion: @escaping (Response<Season>) -> Swift.Void)
  func getGenericStage(by id: Swift.Int, completion: @escaping (Response<Contest>) -> Swift.Void)
  func loadGenericActiveSeasons(completion: @escaping (Response<[Season]>) -> Swift.Void)
  func loadGenericLastSeasonsStages(completion: @escaping (Response<[Contest]?>) -> Swift.Void)
}
extension GenericMotorsportController {
  public func loadGenericActiveSeasons(completion: @escaping (Response<[Season]>) -> Swift.Void)
  public func loadGenericLastSeasonsStages(completion: @escaping (Response<[Contest]?>) -> Swift.Void)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TableTennisStatistics : MatchStatistics, CardsStatistics {
  public var isMaxPointsInRow: Swift.Bool {
    get
  }
  public var isPointsWon: Swift.Bool {
    get
  }
  public var isServiceErrors: Swift.Bool {
    get
  }
  public var isTimeouts: Swift.Bool {
    get
  }
  public var isReceiverPointsWon: Swift.Bool {
    get
  }
  public var isComebackToWin: Swift.Bool {
    get
  }
  public var isBiggestLead: Swift.Bool {
    get
  }
  public var isNumberOfLets: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DartsPlayerStatistics : PlayerStatistics {
  final public var is180Thrown: Swift.Bool {
    get
  }
  final public var is140PlusThrown: Swift.Bool {
    get
  }
  final public var is100PlusThrown: Swift.Bool {
    get
  }
  final public var isHighestCheckout: Swift.Bool {
    get
  }
  final public var isCheckouts100Plus: Swift.Bool {
    get
  }
  final public var isCheckoutsPercentage: Swift.Bool {
    get
  }
  final public var isAllDartsAverage: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AnyTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> AnyTeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> AnyTeamDetailsParams
  @discardableResult
  final public func includeSquad() -> AnyTeamDetailsParams
  @discardableResult
  final public func includeRoles() -> AnyTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> AnyTeamDetailsParams
  @discardableResult
  final public func includeManager() -> AnyTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> AnyTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> AnyTeamDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Status {
  public var name: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PeriodStatus : Status {
  public var type: MatchStatusType?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class HalftimeBasedPeriodStatus : ContestStatus {
  public var isFirstHalf: Swift.Bool {
    get
  }
  public var isSecondHalf: Swift.Bool {
    get
  }
  public var isPenalties: Swift.Bool {
    get
  }
  public var isExtraTime: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TennisPeriodStatus : ContestStatus {
  public var isFirstSet: Swift.Bool {
    get
  }
  public var isSecondSet: Swift.Bool {
    get
  }
  public var isThirdSet: Swift.Bool {
    get
  }
  public var isFourthSet: Swift.Bool {
    get
  }
  public var isFifthSet: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TableTennisPeriodStatus : ContestStatus {
  public var isFirstSet: Swift.Bool {
    get
  }
  public var isSecondSet: Swift.Bool {
    get
  }
  public var isThirdSet: Swift.Bool {
    get
  }
  public var isFourthSet: Swift.Bool {
    get
  }
  public var isFifthSet: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BasketballPeriodStatus : ContestStatus {
  public var isHalftime: Swift.Bool {
    get
  }
  public var isFirstQuarter: Swift.Bool {
    get
  }
  public var isSecondQuarter: Swift.Bool {
    get
  }
  public var isThirdQuarter: Swift.Bool {
    get
  }
  public var isFourthQuarter: Swift.Bool {
    get
  }
  public var isWaitingExtraTime: Swift.Bool {
    get
  }
  public var isOvertime: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IceHockeyPeriodStatus : ContestStatus {
  public var isFirstPeriod: Swift.Bool {
    get
  }
  public var isSecondPeriod: Swift.Bool {
    get
  }
  public var isThirdPeriod: Swift.Bool {
    get
  }
  public var isOverTime: Swift.Bool {
    get
  }
  public var isPenalties: Swift.Bool {
    get
  }
  public var isAfterPenalties: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FloorballPeriodStatus : ContestStatus {
  public var isOverTime: Swift.Bool {
    get
  }
  public var isAfterPenalties: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FieldHockeyPeriodStatus : ContestStatus {
  public var isFirstPeriod: Swift.Bool {
    get
  }
  public var isSecondPeriod: Swift.Bool {
    get
  }
  public var isThirdPeriod: Swift.Bool {
    get
  }
  public var isFourthPeriod: Swift.Bool {
    get
  }
  public var isOverTime: Swift.Bool {
    get
  }
  public var isAfterPenalties: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VolleyballPeriodStatus : ContestStatus {
  public var isFirstSet: Swift.Bool {
    get
  }
  public var isSecondSet: Swift.Bool {
    get
  }
  public var isThirdSet: Swift.Bool {
    get
  }
  public var isFourthSet: Swift.Bool {
    get
  }
  public var isFifthSet: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BeachVolleyPeriodStatus : ContestStatus {
  public var isFirstSet: Swift.Bool {
    get
  }
  public var isSecondSet: Swift.Bool {
    get
  }
  public var isThirdSet: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BadmintonPeriodStatus : ContestStatus {
  public var isFirstGame: Swift.Bool {
    get
  }
  public var isSecondGame: Swift.Bool {
    get
  }
  public var isThirdGame: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SquashPeriodStatus : ContestStatus {
  public var isFirstSet: Swift.Bool {
    get
  }
  public var isSecondSet: Swift.Bool {
    get
  }
  public var isThirdSet: Swift.Bool {
    get
  }
  public var isFourthSet: Swift.Bool {
    get
  }
  public var isFifthSet: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BaseballPeriodStatus : ContestStatus {
  public var isFirstInning: Swift.Bool {
    get
  }
  public var isSecondInning: Swift.Bool {
    get
  }
  public var isThirdInning: Swift.Bool {
    get
  }
  public var isFourthInning: Swift.Bool {
    get
  }
  public var isFifthInning: Swift.Bool {
    get
  }
  public var isSixthInning: Swift.Bool {
    get
  }
  public var isSeventhInning: Swift.Bool {
    get
  }
  public var isEighthInning: Swift.Bool {
    get
  }
  public var isNinthInning: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AmericanFootballPeriodStatus : ContestStatus {
  public var isFirstPeriod: Swift.Bool {
    get
  }
  public var isSecondPeriod: Swift.Bool {
    get
  }
  public var isThirdPeriod: Swift.Bool {
    get
  }
  public var isFourthPeriod: Swift.Bool {
    get
  }
  public var isOvertime: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PesapalloPeriodStatus : ContestStatus {
  public var isFirstInning: Swift.Bool {
    get
  }
  public var isSecondInning: Swift.Bool {
    get
  }
  public var isSuperInning: Swift.Bool {
    get
  }
  public var isRunContest: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class WaterPoloPeriodStatus : ContestStatus, BreakStatus {
  public var isHalftime: Swift.Bool {
    get
  }
  public var isFirstQuarter: Swift.Bool {
    get
  }
  public var isSecondQuarter: Swift.Bool {
    get
  }
  public var isThirdQuarter: Swift.Bool {
    get
  }
  public var isFourthQuarter: Swift.Bool {
    get
  }
  public var isAfterPenalties: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AussieRulesPeriodStatus : ContestStatus, BreakStatus {
  public var isHalftime: Swift.Bool {
    get
  }
  public var isFirstQuarter: Swift.Bool {
    get
  }
  public var isSecondQuarter: Swift.Bool {
    get
  }
  public var isThirdQuarter: Swift.Bool {
    get
  }
  public var isFourthQuarter: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CyclingSeasonStatus : Status {
  final public var isActive: Swift.Bool {
    get
  }
  final public var isEnded: Swift.Bool {
    get
  }
  final public var isNotStarted: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SpeedwaySeasonStatus : Status {
  final public var isActive: Swift.Bool {
    get
  }
  final public var isEnded: Swift.Bool {
    get
  }
  final public var isNotStarted: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SpeedwayRaceStatus : ContestStatus {
  public var isFirstQuarter: Swift.Bool {
    get
  }
  public var isSecondQuarter: Swift.Bool {
    get
  }
  public var isThirdQuarter: Swift.Bool {
    get
  }
  public var isFourthQuarter: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TennisTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> TennisTeamDetailsParams
  @discardableResult
  final public func includeYearTurnedPro() -> TennisTeamDetailsParams
  @discardableResult
  final public func includeBirthDate() -> TennisTeamDetailsParams
  @discardableResult
  final public func includeNationality() -> TennisTeamDetailsParams
  @discardableResult
  final public func includeHeight() -> TennisTeamDetailsParams
  @discardableResult
  final public func includeWeight() -> TennisTeamDetailsParams
  @discardableResult
  final public func includeFavouriteSurface() -> TennisTeamDetailsParams
  @discardableResult
  final public func includeHighestSinglesRanking() -> TennisTeamDetailsParams
  @discardableResult
  final public func includeHighestDoublesRanking() -> TennisTeamDetailsParams
  @discardableResult
  final public func includePreferredHand() -> TennisTeamDetailsParams
  @discardableResult
  final public func includeAgeTurnedPro() -> TennisTeamDetailsParams
  @discardableResult
  final public func includeAgeStarted() -> TennisTeamDetailsParams
  @discardableResult
  final public func includeGroundStats() -> TennisTeamDetailsParams
  @discardableResult
  final public func includeSinglesRanking() -> TennisTeamDetailsParams
  @discardableResult
  final public func includeDoublesRanking() -> TennisTeamDetailsParams
  @discardableResult
  final public func includeSinglesSurfaceStats() -> TennisTeamDetailsParams
  @discardableResult
  final public func includeDoublesSurfaceStats() -> TennisTeamDetailsParams
  @discardableResult
  final public func includeMixedSurfaceStats() -> TennisTeamDetailsParams
  @discardableResult
  final public func includeSinglesRankingByYear() -> TennisTeamDetailsParams
  @discardableResult
  final public func includeDoublesRankingByYear() -> TennisTeamDetailsParams
  @discardableResult
  final public func includeMixedRankingByYear() -> TennisTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> TennisTeamDetailsParams
  @discardableResult
  final public func includeStages() -> TennisTeamDetailsParams
  @discardableResult
  final public func includeManager() -> TennisTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> TennisTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> TennisTeamDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FieldHockeyTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> FieldHockeyTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> FieldHockeyTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> FieldHockeyTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> FieldHockeyTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> FieldHockeyTournamentDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MotorbikesStatistics : MotorsportStatistics {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class MotorbikesTeamStatistics : MotorsportStatistics {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class MotorbikesDriverStatistics : MotorsportDriverStatistics {
  final public var isLaps: Swift.Bool {
    get
  }
  final public var isFastestLapTime: Swift.Bool {
    get
  }
  final public var isBikeNumber: Swift.Bool {
    get
  }
  final public var isStatus: Swift.Bool {
    get
  }
  final public var isRacesWithPoints: Swift.Bool {
    get
  }
  final public var isPolePositions: Swift.Bool {
    get
  }
  final public var isPodiums: Swift.Bool {
    get
  }
  final public var isFastestLaps: Swift.Bool {
    get
  }
  final public var isVictoryPoleAndFastestLap: Swift.Bool {
    get
  }
  final public var isPitStopCount: Swift.Bool {
    get
  }
  final public var isGrid: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class MotorbikesRaceStatistics : Statistics {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FloorballPlayerStatistics : PlayerStatistics {
  final public var isGoals: Swift.Bool {
    get
  }
  final public var isAssists: Swift.Bool {
    get
  }
  @objc deinit
}
public struct Vote {
  public let valueId: Swift.Int
  public let extra: Swift.String?
  public init(valueId: Swift.Int, extra: Swift.String? = nil)
}
public struct VoteSearchParameters {
  public let valueId: Swift.Int?
  public let extra: Swift.String?
  public let timeFrom: Foundation.Date?
  public let timeTo: Foundation.Date?
  public init(valueId: Swift.Int? = nil, extra: Swift.String? = nil, timeFrom: Foundation.Date? = nil, timeTo: Foundation.Date? = nil)
}
public struct VoteCountInfo : Swift.Decodable {
  public let valueId: Swift.Int
  public let extra: Swift.String?
  public let count: Swift.Int
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class VoteInfo : Swift.Decodable {
  final public let id: Swift.Int
  final public let valueId: Swift.Int
  final public let extra: Swift.String?
  final public var createdDate: Foundation.Date {
    get
    set
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class BeachVolleyDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BeachVolleyDetailsParams
  @discardableResult
  final public func includeLineups() -> BeachVolleyDetailsParams
  @discardableResult
  final public func includeTeam1LeagueTable() -> BeachVolleyDetailsParams
  @discardableResult
  final public func includeTeam2LeagueTable() -> BeachVolleyDetailsParams
  @discardableResult
  final public func includeLiveRankingTable() -> BeachVolleyDetailsParams
  @discardableResult
  final public func includeStaff() -> BeachVolleyDetailsParams
  @discardableResult
  final public func includeEvents() -> BeachVolleyDetailsParams
  @discardableResult
  final public func includeOdds() -> BeachVolleyDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> BeachVolleyDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> BeachVolleyDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> BeachVolleyDetailsParams
  @discardableResult
  final public func includeVenue() -> BeachVolleyDetailsParams
  @discardableResult
  final public func includeAttendance() -> BeachVolleyDetailsParams
  @discardableResult
  final public func includeStatistics() -> BeachVolleyDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> BeachVolleyDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> BeachVolleyDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> BeachVolleyDetailsParams
  @discardableResult
  final public func includeCommentary() -> BeachVolleyDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> BeachVolleyDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BeachVolleyTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BeachVolleyTeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> BeachVolleyTeamDetailsParams
  @discardableResult
  final public func includeSquad() -> BeachVolleyTeamDetailsParams
  @discardableResult
  final public func includeRoles() -> BeachVolleyTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> BeachVolleyTeamDetailsParams
  @discardableResult
  final public func includeStages() -> BeachVolleyTeamDetailsParams
  @discardableResult
  final public func includeManager() -> BeachVolleyTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> BeachVolleyTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> BeachVolleyTeamDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ContesterRole<T> : SportRadarModel, AnyContesterRole where T : Contester {
  public var id: Swift.Int {
    get
  }
  public var parentContester: T {
    get
  }
  public var startDate: Foundation.Date? {
    get
  }
  public var endDate: Foundation.Date? {
    get
  }
  public var genericParentContester: Contester {
    get
  }
  @objc deinit
}
public protocol AnyContesterRole {
  var id: Swift.Int { get }
  var genericParentContester: Contester { get }
  var startDate: Foundation.Date? { get }
  var endDate: Foundation.Date? { get }
}
@_hasMissingDesignatedInitializers public class TeamPlayerRole<T> : ContesterRole<T>, AnyTeamPlayerRole where T : Team {
  public var name: Swift.String {
    get
  }
  public var team: T? {
    get
  }
  public var isOnLoan: Swift.Bool? {
    get
  }
  public var shirtNumber: Swift.Int? {
    get
  }
  public var isActive: Swift.Bool? {
    get
  }
  public var genericTeam: Team? {
    get
  }
  @objc deinit
}
public protocol AnyTeamPlayerRole : AnyContesterRole {
  var name: Swift.String { get }
  var genericTeam: Team? { get }
  var isOnLoan: Swift.Bool? { get }
  var shirtNumber: Swift.Int? { get }
  var isActive: Swift.Bool? { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AussieRulesPlayerStatistics : PlayerStatistics {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AussieRulesDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> AussieRulesDetailsParams
  @discardableResult
  final public func includeLineups() -> AussieRulesDetailsParams
  @discardableResult
  final public func includeTeam1LeagueTable() -> AussieRulesDetailsParams
  @discardableResult
  final public func includeTeam2LeagueTable() -> AussieRulesDetailsParams
  @discardableResult
  final public func includeLiveRankingTable() -> AussieRulesDetailsParams
  @discardableResult
  final public func includeStaff() -> AussieRulesDetailsParams
  @discardableResult
  final public func includeEvents() -> AussieRulesDetailsParams
  @discardableResult
  final public func includeOdds() -> AussieRulesDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> AussieRulesDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> AussieRulesDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> AussieRulesDetailsParams
  @discardableResult
  final public func includeVenue() -> AussieRulesDetailsParams
  @discardableResult
  final public func includeAttendance() -> AussieRulesDetailsParams
  @discardableResult
  final public func includeStatistics() -> AussieRulesDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> AussieRulesDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> AussieRulesDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> AussieRulesDetailsParams
  @discardableResult
  final public func includeCommentary() -> AussieRulesDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> AussieRulesDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MatchLineups<TP> : SportRadarModel, AnyMatchLineups where TP : TeamPlayer {
  public var id: Swift.Int {
    get
  }
  public var homeLineup: TeamLineup<TP>? {
    get
  }
  public var awayLineup: TeamLineup<TP>? {
    get
  }
  public var genericHomeLineup: AnyTeamLineup? {
    get
  }
  public var genericAwayLineup: AnyTeamLineup? {
    get
  }
  @objc deinit
}
public protocol AnyMatchLineups {
  var genericHomeLineup: AnyTeamLineup? { get }
  var genericAwayLineup: AnyTeamLineup? { get }
}
@_hasMissingDesignatedInitializers public class TeamLineup<TP> : SportRadarModel, AnyTeamLineup where TP : TeamPlayer {
  public var id: Swift.Int {
    get
  }
  public var manager: TeamPlayer? {
    get
  }
  public var formation: Swift.String? {
    get
  }
  public var startingLineup: [TP]? {
    get
  }
  public var officials: [TP]? {
    get
  }
  public var substitutes: [TP]? {
    get
  }
  public var genericManager: TeamPlayer? {
    get
  }
  public var genericStartingLineup: [TeamPlayer]? {
    get
  }
  public var genericSubstitutes: [TeamPlayer]? {
    get
  }
  @objc deinit
}
public protocol AnyTeamLineup {
  var genericManager: TeamPlayer? { get }
  var formation: Swift.String? { get }
  var genericStartingLineup: [TeamPlayer]? { get }
  var genericSubstitutes: [TeamPlayer]? { get }
}
@_hasMissingDesignatedInitializers final public class VolleyballDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> VolleyballDetailsParams
  @discardableResult
  final public func includeLineups() -> VolleyballDetailsParams
  @discardableResult
  final public func includeTeam1LeagueTable() -> VolleyballDetailsParams
  @discardableResult
  final public func includeTeam2LeagueTable() -> VolleyballDetailsParams
  @discardableResult
  final public func includeLiveRankingTable() -> VolleyballDetailsParams
  @discardableResult
  final public func includeStaff() -> VolleyballDetailsParams
  @discardableResult
  final public func includeEvents() -> VolleyballDetailsParams
  @discardableResult
  final public func includeOdds() -> VolleyballDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> VolleyballDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> VolleyballDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> VolleyballDetailsParams
  @discardableResult
  final public func includeVenue() -> VolleyballDetailsParams
  @discardableResult
  final public func includeAttendance() -> VolleyballDetailsParams
  @discardableResult
  final public func includeStatistics() -> VolleyballDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> VolleyballDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> VolleyballDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> VolleyballDetailsParams
  @discardableResult
  final public func includeCommentary() -> VolleyballDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> VolleyballDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class HandballPlayerStatistics : PlayerStatistics, CardsStatistics {
  final public var isGoalkeeperBackcourtGoals: Swift.Bool {
    get
  }
  final public var isNineMeterGoals: Swift.Bool {
    get
  }
  final public var isBackcourtGoals: Swift.Bool {
    get
  }
  final public var isBackcourtShots: Swift.Bool {
    get
  }
  final public var isGoalkeeperBackcourtSaves: Swift.Bool {
    get
  }
  final public var isNumberOfCardsFirstHalf: Swift.Bool {
    get
  }
  final public var isNumberOfCardsSecondHalf: Swift.Bool {
    get
  }
  final public var isTechnicalFaults: Swift.Bool {
    get
  }
  final public var isSaves: Swift.Bool {
    get
  }
  final public var isGoals: Swift.Bool {
    get
  }
  final public var isBlueCards: Swift.Bool {
    get
  }
  final public var isSteals: Swift.Bool {
    get
  }
  final public var isAssists: Swift.Bool {
    get
  }
  final public var isGoalPoints: Swift.Bool {
    get
  }
  final public var isSubstitutedIn: Swift.Bool {
    get
  }
  final public var isSubstitutedOut: Swift.Bool {
    get
  }
  final public var isPenaltySaves: Swift.Bool {
    get
  }
  final public var isSuspension: Swift.Bool {
    get
  }
  final public var isThrowsOnGoal: Swift.Bool {
    get
  }
  final public var isThrowsOffGoal: Swift.Bool {
    get
  }
  final public var isTotalThrows: Swift.Bool {
    get
  }
  final public var isDisciplinaries: Swift.Bool {
    get
  }
  final public var isNineMeterThrows: Swift.Bool {
    get
  }
  final public var isFieldThrows: Swift.Bool {
    get
  }
  final public var isFieldGoals: Swift.Bool {
    get
  }
  final public var is6MeterGoals: Swift.Bool {
    get
  }
  final public var is6MeterThrows: Swift.Bool {
    get
  }
  final public var isGoalkeeperThrowsAgainst: Swift.Bool {
    get
  }
  final public var isGoalkeeperSevenMeterThrowsAgainst: Swift.Bool {
    get
  }
  final public var isGoalkeeperGoals: Swift.Bool {
    get
  }
  final public var isGoalkeeperSevenMeterGoals: Swift.Bool {
    get
  }
  final public var isGoalkeeperSixMeterGoals: Swift.Bool {
    get
  }
  final public var isGoalkeeperNineMeterGoals: Swift.Bool {
    get
  }
  final public var isGoalkeeperNineMeterSaves: Swift.Bool {
    get
  }
  final public var isGoalkeeperWingGoals: Swift.Bool {
    get
  }
  final public var isGoalkeeperWingSaves: Swift.Bool {
    get
  }
  final public var isGoalkeeperPivotGoals: Swift.Bool {
    get
  }
  final public var isGoalkeeperFastbreakGoals: Swift.Bool {
    get
  }
  final public var isGoalkeeperFastbreakSaves: Swift.Bool {
    get
  }
  final public var isGoalkeeperFieldSaves: Swift.Bool {
    get
  }
  final public var isGoalkeeperSixMeterSaves: Swift.Bool {
    get
  }
  final public var isGoalkeeperPivotSaves: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SoccerPlayerStatistics : PlayerStatistics, CardsStatistics {
  final public var isPenaltyFailCount: Swift.Bool {
    get
  }
  final public var isPenaltySuccessCount: Swift.Bool {
    get
  }
  final public var isTeamMatches: Swift.Bool {
    get
  }
  final public var isGoals: Swift.Bool {
    get
  }
  final public var isAssists: Swift.Bool {
    get
  }
  final public var isPenalties: Swift.Bool {
    get
  }
  final public var isShotsOnGoal: Swift.Bool {
    get
  }
  final public var isShotsOffGoal: Swift.Bool {
    get
  }
  final public var isShotsBlocked: Swift.Bool {
    get
  }
  final public var isGoalByFoot: Swift.Bool {
    get
  }
  final public var isCorners: Swift.Bool {
    get
  }
  final public var isOffsides: Swift.Bool {
    get
  }
  final public var isGoalByHead: Swift.Bool {
    get
  }
  final public var isSubstitutedIn: Swift.Bool {
    get
  }
  final public var isFirstGoals: Swift.Bool {
    get
  }
  final public var isLastGoals: Swift.Bool {
    get
  }
  final public var isMatchesDrawn: Swift.Bool {
    get
  }
  final public var isMatchesLost: Swift.Bool {
    get
  }
  final public var isMatchesWon: Swift.Bool {
    get
  }
  final public var isNumberOfCardsInFirstHalf: Swift.Bool {
    get
  }
  final public var isNumberOfCardsInSecondHalf: Swift.Bool {
    get
  }
  final public var isOwnGoals: Swift.Bool {
    get
  }
  final public var isSubstitutedOut: Swift.Bool {
    get
  }
  final public var isTotalShots: Swift.Bool {
    get
  }
  final public var isGoalsByHeader: Swift.Bool {
    get
  }
  final public var isGoalPoints: Swift.Bool {
    get
  }
  final public var isTeamScored: Swift.Bool {
    get
  }
  final public var isTeamConceded: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MatchStatistics : Statistics {
  public var matchStatTypeItem: MatchStatTypeItem
  public var statType: MatchStatTypeId {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BaseballSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BaseballSeasonDetailsParams
  @discardableResult
  final public func includePlayerStats() -> BaseballSeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> BaseballSeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> BaseballSeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> BaseballSeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> BaseballSeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> BaseballSeasonDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FloorballDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> FloorballDetailsParams
  @discardableResult
  final public func includeBallCoordinate() -> FloorballDetailsParams
  @discardableResult
  final public func includeLineups() -> FloorballDetailsParams
  @discardableResult
  final public func includeTeam1LeagueTable() -> FloorballDetailsParams
  @discardableResult
  final public func includeTeam2LeagueTable() -> FloorballDetailsParams
  @discardableResult
  final public func includeLiveRankingTable() -> FloorballDetailsParams
  @discardableResult
  final public func includeStaff() -> FloorballDetailsParams
  @discardableResult
  final public func includeEvents() -> FloorballDetailsParams
  @discardableResult
  final public func includeOdds() -> FloorballDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> FloorballDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> FloorballDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> FloorballDetailsParams
  @discardableResult
  final public func includeVenue() -> FloorballDetailsParams
  @discardableResult
  final public func includeAttendance() -> FloorballDetailsParams
  @discardableResult
  final public func includeStatistics() -> FloorballDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> FloorballDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> FloorballDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> FloorballDetailsParams
  @discardableResult
  final public func includeCommentary() -> FloorballDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> FloorballDetailsParams
  @objc deinit
}
public enum LocksmithAccessibleOption : Swift.RawRepresentable {
  case whenUnlocked, afterFirstUnlock, always, whenUnlockedThisDeviceOnly, afterFirstUnlockThisDeviceOnly, alwaysThisDeviceOnly, whenPasscodeSetThisDeviceOnly
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class NascarRace : MotorsportRace<NascarSport, NascarDriver, NascarDriverStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PesapalloPlayerStatistics : PlayerStatistics {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BandyTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BandyTeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> BandyTeamDetailsParams
  @discardableResult
  final public func includeSquad() -> BandyTeamDetailsParams
  @discardableResult
  final public func includeRoles() -> BandyTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> BandyTeamDetailsParams
  @discardableResult
  final public func includeStages() -> BandyTeamDetailsParams
  @discardableResult
  final public func includeManager() -> BandyTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> BandyTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> BandyTeamDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TableTennisPlayerStatistics : PlayerStatistics, CardsStatistics {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class HandballStatistics : MatchStatistics, CardsStatisticsIncludeBlueCard {
  public var isTechnicalFaults: Swift.Bool {
    get
  }
  public var isSaves: Swift.Bool {
    get
  }
  public var isSteals: Swift.Bool {
    get
  }
  public var isBallPossession: Swift.Bool {
    get
  }
  public var isFouls: Swift.Bool {
    get
  }
  public var isMaxGoals: Swift.Bool {
    get
  }
  public var isSevenMetersScored: Swift.Bool {
    get
  }
  public var isFreeThrows: Swift.Bool {
    get
  }
  public var is2MinPenalties: Swift.Bool {
    get
  }
  public var isPowerplayGoals: Swift.Bool {
    get
  }
  public var isShortHandedGoals: Swift.Bool {
    get
  }
  public var isAttackSuccess: Swift.Bool {
    get
  }
  public var isPowerPlayGoalsPercent: Swift.Bool {
    get
  }
  public var isShortHandedGoalsPercent: Swift.Bool {
    get
  }
  public var isGoals: Swift.Bool {
    get
  }
  public var isFastbreakGoals: Swift.Bool {
    get
  }
  public var isBreakthroughGoals: Swift.Bool {
    get
  }
  public var isPivotGoals: Swift.Bool {
    get
  }
  public var isPivotMisses: Swift.Bool {
    get
  }
  public var isPivotPosts: Swift.Bool {
    get
  }
  public var isPivotBlocks: Swift.Bool {
    get
  }
  public var isRightWingGoals: Swift.Bool {
    get
  }
  public var isLeftWingGoals: Swift.Bool {
    get
  }
  public var is9MeterGoals: Swift.Bool {
    get
  }
  public var is9MeterThrows: Swift.Bool {
    get
  }
  public var is7MeterGoals: Swift.Bool {
    get
  }
  public var is6MeterGoals: Swift.Bool {
    get
  }
  public var is6MeterThrows: Swift.Bool {
    get
  }
  public var is6mcentreGoals: Swift.Bool {
    get
  }
  public var is6mleftGoals: Swift.Bool {
    get
  }
  public var is6mrightGoals: Swift.Bool {
    get
  }
  public var is6mleftThrows: Swift.Bool {
    get
  }
  public var is6mrightThrows: Swift.Bool {
    get
  }
  public var isThrows: Swift.Bool {
    get
  }
  public var isBlockedThrows: Swift.Bool {
    get
  }
  public var isThrowsOffTarget: Swift.Bool {
    get
  }
  public var is7MeterSaves: Swift.Bool {
    get
  }
  public var isWingMisses: Swift.Bool {
    get
  }
  public var isWingPosts: Swift.Bool {
    get
  }
  public var isWingBlocks: Swift.Bool {
    get
  }
  public var isBreakthroughSaves: Swift.Bool {
    get
  }
  public var isBreakthroughMisses: Swift.Bool {
    get
  }
  public var isBreakthroughPosts: Swift.Bool {
    get
  }
  public var isBreakthroughBlocks: Swift.Bool {
    get
  }
  public var isTimeouts: Swift.Bool {
    get
  }
  public var isAwarded7m: Swift.Bool {
    get
  }
  public var is6MCentreGoals: Swift.Bool {
    get
  }
  public var is6MLeftGoals: Swift.Bool {
    get
  }
  public var is6MRightGoals: Swift.Bool {
    get
  }
  public var is6MLeftThrows: Swift.Bool {
    get
  }
  public var is6MRightThrows: Swift.Bool {
    get
  }
  public var is7MeterShots: Swift.Bool {
    get
  }
  public var isBackcourtShots: Swift.Bool {
    get
  }
  public var isBackcourtGoals: Swift.Bool {
    get
  }
  public var isBackcourtMisses: Swift.Bool {
    get
  }
  public var isBackcourtSaves: Swift.Bool {
    get
  }
  public var isBackcourtPosts: Swift.Bool {
    get
  }
  public var isBackcourtBlocks: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Match<P, T, CS, SCORE, SRT, D, SP, TP, PS, CSCORE, COV> : ContestWithDetails<T, D, COV, CS, SCORE, SRT, SP>, RepeatingDetailsLoadable, DetailsLoadable, AnyMatch where P : Params, T : Team, CS : ContestStatus, SCORE : Score<T, PS, SRT, CSCORE>, SRT : Swift.Comparable, D : Details, SP : Sport, TP : TeamPlayer, PS : PeriodStatus, CSCORE : ContestScore<T, SRT>, COV : DetailsCoverage {
  public var team1: T? {
    get
  }
  public var team2: T? {
    get
  }
  public var weather: MatchWeather? {
    get
  }
  public var pitchCondition: PitchCondition? {
    get
  }
  public var round: MatchRound? {
    get
  }
  public var roundName: Swift.String? {
    get
  }
  public var currentPeriodIdx: Swift.Int? {
    get
  }
  public var seasonId: Swift.Int? {
    get
  }
  public var nextMatchId: Swift.Int? {
    get
  }
  override public var contesters: [T] {
    get
    set
  }
  public var genericTeam1: Team? {
    get
  }
  public var genericTeam2: Team? {
    get
  }
  public var genericTeamIntScore: AnyTeamIntScore? {
    get
  }
  public var anyTeamStagedMatch: AnyTeamStagedMatch? {
    get
  }
  public var anyServiceMatch: AnyServiceMatch? {
    get
  }
  @available(*, deprecated, message: "Use contest.anyMatch; Will be removed in SDK version 4.0.")
  override public var anyContest: AnyContest? {
    get
  }
  @objc deinit
}
public protocol AnyMatch : AnyContestWithDetails {
  var genericTeam1: Team? { get }
  var genericTeam2: Team? { get }
  var weather: MatchWeather? { get }
  var pitchCondition: PitchCondition? { get }
  var round: MatchRound? { get }
  var roundName: Swift.String? { get }
  var currentPeriodIdx: Swift.Int? { get }
  var seasonId: Swift.Int? { get }
  var nextMatchId: Swift.Int? { get }
  var genericTeamIntScore: AnyTeamIntScore? { get }
  var anyTeamStagedMatch: AnyTeamStagedMatch? { get }
  var anyServiceMatch: AnyServiceMatch? { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TeamStagedMatchWithIntContestScore<P, T, CS, D, SP, TP, PS, STG, TOR, COV> : TeamStagedMatch<P, T, CS, Score<T, PS, Swift.Int, TeamIntContestScore<T>>, Swift.Int, D, SP, TP, PS, TeamIntContestScore<T>, STG, TOR, COV> where P : Params, T : Team, CS : ContestStatus, D : Details, SP : Sport, TP : TeamPlayer, PS : PeriodStatus, STG : TournamentStage, TOR : Tournament, COV : DetailsCoverage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TeamStagedMatch<P, T, CS, SCORE, SRT, D, SP, TP, PS, CSCORE, STG, TOR, COV> : Match<P, T, CS, SCORE, SRT, D, SP, TP, PS, CSCORE, COV>, AnyTeamStagedMatch where P : Params, T : Team, CS : ContestStatus, SCORE : Score<T, PS, SRT, CSCORE>, SRT : Swift.Comparable, D : Details, SP : Sport, TP : TeamPlayer, PS : PeriodStatus, CSCORE : ContestScore<T, SRT>, STG : TournamentStage, TOR : Tournament, COV : DetailsCoverage {
  public var distanceBetweenTeams: Swift.Int? {
    get
  }
  public var stage: STG? {
    get
  }
  public var tournament: TOR? {
    get
    set
  }
  public var genericStage: TournamentStage? {
    get
  }
  public var genericTournament: Tournament? {
    get
  }
  @available(*, deprecated, message: "Use contest.anyMatch; Will be removed in SDK version 4.0.")
  override public var anyContest: AnyContest? {
    get
  }
  @objc deinit
}
public protocol AnyTeamStagedMatch : AnyMatch {
  var distanceBetweenTeams: Swift.Int? { get }
  var genericStage: TournamentStage? { get }
  var genericTournament: Tournament? { get }
}
public protocol ServiceMatch : AnyServiceMatch {
  associatedtype T : Team
  var serviceTeam: Self.T? { get }
  var servicePosition: ServicePosition? { get }
}
public protocol AnyServiceMatch : AnyMatch {
  var genericServiceTeam: Team? { get }
  var servicePosition: ServicePosition? { get }
}
extension Match {
  public func trackDetails(with params: P, completion: @escaping (RepeatingResponse<D>) -> Swift.Void) -> RepeatingTask
  public func loadDetails(with params: P, completion: @escaping (Response<D>) -> Swift.Void)
}
public enum ServicePosition {
  case left
  case right
  public static func == (a: ServicePosition, b: ServicePosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DotaPlayerStatistics : PlayerStatistics {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TennisTournament : TournamentWithDetails<TennisTournamentDetails, TennisTournamentDetailsParams> {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AmericanFootballSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> AmericanFootballSeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> AmericanFootballSeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> AmericanFootballSeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> AmericanFootballSeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> AmericanFootballSeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> AmericanFootballSeasonDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SquashSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> SquashSeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> SquashSeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> SquashSeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> SquashSeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> SquashSeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> SquashSeasonDetailsParams
  @objc deinit
}
public enum PlayerStatType {
  public static let yellowCards: PlayerStatTypeItem
  public static let yellowRedCards: PlayerStatTypeItem
  public static let redCards: PlayerStatTypeItem
  public static let goals: PlayerStatTypeItem
  public static let assists: PlayerStatTypeItem
  public static let penalties: PlayerStatTypeItem
  public static let shotsOnGoal: PlayerStatTypeItem
  public static let shotsOffGoal: PlayerStatTypeItem
  public static let shotsBlocked: PlayerStatTypeItem
  public static let goalByFoot: PlayerStatTypeItem
  public static let corners: PlayerStatTypeItem
  public static let offsides: PlayerStatTypeItem
  public static let goalByHead: PlayerStatTypeItem
  public static let substitutedIn: PlayerStatTypeItem
  public static let firstGoals: PlayerStatTypeItem
  public static let lastGoals: PlayerStatTypeItem
  public static let matchesDrawn: PlayerStatTypeItem
  public static let matchesLost: PlayerStatTypeItem
  public static let matchesWon: PlayerStatTypeItem
  public static let numberOfCardsInFirstHalf: PlayerStatTypeItem
  public static let numberOfCardsInSecondHalf: PlayerStatTypeItem
  public static let ownGoals: PlayerStatTypeItem
  public static let substitutedOut: PlayerStatTypeItem
  public static let totalShots: PlayerStatTypeItem
  public static let goalsByHeader: PlayerStatTypeItem
  public static let goalPoints: PlayerStatTypeItem
  public static let teamScored: PlayerStatTypeItem
  public static let teamConceded: PlayerStatTypeItem
  public static let points: PlayerStatTypeItem
  public static let rebounds: PlayerStatTypeItem
  public static let steals: PlayerStatTypeItem
  public static let turnovers: PlayerStatTypeItem
  public static let efficiency: PlayerStatTypeItem
  public static let twoPointsMade: PlayerStatTypeItem
  public static let twoPointsAttempted: PlayerStatTypeItem
  public static let twoPointsPercentage: PlayerStatTypeItem
  public static let threePointsMade: PlayerStatTypeItem
  public static let threePointsAttempted: PlayerStatTypeItem
  public static let threePointsPercentage: PlayerStatTypeItem
  public static let freeThrowsMade: PlayerStatTypeItem
  public static let freeThrowsAttempted: PlayerStatTypeItem
  public static let freeThrowsPercentage: PlayerStatTypeItem
  public static let minutesPlayed: PlayerStatTypeItem
  public static let fieldGoalsMade: PlayerStatTypeItem
  public static let fieldGoalsAttempted: PlayerStatTypeItem
  public static let fieldGoalsPercentage: PlayerStatTypeItem
  public static let blocks: PlayerStatTypeItem
  public static let personalFouls: PlayerStatTypeItem
  public static let gamesPlayed: PlayerStatTypeItem
  public static let blockedAttempts: PlayerStatTypeItem
  public static let defensiveRebounds: PlayerStatTypeItem
  public static let flagrantFouls: PlayerStatTypeItem
  public static let offensiveRebounds: PlayerStatTypeItem
  public static let plusMinus: PlayerStatTypeItem
  public static let technicalFouls: PlayerStatTypeItem
  public static let numberOfCardsFirstHalf: PlayerStatTypeItem
  public static let numberOfCardsSecondHalf: PlayerStatTypeItem
  public static let technicalFaults: PlayerStatTypeItem
  public static let saves: PlayerStatTypeItem
  public static let penaltySaves: PlayerStatTypeItem
  public static let suspension: PlayerStatTypeItem
  public static let disciplinaries: PlayerStatTypeItem
  public static let nineMeterShots: PlayerStatTypeItem
  public static let fieldThrows: PlayerStatTypeItem
  public static let fieldGoals: PlayerStatTypeItem
  public static let goals6Meter: PlayerStatTypeItem
  public static let throws6Meter: PlayerStatTypeItem
  public static let goalkeeperThrowsAgainst: PlayerStatTypeItem
  public static let goalkeeperSevenMeterThrowsAgainst: PlayerStatTypeItem
  public static let goalkeeperGoals: PlayerStatTypeItem
  public static let goalkeeperSevenMeterGoals: PlayerStatTypeItem
  public static let goalkeeperSixMeterGoals: PlayerStatTypeItem
  public static let goalkeeperNineMeterGoals: PlayerStatTypeItem
  public static let goalkeeperNineMeterSaves: PlayerStatTypeItem
  public static let goalkeeperWingGoals: PlayerStatTypeItem
  public static let goalkeeperWingSaves: PlayerStatTypeItem
  public static let goalkeeperPivotGoals: PlayerStatTypeItem
  public static let goalkeeperFastbreakGoals: PlayerStatTypeItem
  public static let goalkeeperFastbreakSaves: PlayerStatTypeItem
  public static let goalkeeperFieldSaves: PlayerStatTypeItem
  public static let goalkeeperSixMeterSaves: PlayerStatTypeItem
  public static let goalkeeperPivotSaves: PlayerStatTypeItem
  public static let numberOfPlayedMatches: PlayerStatTypeItem
  public static let matchesWonPercent: PlayerStatTypeItem
  public static let matchesLostPercent: PlayerStatTypeItem
  public static let totalTimeOnIce: PlayerStatTypeItem
  public static let penaltyMinutes: PlayerStatTypeItem
  public static let faceoffsWon: PlayerStatTypeItem
  public static let faceoffsLost: PlayerStatTypeItem
  public static let hits: PlayerStatTypeItem
  public static let blockedShots: PlayerStatTypeItem
  public static let numberOfShifts: PlayerStatTypeItem
  public static let timeOnIceShifts: PlayerStatTypeItem
  public static let giveaways: PlayerStatTypeItem
  public static let takeaways: PlayerStatTypeItem
  public static let powerplayGoals: PlayerStatTypeItem
  public static let shortHandedGoals: PlayerStatTypeItem
  public static let shootingPercentage: PlayerStatTypeItem
  public static let faceoffWinningPercentage: PlayerStatTypeItem
  public static let timeOnIceShiftsPerMatch: PlayerStatTypeItem
  public static let timeOnIcePerMatch: PlayerStatTypeItem
  public static let shootoutShotsOnGoal: PlayerStatTypeItem
  public static let averageTimeOnIce: PlayerStatTypeItem
  public static let penaltyGoals: PlayerStatTypeItem
  public static let passingYards: PlayerStatTypeItem
  public static let rushingYards: PlayerStatTypeItem
  public static let receivingYards: PlayerStatTypeItem
  public static let defenseTackles: PlayerStatTypeItem
  public static let defenseSacks: PlayerStatTypeItem
  public static let defenseInterception: PlayerStatTypeItem
  public static let passingAtempts: PlayerStatTypeItem
  public static let passingCompletions: PlayerStatTypeItem
  public static let passingTouchdowns: PlayerStatTypeItem
  public static let receptions: PlayerStatTypeItem
  public static let receivingTouchdown: PlayerStatTypeItem
  public static let rushingAttempts: PlayerStatTypeItem
  public static let rushingTouchdowns: PlayerStatTypeItem
  public static let tries: PlayerStatTypeItem
  public static let conversions: PlayerStatTypeItem
  public static let dropGoals: PlayerStatTypeItem
  public static let possession: PlayerStatTypeItem
  public static let penaltiesConceded: PlayerStatTypeItem
  public static let lineouts: PlayerStatTypeItem
  public static let scrums: PlayerStatTypeItem
  public static let penaltyTries: PlayerStatTypeItem
  public static let thrown180: PlayerStatTypeItem
  public static let thrown140Plus: PlayerStatTypeItem
  public static let thrown100Plus: PlayerStatTypeItem
  public static let highestCheckout: PlayerStatTypeItem
  public static let checkouts100Plus: PlayerStatTypeItem
  public static let checkoutsPercentage: PlayerStatTypeItem
  public static let allDartsAverage: PlayerStatTypeItem
  public static let fieldingGamesPlayed: PlayerStatTypeItem
  public static let fieldingGamesStarted: PlayerStatTypeItem
  public static let fieldingTotalChances: PlayerStatTypeItem
  public static let fieldingPutouts: PlayerStatTypeItem
  public static let fieldingAssists: PlayerStatTypeItem
  public static let fieldingErrorsTotal: PlayerStatTypeItem
  public static let fieldingDoublePlays: PlayerStatTypeItem
  public static let fieldingPassedBalls: PlayerStatTypeItem
  public static let fieldingWildPitchesWhileCatching: PlayerStatTypeItem
  public static let fieldingPercentage: PlayerStatTypeItem
  public static let fieldingRangeFactor: PlayerStatTypeItem
  public static let fieldingTriplePlays: PlayerStatTypeItem
  public static let fieldingErrorsThrowing: PlayerStatTypeItem
  public static let fieldingErrorsFielding: PlayerStatTypeItem
  public static let fieldingErrorsInterference: PlayerStatTypeItem
  public static let hittingGamesPlayed: PlayerStatTypeItem
  public static let hittingGamesStarted: PlayerStatTypeItem
  public static let hittingAtBats: PlayerStatTypeItem
  public static let hittingPlateAppearances: PlayerStatTypeItem
  public static let hittingTotalRunsScored: PlayerStatTypeItem
  public static let hittingHits: PlayerStatTypeItem
  public static let hittingDoubles: PlayerStatTypeItem
  public static let hittingTriples: PlayerStatTypeItem
  public static let hittingHomeRuns: PlayerStatTypeItem
  public static let hittingRunsBattedIn: PlayerStatTypeItem
  public static let hittingWalks: PlayerStatTypeItem
  public static let hittingTotalStrikeouts: PlayerStatTypeItem
  public static let hittingStolenBases: PlayerStatTypeItem
  public static let hittingCaughtStealing: PlayerStatTypeItem
  public static let hittingBattingAverage: PlayerStatTypeItem
  public static let hittingOnBasePercentage: PlayerStatTypeItem
  public static let hittingSluggingPercentage: PlayerStatTypeItem
  public static let hittingOnBasePercentagePlusSlugging: PlayerStatTypeItem
  public static let hittingIsolatedPower: PlayerStatTypeItem
  public static let hittingBattingAverageOnBallsInPlay: PlayerStatTypeItem
  public static let hittingWalksPerStrikeout: PlayerStatTypeItem
  public static let hittingGroundBallToFlyBallRatio: PlayerStatTypeItem
  public static let hittingExtraBaseHits: PlayerStatTypeItem
  public static let hittingAtBatsPerHomeRun: PlayerStatTypeItem
  public static let hittingAtBatsWithRunnersInScoringPosition: PlayerStatTypeItem
  public static let hittingHitsWithRunnersInScoringPosition: PlayerStatTypeItem
  public static let hittingGroundBallsIntoDoublePlay: PlayerStatTypeItem
  public static let hittingPickedOff: PlayerStatTypeItem
  public static let hittingRunnersOnBaseWithTwoOuts: PlayerStatTypeItem
  public static let hittingRunsBattedInWithTwoOuts: PlayerStatTypeItem
  public static let hittingTeamRunnersLeftOnBase: PlayerStatTypeItem
  public static let hittingTotalBases: PlayerStatTypeItem
  public static let pitchingOverallGamesPlayed: PlayerStatTypeItem
  public static let pitchingOverallGamesStarted: PlayerStatTypeItem
  public static let pitchingOverallWins: PlayerStatTypeItem
  public static let pitchingOverallLosses: PlayerStatTypeItem
  public static let pitchingOverallEarnedRunAverage: PlayerStatTypeItem
  public static let pitchingOverallHolds: PlayerStatTypeItem
  public static let pitchingOverallSaves: PlayerStatTypeItem
  public static let pitchingOverallSaveOpportunities: PlayerStatTypeItem
  public static let pitchingOverallInningsPitched: PlayerStatTypeItem
  public static let pitchingOverallHitsAllowed: PlayerStatTypeItem
  public static let pitchingOverallTotalRunsAllowed: PlayerStatTypeItem
  public static let pitchingOverallEarnedRunsAllowed: PlayerStatTypeItem
  public static let pitchingOverallHomeRunsAllowed: PlayerStatTypeItem
  public static let pitchingOverallWalks: PlayerStatTypeItem
  public static let pitchingOverallTotalStrikeouts: PlayerStatTypeItem
  public static let pitchingOverallOpponentsBattingAverage: PlayerStatTypeItem
  public static let pitchingOverallWalksPlusHitsPerInningsPitched: PlayerStatTypeItem
  public static let pitchingOverallStrikeoutsPer9Innings: PlayerStatTypeItem
  public static let pitchingOverallStrikeoutsPerWalk: PlayerStatTypeItem
  public static let pitchingOverallGroundBallToFlyBallRatio: PlayerStatTypeItem
  public static let pitchingOverallQualityStarts: PlayerStatTypeItem
  public static let pitchingOverallCompleteGames: PlayerStatTypeItem
  public static let pitchingOverallShutouts: PlayerStatTypeItem
  public static let pitchingOverallBattersFaced: PlayerStatTypeItem
  public static let pitchingOverallBlownSaves: PlayerStatTypeItem
  public static let pitchingOverallFlyOuts: PlayerStatTypeItem
  public static let pitchingOverallGroundOuts: PlayerStatTypeItem
  public static let pitchingOverallHitBatters: PlayerStatTypeItem
  public static let pitchingOverallIntentionalWalks: PlayerStatTypeItem
  public static let pitchingOverallPitchCount: PlayerStatTypeItem
  public static let pitchingOverallTotalStrikes: PlayerStatTypeItem
  public static let lastEvent: PlayerStatTypeItem
  public static let penaltyFailCount: PlayerStatTypeItem
  public static let penaltySuccessCount: PlayerStatTypeItem
  public static let active: PlayerStatTypeItem
  public static let started: PlayerStatTypeItem
  public static let teamMatches: PlayerStatTypeItem
  public static let fouls: PlayerStatTypeItem
  public static let goalkeeperBackcourtSaves: PlayerStatTypeItem
  public static let goalkeeperBackcourtGoals: PlayerStatTypeItem
  public static let nineMeterGoals: PlayerStatTypeItem
  public static let backcourtGoals: PlayerStatTypeItem
  public static let backcourtShots: PlayerStatTypeItem
  public static let unknown: PlayerStatTypeItem
  public static let goaltendingShootoutShotsAgainst: PlayerStatTypeItem
  public static let goaltendingShootoutGoalsAgainst: PlayerStatTypeItem
  public static let goaltendingShootoutSaves: PlayerStatTypeItem
  public static let missedShots: PlayerStatTypeItem
  public static let overtimeGoals: PlayerStatTypeItem
  public static let winningGoals: PlayerStatTypeItem
  public static let powerPlayShotsOnGoal: PlayerStatTypeItem
  public static let powerPlayAssists: PlayerStatTypeItem
  public static let shortHandedShotsOnGoal: PlayerStatTypeItem
  public static let shortHandedAssists: PlayerStatTypeItem
  public static let shootoutGoals: PlayerStatTypeItem
  public static let goaltendingTotalWins: PlayerStatTypeItem
  public static let goaltendingTotalLosses: PlayerStatTypeItem
  public static let goaltendingPowerPlayShotsAgainst: PlayerStatTypeItem
  public static let goaltendingPowerPlayGoalsAgainst: PlayerStatTypeItem
  public static let goaltendingPowerPlaySaves: PlayerStatTypeItem
  public static let goaltendingShortHandedShotsAgainst: PlayerStatTypeItem
  public static let goaltendingShortHandedSaves: PlayerStatTypeItem
  public static let shootoutAttempts: PlayerStatTypeItem
  public static let emptyNetGoals: PlayerStatTypeItem
  public static let errors: PlayerStatTypeItem
  public static let atBatsPerStrikeout: PlayerStatTypeItem
  public static let runnersLeftOnBase: PlayerStatTypeItem
  public static let ballsInPlay: PlayerStatTypeItem
  public static let walksPerPlateAppearance: PlayerStatTypeItem
  public static let secondaryAverage: PlayerStatTypeItem
  public static let pitchesFaced: PlayerStatTypeItem
  public static let lineDrive: PlayerStatTypeItem
  public static let flyBall: PlayerStatTypeItem
  public static let popUp: PlayerStatTypeItem
  public static let groundBall: PlayerStatTypeItem
  public static let singles: PlayerStatTypeItem
  public static let intentionalWalks: PlayerStatTypeItem
  public static let hitByPitch: PlayerStatTypeItem
  public static let fieldersChoice: PlayerStatTypeItem
  public static let reachedOnError: PlayerStatTypeItem
  public static let cycles: PlayerStatTypeItem
  public static let strikesLooking: PlayerStatTypeItem
  public static let strikesSwinging: PlayerStatTypeItem
  public static let totalStrikes: PlayerStatTypeItem
  public static let balls: PlayerStatTypeItem
  public static let intentionalBallsTaken: PlayerStatTypeItem
  public static let dirtBallsFaced: PlayerStatTypeItem
  public static let foulBalls: PlayerStatTypeItem
  public static let popOuts: PlayerStatTypeItem
  public static let flyOuts: PlayerStatTypeItem
  public static let flyOutsIntoDoublePlays: PlayerStatTypeItem
  public static let lineOut: PlayerStatTypeItem
  public static let lineOutInDoublePlay: PlayerStatTypeItem
  public static let groundOuts: PlayerStatTypeItem
  public static let strikeoutsLooking: PlayerStatTypeItem
  public static let strikeoutsSwinging: PlayerStatTypeItem
  public static let sacrificeFlys: PlayerStatTypeItem
  public static let sacrificeHits: PlayerStatTypeItem
  public static let stolenBasePercentage: PlayerStatTypeItem
  public static let overallOpponentsRunnersLeftOnBase: PlayerStatTypeItem
  public static let overallWildPitches: PlayerStatTypeItem
  public static let overallInningsPitchedFormatted: PlayerStatTypeItem
  public static let overallSinglesAllowed: PlayerStatTypeItem
  public static let overallDoublesAllowed: PlayerStatTypeItem
  public static let overallTriplesAllowed: PlayerStatTypeItem
  public static let overallTotalBasesAllowed: PlayerStatTypeItem
  public static let overallFieldersChoiceAllowed: PlayerStatTypeItem
  public static let overallReachedOnErrorAllowed: PlayerStatTypeItem
  public static let overallUnearnedRunsAllowed: PlayerStatTypeItem
  public static let overallStrikesLooking: PlayerStatTypeItem
  public static let overallBalls: PlayerStatTypeItem
  public static let overallIntentionalBalls: PlayerStatTypeItem
  public static let overallDirtBalls: PlayerStatTypeItem
  public static let overallFoulBalls: PlayerStatTypeItem
  public static let overallPopOuts: PlayerStatTypeItem
  public static let overallFlyOutsIntoDoublePlays: PlayerStatTypeItem
  public static let overallLineOuts: PlayerStatTypeItem
  public static let overallLineOutsInDoublePlays: PlayerStatTypeItem
  public static let overallGroundOutsIntoDoublePlays: PlayerStatTypeItem
  public static let overallStrikeoutsLooking: PlayerStatTypeItem
  public static let overallStrikeoutsSwinging: PlayerStatTypeItem
  public static let overallSacrififceFlys: PlayerStatTypeItem
  public static let overallSacrificeHits: PlayerStatTypeItem
  public static let overallPickoff: PlayerStatTypeItem
  public static let overallRunnersCaughtStealing: PlayerStatTypeItem
  public static let overallStolenBasesAllowed: PlayerStatTypeItem
  public static let overallBalks: PlayerStatTypeItem
  public static let overallStrikesSwinging: PlayerStatTypeItem
  public static let completeGames: PlayerStatTypeItem
  public static let gamesFinished: PlayerStatTypeItem
  public static let overallGamesTeamLoss: PlayerStatTypeItem
  public static let overallGamesTeamWin: PlayerStatTypeItem
  public static let overallGamesFinished: PlayerStatTypeItem
  public static let gamesStarted: PlayerStatTypeItem
  public static let primaryAssists: PlayerStatTypeItem
  public static let secondaryAssists: PlayerStatTypeItem
  public static let shorthandedTimeOnIce: PlayerStatTypeItem
  public static let goaltenderDecision: PlayerStatTypeItem
  public static let blueCards: PlayerStatTypeItem
  public static let fastbreakGoals: PlayerStatTypeItem
  public static let savedPercentage: PlayerStatTypeItem
  public static let shirtNumber: PlayerStatTypeItem
}
public struct PlayerStatTypeItem : Swift.Equatable, Swift.Hashable {
  public static func == (lhs: PlayerStatTypeItem, rhs: PlayerStatTypeItem) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RugbyPlayerStatistics : PlayerStatistics, CardsStatistics {
  final public var isTries: Swift.Bool {
    get
  }
  final public var isConversions: Swift.Bool {
    get
  }
  final public var isPenaltyGoals: Swift.Bool {
    get
  }
  final public var isDropGoals: Swift.Bool {
    get
  }
  final public var isPossession: Swift.Bool {
    get
  }
  final public var isPenaltiesConceded: Swift.Bool {
    get
  }
  final public var isLineouts: Swift.Bool {
    get
  }
  final public var isScrums: Swift.Bool {
    get
  }
  final public var isPenaltyTries: Swift.Bool {
    get
  }
  final public var isTurnovers: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ContesterController : BaseController {
  public func getNationalTeams<T>(_ teamType: T.Type, countryCode: Swift.String, sport: Sport, completion: @escaping (Response<[T]>) -> Swift.Void) where T : Team
  public func getContester<C>(_ contesterType: C.Type, contesterId: Swift.Int, completion: @escaping (Response<C>) -> Swift.Void) where C : Contester
  public func getPlayer<P>(_ playerType: P.Type, playerId: Swift.Int, completion: @escaping (Response<P>) -> Swift.Void) where P : Contester
  public func getPreviousMeetings<C>(_ contestType: C.Type, id1: Swift.Int, id2: Swift.Int, count: Swift.Int, completion: @escaping (Response<[C]>) -> Swift.Void) where C : Contest
  public func getNextMeetings<C>(_ contestType: C.Type, id1: Swift.Int, id2: Swift.Int, count: Swift.Int, completion: @escaping (Response<[C]>) -> Swift.Void) where C : Contest
  public func getTeamsHead2HeadStats(team1Id: Swift.Int, team2Id: Swift.Int, matchId: Swift.Int?, sport: Sport.Type, completion: @escaping (Response<TeamsHead2Head?>) -> Swift.Void)
  public func getTournamentTeams(for tournamentId: [Swift.Int], sport: Sport.Type, completion: @escaping (Response<[Swift.Int : [Team]]?>) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CyclingController : BaseController {
  final public func loadSeasons(completion: @escaping (Response<[CyclingSeason]>) -> Swift.Void)
  final public func loadActiveSeason(completion: @escaping (Response<CyclingSeason?>) -> Swift.Void)
  final public func loadDisciplines(for season: CyclingSeason, completion: @escaping (Response<[CyclingStageDiscipline]>) -> Swift.Void)
  final public func loadLastSeasonDisciplines(completion: @escaping (Response<[CyclingStageDiscipline]>) -> Swift.Void)
  final public func getSeason(by seasonId: Swift.Int, completion: @escaping (Response<CyclingSeason>) -> Swift.Void)
  final public func getStage(by stageId: Swift.Int, completion: @escaping (Response<CyclingRaceStage>) -> Swift.Void)
  final public func getStageDiscipline(by stageDisciplineId: Swift.Int, completion: @escaping (Response<CyclingStageDiscipline>) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ContesterCoordinate<C> : Coordinate where C : Contester {
  final public let contester: C?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VolleyballStatistics : MatchStatistics, CardsStatistics {
  public var isAces: Swift.Bool {
    get
  }
  public var isMaxPointsInRow: Swift.Bool {
    get
  }
  public var isPointsWon: Swift.Bool {
    get
  }
  public var isServicePointsWon: Swift.Bool {
    get
  }
  public var isServiceErrors: Swift.Bool {
    get
  }
  public var isTimeouts: Swift.Bool {
    get
  }
  public var isReceiverPointsWon: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SquashPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> SquashPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> SquashPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> SquashPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> SquashPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> SquashPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> SquashPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> SquashPlayerDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Dota2TeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> Dota2TeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> Dota2TeamDetailsParams
  @discardableResult
  final public func includeSquad() -> Dota2TeamDetailsParams
  @discardableResult
  final public func includeRoles() -> Dota2TeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> Dota2TeamDetailsParams
  @discardableResult
  final public func includeStages() -> Dota2TeamDetailsParams
  @discardableResult
  final public func includeManager() -> Dota2TeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> Dota2TeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> Dota2TeamDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FormulaOneRace : MotorsportRaceWithCircut<FormulaOneSport, FormulaOneDriver, FormulaOneDriverStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FormulaOneStatistics : MotorsportStatistics {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FormulaOneTeamStatistics : MotorsportStatistics {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FormulaOneDriverStatistics : MotorsportDriverStatistics {
  final public var isLaps: Swift.Bool {
    get
  }
  final public var isFastestLapTime: Swift.Bool {
    get
  }
  final public var isCarNumber: Swift.Bool {
    get
  }
  final public var isRacesWithPoints: Swift.Bool {
    get
  }
  final public var isPolePositions: Swift.Bool {
    get
  }
  final public var isPodiums: Swift.Bool {
    get
  }
  final public var isFastestLaps: Swift.Bool {
    get
  }
  final public var isVictoryPoleAndFastestLap: Swift.Bool {
    get
  }
  final public var isPitStopCount: Swift.Bool {
    get
  }
  final public var isGrid: Swift.Bool {
    get
  }
  final public var isTime: Swift.Bool {
    get
  }
  final public var isStatus: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FormulaOneRaceStatistics : Statistics {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MotorbikesSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> MotorbikesSeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> MotorbikesSeasonDetailsParams
  @discardableResult
  final public func includeTeamStats() -> MotorbikesSeasonDetailsParams
  @discardableResult
  final public func includeStages() -> MotorbikesSeasonDetailsParams
  @discardableResult
  final public func includeDrivers() -> MotorbikesSeasonDetailsParams
  @discardableResult
  final public func includeDriverStats() -> MotorbikesSeasonDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Params {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class LeagueOfLegendsPlayerStatistics : PlayerStatistics {
  @objc deinit
}
public struct Country : SportRadarModel {
  public var id: Swift.Int {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var continent: Swift.String? {
    get
  }
  public var countryCode: Swift.String? {
    get
  }
  public var countryAbbr: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers final public class CyclingRaceStageDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> CyclingRaceStageDetailsParams
  @discardableResult
  final public func includeCompetitors() -> CyclingRaceStageDetailsParams
  @discardableResult
  final public func includeCompetitorStatistics() -> CyclingRaceStageDetailsParams
  @discardableResult
  final public func includeTeams() -> CyclingRaceStageDetailsParams
  @discardableResult
  final public func includeRaces() -> CyclingRaceStageDetailsParams
  @discardableResult
  final public func includeStageScores() -> CyclingRaceStageDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FieldHockeyDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> FieldHockeyDetailsParams
  @discardableResult
  final public func includeLineups() -> FieldHockeyDetailsParams
  @discardableResult
  final public func includeTeam1LeagueTable() -> FieldHockeyDetailsParams
  @discardableResult
  final public func includeTeam2LeagueTable() -> FieldHockeyDetailsParams
  @discardableResult
  final public func includeLiveRankingTable() -> FieldHockeyDetailsParams
  @discardableResult
  final public func includeStaff() -> FieldHockeyDetailsParams
  @discardableResult
  final public func includeEvents() -> FieldHockeyDetailsParams
  @discardableResult
  final public func includeOdds() -> FieldHockeyDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> FieldHockeyDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> FieldHockeyDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> FieldHockeyDetailsParams
  @discardableResult
  final public func includeVenue() -> FieldHockeyDetailsParams
  @discardableResult
  final public func includeAttendance() -> FieldHockeyDetailsParams
  @discardableResult
  final public func includeStatistics() -> FieldHockeyDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> FieldHockeyDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> FieldHockeyDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> FieldHockeyDetailsParams
  @discardableResult
  final public func includeCommentary() -> FieldHockeyDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> FieldHockeyDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PesapalloTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> PesapalloTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> PesapalloTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> PesapalloTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> PesapalloTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> PesapalloTournamentDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TableTennisPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> TableTennisPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> TableTennisPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> TableTennisPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> TableTennisPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> TableTennisPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> TableTennisPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> TableTennisPlayerDetailsParams
  @objc deinit
}
public enum NotificationEventType : Swift.Int {
  case matchAboutToStart
  case scoreChangedPossible
  case scoreChanged
  case scoreChangedCancelled
  case yellowCardPossible
  case yellowCard
  case yellowCardCancelled
  @available(*, deprecated, message: "Use redCard instead; Will be removed in SDK version 4.0.")
  case yellowredCard
  case redCardPossible
  case redCard
  case redCardCancelled
  case matchStarted
  case matchEnded
  case periodStart
  case periodScore
  case playerSubstitution
  case setScore
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct TennisTeamRank {
  public let ranking: Swift.Int
  public let points: Swift.Int
  public let team: TennisTeam
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SoccerStatistics : MatchStatistics, CardsStatisticsIncludeBlueCard {
  public var isBallPossession: Swift.Bool {
    get
  }
  public var isAttackingSituations: Swift.Bool {
    get
  }
  public var isDangerousAttackingSituations: Swift.Bool {
    get
  }
  public var isBallSafeSituations: Swift.Bool {
    get
  }
  public var isGoals: Swift.Bool {
    get
  }
  public var isAssists: Swift.Bool {
    get
  }
  public var isPenalty: Swift.Bool {
    get
  }
  public var isShotsOnGoal: Swift.Bool {
    get
  }
  public var isShotsOffGoal: Swift.Bool {
    get
  }
  public var isShotsBlocked: Swift.Bool {
    get
  }
  public var isOffside: Swift.Bool {
    get
  }
  public var isSubstitutions: Swift.Bool {
    get
  }
  public var isFreeKicks: Swift.Bool {
    get
  }
  public var isGoalKicks: Swift.Bool {
    get
  }
  public var isThrowIns: Swift.Bool {
    get
  }
  public var isOffsides: Swift.Bool {
    get
  }
  public var isCornerKicks: Swift.Bool {
    get
  }
  public var isSaves: Swift.Bool {
    get
  }
  public var isFouls: Swift.Bool {
    get
  }
  public var isInjuries: Swift.Bool {
    get
  }
  public var isPenalties: Swift.Bool {
    get
  }
  public var isGoalAttempts: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FeedSearchController : BaseController {
  final public func search(term: Swift.String, limit: Swift.Int = 25, completion: @escaping (Response<[SportRadarModel]>) -> Swift.Void)
  final public func search<S>(term: Swift.String, in sport: S.Type, completion: @escaping (Response<[SportRadarModel]>) -> Swift.Void) where S : Sport
  final public func searchForPlayers<S>(term: Swift.String, in sport: S.Type, limit: Swift.Int = 25, completion: @escaping (Response<[TeamPlayer]>) -> Swift.Void) where S : Sport
  final public func searchForTeams<S>(term: Swift.String, in sport: S.Type, limit: Swift.Int = 25, completion: @escaping (Response<[Team]>) -> Swift.Void) where S : Sport
  final public func searchForPlayers(term: Swift.String, in category: Category, limit: Swift.Int = 25, completion: @escaping (Response<[TeamPlayer]>) -> Swift.Void)
  final public func searchForTeams(term: Swift.String, in category: Category, limit: Swift.Int = 25, completion: @escaping (Response<[Team]>) -> Swift.Void)
  final public func matchDay(term: Swift.String, startDate: Foundation.Date = Date(), endDate: Foundation.Date = Date(), sport: Sport? = nil, completion: @escaping (Response<MDPSearchResponse>) -> Swift.Void)
  final public func matchDayAdvanced(term: Swift.String, startDate: Foundation.Date = Date(), endDate: Foundation.Date = Date(), sport: Sport? = nil, filters: [ResultFilter] = [], sorts: [ResultSorting] = [], completion: @escaping (Response<MDPSearchResponse>) -> Swift.Void)
  final public func search(term: Swift.String, sport: Sport? = nil, startPage: Swift.Int?, pageSize: Swift.Int?, completion: @escaping (Response<MDPSearchResponse>) -> Swift.Void)
  final public func searchAdvanced(term: Swift.String, sport: Sport? = nil, startPage: Swift.Int?, pageSize: Swift.Int?, boosters: [ResultBooster]?, filters: [ResultFilter]?, sorts: [ResultSorting]?, completion: @escaping (Response<MDPSearchResponse>) -> Swift.Void)
  final public func suggestions(term: Swift.String, sport: Sport? = nil, maxResults: Swift.Int?, completion: @escaping (Response<MDPSearchResponse>) -> Swift.Void)
  final public func suggestionsAdvanced<RF>(term: Swift.String, sport: Sport? = nil, maxResults: Swift.Int?, boosters: [ResultBooster]?, filters: [RF]?, sorts: [ResultSorting]?, completion: @escaping (Response<MDPSearchResponse>) -> Swift.Void) where RF : ResultFilter
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class NotificationsController : BaseNotificationsController {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FieldHockeyPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> FieldHockeyPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> FieldHockeyPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> FieldHockeyPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> FieldHockeyPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> FieldHockeyPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> FieldHockeyPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> FieldHockeyPlayerDetailsParams
  @objc deinit
}
public enum TennisGameOpportunity : Swift.CaseIterable {
  case gamePoint, setPoint, breakPoint, matchPoint
  public static func == (a: TennisGameOpportunity, b: TennisGameOpportunity) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [TennisGameOpportunity]
  public static var allCases: [TennisGameOpportunity] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class DetailsCoverage {
  public var hasVenue: Swift.Bool {
    get
  }
  public var isCoverageAbandoned: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SoccerDetailsCoverage : DetailsCoverage {
  public var hasBallCoordinate: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AussieRulesDetailsCoverage : DetailsCoverage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FutsalDetailsCoverage : DetailsCoverage {
  public var hasBallCoordinate: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class WaterPoloDetailsCoverage : DetailsCoverage {
  public var hasBallCoordinate: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BasketballDetailsCoverage : DetailsCoverage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DartsDetailsCoverage : DetailsCoverage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SnookerDetailsCoverage : DetailsCoverage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PesapalloDetailsCoverage : DetailsCoverage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class HandballDetailsCoverage : DetailsCoverage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BadmintonDetailsCoverage : DetailsCoverage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SquashDetailsCoverage : DetailsCoverage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VolleyballDetailsCoverage : DetailsCoverage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BeachVolleyDetailsCoverage : DetailsCoverage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RugbyDetailsCoverage : DetailsCoverage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BaseballDetailsCoverage : DetailsCoverage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AmericanFootballDetailsCoverage : DetailsCoverage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IceHockeyDetailsCoverage : DetailsCoverage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BandyDetailsCoverage : DetailsCoverage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FloorballDetailsCoverage : DetailsCoverage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FieldHockeyDetailsCoverage : DetailsCoverage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TennisDetailsCoverage : DetailsCoverage {
  public var hasSuperTieBreak: Swift.Bool {
    get
  }
  public var tieBreakType: Swift.Int
  public var scoutCoverageStatus: Swift.Int
  public var scoutMatch: Swift.Int
  public var scoutConnected: Swift.Bool
  public var inLivescore: Swift.Bool
  public var needAdvantage: Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TableTennisDetailsCoverage : DetailsCoverage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CounterStrikeDetailsCoverage : DetailsCoverage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LeagueOfLegendsDetailsCoverage : DetailsCoverage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Dota2DetailsCoverage : DetailsCoverage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CyclingDetailsCoverage : DetailsCoverage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SpeedwayDetailsCoverage : DetailsCoverage {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CupRoster<C, T> : SportRadarModel, Swift.Equatable where C : Contest, T : Contester {
  public var id: Swift.Int {
    get
  }
  public var name: Swift.String {
    get
  }
  public var active: Swift.Bool {
    get
  }
  public var cupRoundSets: [CupRoundSet<C, T>] {
    get
  }
  public var cupRounds: [CupRound<C, T>] {
    get
  }
  public var teams: [T] {
    get
  }
  public static func == (lhs: CupRoster<C, T>, rhs: CupRoster<C, T>) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CupRoundSet<C, T> : SportRadarModel, Swift.Equatable where C : Contest, T : Contester {
  public var id: Swift.Int {
    get
  }
  public var order: Swift.Int {
    get
  }
  public var name: Swift.String {
    get
  }
  public var startDate: Foundation.Date? {
    get
  }
  public var endDate: Foundation.Date? {
    get
  }
  public var cupRounds: [CupRound<C, T>] {
    get
  }
  public static func == (lhs: CupRoundSet<C, T>, rhs: CupRoundSet<C, T>) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CupRound<C, T> : SportRadarModel, Swift.Equatable where C : Contest, T : Contester {
  public var id: Swift.Int {
    get
  }
  public var name: Swift.String {
    get
  }
  public var shortName: Swift.String {
    get
  }
  public var startDate: Foundation.Date? {
    get
  }
  public var endDate: Foundation.Date? {
    get
  }
  public var blocks: [CupBlock<C, T>] {
    get
  }
  public var parentCupRound: CupRound<C, T>? {
    get
  }
  public var childrenCupRound: CupRound<C, T>? {
    get
  }
  public static func == (lhs: CupRound<C, T>, rhs: CupRound<C, T>) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CupBlock<C, T> : SportRadarModel, Swift.Equatable where C : Contest, T : Contester {
  public var id: Swift.Int {
    get
  }
  public var cupId: Swift.Int {
    get
  }
  public var parents: [CupBlock<C, T>]? {
    get
  }
  public var children: [CupBlock<C, T>]? {
    get
  }
  public var contests: [C] {
    get
  }
  public var contesters: [T] {
    get
  }
  public var winner: T? {
    get
  }
  public static func == (lhs: CupBlock<C, T>, rhs: CupBlock<C, T>) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PlayerDetails : Details, AnyPlayerDetails {
  public var anyTeamPlayerDetails: AnyTeamPlayerDetails? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TeamPlayerDetails<T, S> : PlayerDetails, AnyTeamPlayerDetails where T : Team, S : PlayerStatistics {
  public var seasons: [Season]? {
    get
  }
  public var tournaments: [Tournament]? {
    get
  }
  public var roles: [TeamPlayerRole<T>]? {
    get
  }
  public var teams: [T]? {
    get
  }
  public var totalStats: [S]? {
    get
  }
  public var teamStats: [T : [Season : [S]]]? {
    get
  }
  public var genericRoles: [AnyTeamPlayerRole]? {
    get
  }
  public var genericTeams: [Team]? {
    get
  }
  public var genericTotalStats: [PlayerStatistics]? {
    get
  }
  public var genericTeamStats: [Team : [Season : [PlayerStatistics]]]? {
    get
  }
  @objc deinit
}
public protocol AnyPlayerDetails {
  var anyTeamPlayerDetails: AnyTeamPlayerDetails? { get }
}
public protocol AnyTeamPlayerDetails : AnyPlayerDetails {
  var seasons: [Season]? { get }
  var tournaments: [Tournament]? { get }
  var genericRoles: [AnyTeamPlayerRole]? { get }
  var genericTeams: [Team]? { get }
  var genericTotalStats: [PlayerStatistics]? { get }
  var genericTeamStats: [Team : [Season : [PlayerStatistics]]]? { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SoccerPlayerDetails : TeamPlayerDetails<SoccerTeam, SoccerPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AussieRulesPlayerDetails : TeamPlayerDetails<AussieRulesTeam, AussieRulesPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FutsalPlayerDetails : TeamPlayerDetails<FutsalTeam, FutsalPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class WaterPoloPlayerDetails : TeamPlayerDetails<WaterPoloTeam, WaterPoloPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BasketballPlayerDetails : TeamPlayerDetails<BasketballTeam, BasketballPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DartsPlayerDetails : TeamPlayerDetails<DartsTeam, DartsPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SnookerPlayerDetails : TeamPlayerDetails<SnookerTeam, SnookerPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class HandballPlayerDetails : TeamPlayerDetails<HandballTeam, HandballPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BadmintonPlayerDetails : TeamPlayerDetails<BadmintonTeam, BadmintonPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SquashPlayerDetails : TeamPlayerDetails<SquashTeam, SquashPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TennisPlayerDetails : PlayerDetails, TennisTeamPlayerDetailsProtocol {
  final public var manager: Manager? {
    get
  }
  final public var nextMatches: [TennisMatch]? {
    get
  }
  final public var lastMatches: [TennisMatch]? {
    get
  }
  final public var competitions: [TennisTournament]? {
    get
  }
  final public var stages: [TennisStage]? {
    get
  }
  final public var yearTurnedPro: Swift.Int? {
    get
  }
  final public var birthDate: Foundation.Date? {
    get
  }
  final public var nationality: Country? {
    get
  }
  final public var height: Swift.Int? {
    get
  }
  final public var weight: Swift.Int? {
    get
  }
  final public var favouriteSurface: TennisGround? {
    get
  }
  final public var highestSinglesRanking: TennisRanking? {
    get
  }
  final public var highestDoublesRanking: TennisRanking? {
    get
  }
  final public var preferredHand: PreferredHand? {
    get
  }
  final public var ageTurnedPro: Swift.Int? {
    get
  }
  final public var ageStarted: Swift.Int? {
    get
  }
  final public var singlesRanking: TennisTeamRank? {
    get
  }
  final public var doublesRanking: TennisTeamRank? {
    get
  }
  final public var groundStats: [TennisGround : [TennisPlayerStatistics]]? {
    get
  }
  final public var singlesSurfaceStats: [Swift.Int : [TennisGround : [TennisPlayerStatistics]]]? {
    get
  }
  final public var doublesSurfaceStats: [Swift.Int : [TennisGround : [TennisPlayerStatistics]]]? {
    get
  }
  final public var mixedSurfaceStats: [Swift.Int : [TennisGround : [TennisPlayerStatistics]]]? {
    get
  }
  final public var singlesRankingByYear: [Swift.Int : Swift.Int]? {
    get
  }
  final public var doublesRankingByYear: [Swift.Int : Swift.Int]? {
    get
  }
  final public var mixedRankingByYear: [Swift.Int : Swift.Int]? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TableTennisPlayerDetails : TeamPlayerDetails<TableTennisTeam, TableTennisPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class VolleyballPlayerDetails : TeamPlayerDetails<VolleyballTeam, VolleyballPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BeachVolleyPlayerDetails : TeamPlayerDetails<BeachVolleyTeam, BeachVolleyPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RugbyPlayerDetails : TeamPlayerDetails<RugbyTeam, RugbyPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BaseballPlayerDetails : TeamPlayerDetails<BaseballTeam, BaseballPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AmericanFootballPlayerDetails : TeamPlayerDetails<AmericanFootballTeam, AmericanFootballPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PesapalloPlayerDetails : TeamPlayerDetails<PesapalloTeam, PesapalloPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class IceHockeyPlayerDetails : TeamPlayerDetails<IceHockeyTeam, IceHockeyPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BandyPlayerDetails : TeamPlayerDetails<BandyTeam, BandyPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FloorballPlayerDetails : TeamPlayerDetails<FloorballTeam, FloorballPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FieldHockeyPlayerDetails : TeamPlayerDetails<FieldHockeyTeam, FieldHockeyPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CounterStrikePlayerDetails : TeamPlayerDetails<CounterStrikeTeam, CounterStrikePlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class LeagueOfLegendsPlayerDetails : TeamPlayerDetails<LeagueOfLegendsTeam, LeagueOfLegendsPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class Dota2PlayerDetails : TeamPlayerDetails<Dota2Team, DotaPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SpeedwayDriverDetails : TeamPlayerDetails<SpeedwayTeam, SpeedwayDriverStatistics> {
  @objc deinit
}
precedencegroup Decodative {
  associativity: left
}
infix operator <| : DefaultPrecedence
public func <| <A>(dictionary: MarshaledObject, key: Swift.String) throws -> A where A : ValueType
public func <| <A>(dictionary: MarshaledObject, key: Swift.String) throws -> A? where A : ValueType
public func <| <A>(dictionary: MarshaledObject, key: Swift.String) throws -> [A] where A : ValueType
public func <| <A>(dictionary: MarshaledObject, key: Swift.String) throws -> [A]? where A : ValueType
public func <| <A>(dictionary: MarshaledObject, key: Swift.String) throws -> A where A : Swift.RawRepresentable, A.RawValue : ValueType
public func <| <A>(dictionary: MarshaledObject, key: Swift.String) throws -> A? where A : Swift.RawRepresentable, A.RawValue : ValueType
public func <| <A>(dictionary: MarshaledObject, key: Swift.String) throws -> [A] where A : Swift.RawRepresentable, A.RawValue : ValueType
public func <| <A>(dictionary: MarshaledObject, key: Swift.String) throws -> [A]? where A : Swift.RawRepresentable, A.RawValue : ValueType
public func <| (dictionary: MarshaledObject, key: Swift.String) throws -> JSONObject
public func <| (dictionary: MarshaledObject, key: Swift.String) throws -> JSONObject?
public func <| (dictionary: MarshaledObject, key: Swift.String) throws -> [JSONObject]
public func <| (dictionary: MarshaledObject, key: Swift.String) throws -> [JSONObject]?
public func <| <A>(dictionary: MarshaledObject, key: Swift.String) throws -> [Swift.String : A] where A : ValueType
public func <| <A>(dictionary: MarshaledObject, key: Swift.String) throws -> [Swift.String : A]? where A : ValueType
public protocol StatisticsNameValueProtocol {
  var name: Swift.String { get }
  var value: Any { get }
  var valueUnit: ValueUnit { get }
}
public protocol CardsStatistics : StatisticsNameValueProtocol {
  var isYellowCard: Swift.Bool { get }
  var isYellowRedCard: Swift.Bool { get }
  var isRedCard: Swift.Bool { get }
}
public protocol CardsStatisticsIncludeBlueCard : CardsStatistics {
  var isBlueCards: Swift.Bool { get }
}
extension CardsStatistics where Self : MatchStatistics {
  public var isYellowCard: Swift.Bool {
    get
  }
  public var isYellowRedCard: Swift.Bool {
    get
  }
  public var isRedCard: Swift.Bool {
    get
  }
}
extension CardsStatisticsIncludeBlueCard where Self : MatchStatistics {
  public var isBlueCards: Swift.Bool {
    get
  }
}
extension CardsStatistics where Self : PlayerStatistics {
  public var isYellowCard: Swift.Bool {
    get
  }
  public var isYellowRedCard: Swift.Bool {
    get
  }
  public var isRedCard: Swift.Bool {
    get
  }
}
@_hasMissingDesignatedInitializers final public class SoccerTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> SoccerTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> SoccerTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> SoccerTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> SoccerTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> SoccerTournamentDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class IceHockeyPlayerStatistics : PlayerStatistics {
  final public var isGoals: Swift.Bool {
    get
  }
  final public var isAssists: Swift.Bool {
    get
  }
  final public var isGoalPoints: Swift.Bool {
    get
  }
  final public var isShotsOnGoal: Swift.Bool {
    get
  }
  final public var isTotalShots: Swift.Bool {
    get
  }
  final public var isGamesPlayed: Swift.Bool {
    get
  }
  final public var isTotalTimeOnIce: Swift.Bool {
    get
  }
  final public var isPlusMinus: Swift.Bool {
    get
  }
  final public var isPenaltyMinutes: Swift.Bool {
    get
  }
  final public var isFaceoffsWon: Swift.Bool {
    get
  }
  final public var isFaceoffsLost: Swift.Bool {
    get
  }
  final public var isHits: Swift.Bool {
    get
  }
  final public var isBlockedShots: Swift.Bool {
    get
  }
  final public var isNumberOfShifts: Swift.Bool {
    get
  }
  final public var isTimeOnIceShifts: Swift.Bool {
    get
  }
  final public var isGiveaways: Swift.Bool {
    get
  }
  final public var isTakeaways: Swift.Bool {
    get
  }
  final public var isPoints: Swift.Bool {
    get
  }
  final public var isPenalties: Swift.Bool {
    get
  }
  final public var isPowerplayGoals: Swift.Bool {
    get
  }
  final public var isShortHandedGoals: Swift.Bool {
    get
  }
  final public var isShootingPercentage: Swift.Bool {
    get
  }
  final public var isFaceoffWinningPercentage: Swift.Bool {
    get
  }
  final public var isTimeOnIceShiftsPerMatch: Swift.Bool {
    get
  }
  final public var isTimeOnIcePerMatch: Swift.Bool {
    get
  }
  final public var isShootoutShotsOnGoal: Swift.Bool {
    get
  }
  final public var isAverageTimeOnIce: Swift.Bool {
    get
  }
  final public var isPenaltyGoals: Swift.Bool {
    get
  }
  final public var isGoaltendingShootoutShotsAgainst: Swift.Bool {
    get
  }
  final public var isGoaltendingShootoutGoalsAgainst: Swift.Bool {
    get
  }
  final public var isGoaltendingShootoutSaves: Swift.Bool {
    get
  }
  final public var isMissedShots: Swift.Bool {
    get
  }
  final public var isOvertimeGoals: Swift.Bool {
    get
  }
  final public var isWinningGoals: Swift.Bool {
    get
  }
  final public var isPowerPlayShotsOnGoal: Swift.Bool {
    get
  }
  final public var isPowerPlayAssists: Swift.Bool {
    get
  }
  final public var isShortHandedShotsOnGoal: Swift.Bool {
    get
  }
  final public var isShortHandedAssists: Swift.Bool {
    get
  }
  final public var isShootoutGoals: Swift.Bool {
    get
  }
  final public var isGoaltendingTotalWins: Swift.Bool {
    get
  }
  final public var isGoaltendingTotalLosses: Swift.Bool {
    get
  }
  final public var isGoaltendingPowerPlayShotsAgainst: Swift.Bool {
    get
  }
  final public var isGoaltendingPowerPlayGoalsAgainst: Swift.Bool {
    get
  }
  final public var isGoaltendingPowerPlaySaves: Swift.Bool {
    get
  }
  final public var isGoaltendingShortHandedShotsAgainst: Swift.Bool {
    get
  }
  final public var isGoaltendingShortHandedSaves: Swift.Bool {
    get
  }
  final public var isShootoutAttempts: Swift.Bool {
    get
  }
  final public var isEmptyNetGoals: Swift.Bool {
    get
  }
  final public var isPrimaryAssists: Swift.Bool {
    get
  }
  final public var isSecondaryAssists: Swift.Bool {
    get
  }
  final public var isShortHandedTimeOnIce: Swift.Bool {
    get
  }
  final public var isGoaltenderDecision: Swift.Bool {
    get
  }
  @objc deinit
}
public enum LocksmithSecurityClass : Swift.RawRepresentable {
  case genericPassword, internetPassword, certificate, key, identity
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
@_hasMissingDesignatedInitializers final public class RallyRaceStageDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> RallyRaceStageDetailsParams
  @discardableResult
  final public func includeRaces() -> RallyRaceStageDetailsParams
  @discardableResult
  final public func includeDrivers() -> RallyRaceStageDetailsParams
  @discardableResult
  final public func includeDriverStats() -> RallyRaceStageDetailsParams
  @discardableResult
  final public func includeStageScores() -> RallyRaceStageDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FormulaOneSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> FormulaOneSeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> FormulaOneSeasonDetailsParams
  @discardableResult
  final public func includeTeamStats() -> FormulaOneSeasonDetailsParams
  @discardableResult
  final public func includeStages() -> FormulaOneSeasonDetailsParams
  @discardableResult
  final public func includeDrivers() -> FormulaOneSeasonDetailsParams
  @discardableResult
  final public func includeDriverStats() -> FormulaOneSeasonDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TableTennisTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> TableTennisTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> TableTennisTeamDetailsParams
  @discardableResult
  final public func includeStages() -> TableTennisTeamDetailsParams
  @discardableResult
  final public func includeManager() -> TableTennisTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> TableTennisTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> TableTennisTeamDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers public class AnyTeamStageDetailsParams : TeamStageDetailsParams {
  override public init()
  @discardableResult
  public func includeAll() -> AnyTeamStageDetailsParams
  @discardableResult
  public func includeRankingTables() -> AnyTeamStageDetailsParams
  @discardableResult
  public func includeCupRosters() -> AnyTeamStageDetailsParams
  @objc deinit
}
public struct SportMapItem {
}
public let sportMapper: [SportMapItem]
@_hasMissingDesignatedInitializers final public class AmericanFootballTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> AmericanFootballTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> AmericanFootballTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> AmericanFootballTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> AmericanFootballTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> AmericanFootballTournamentDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TennisDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> TennisDetailsParams
  @discardableResult
  final public func includeEvents() -> TennisDetailsParams
  @discardableResult
  final public func includePointsFlow() -> TennisDetailsParams
  @discardableResult
  final public func includeOdds() -> TennisDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> TennisDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> TennisDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> TennisDetailsParams
  @discardableResult
  final public func includeVenue() -> TennisDetailsParams
  @discardableResult
  final public func includeAttendance() -> TennisDetailsParams
  @discardableResult
  final public func includeStatistics() -> TennisDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> TennisDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> TennisDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> TennisDetailsParams
  @discardableResult
  final public func includeCommentary() -> TennisDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> TennisDetailsParams
  @objc deinit
}
public struct RankingTable : SportRadarModel {
  public let id: Swift.Int
  public let parentTableId: Swift.Int?
  public let name: Swift.String
  public let groupName: Swift.String?
  public let competition: Competition
  public let stage: TournamentStage?
  public let tableItems: [RankingTableItem]
}
public struct RankingTableItem {
  public let team: Team
  public let statistics: [RankingTableStatistics]?
  public let promotionRelegation: PromotionRelegation?
}
public struct PromotionRelegation {
  public let name: Swift.String
  public let shortName: Swift.String
  public let id: Swift.Int
  public let position: Swift.Int
  public let isPromotion: Swift.Bool
}
public struct ContestTime {
  public let minutes: Swift.Int?
  public let seconds: Swift.Int?
  public let injuryTime: Swift.Int
  public let timeType: ContestTimeType?
}
public enum ContestTimeType : Swift.CaseIterable {
  case regular
  case beforeKickoff
  case duringHalftime
  case afterMatchEnd
  case onBench
  public static func == (a: ContestTimeType, b: ContestTimeType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [ContestTimeType]
  public static var allCases: [ContestTimeType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Event : AnyEvent, SportRadarModel {
  public var type: EventType {
    get
  }
  public var id: Swift.Int {
    get
  }
  public var name: Swift.String {
    get
  }
  public var coordinate: Coordinate? {
    get
  }
  public var contester: Team? {
    get
  }
  public var createdTime: Foundation.Date {
    get
  }
  public var contestTime: ContestTime? {
    get
  }
  public var updatedTime: Foundation.Date? {
    get
  }
  public var canceled: Swift.Bool {
    get
  }
  @objc deinit
}
public protocol AnyEvent {
  var type: EventType { get }
  var id: Swift.Int { get }
  var name: Swift.String { get }
  var coordinate: Coordinate? { get }
  var contester: Team? { get }
  var createdTime: Foundation.Date { get }
  var contestTime: ContestTime? { get }
  var updatedTime: Foundation.Date? { get }
  var canceled: Swift.Bool { get }
}
extension Event : Swift.Equatable {
  public static func == (lhs: Event, rhs: Event) -> Swift.Bool
  public func isDuplicatedSecondPeriod(event: Event) -> Swift.Bool
}
extension Event : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MotorsportDriver : Contester, Person {
  public var fullname: Swift.String? {
    get
  }
  public var nationality: Country? {
    get
  }
  public var birthDate: Foundation.Date? {
    get
  }
  public var gender: Gender? {
    get
  }
  public var nickname: Swift.String? {
    get
  }
  public var name: Swift.String {
    get
  }
  public var abbr: Swift.String? {
    get
  }
  public var sport: AnySport {
    get
  }
  public var id: Swift.Int {
    get
  }
  @objc deinit
}
extension MotorsportDriver : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: MotorsportDriver, rhs: MotorsportDriver) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class SpeedwaySeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> SpeedwaySeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> SpeedwaySeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> SpeedwaySeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> SpeedwaySeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> SpeedwaySeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> SpeedwaySeasonDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BasketballStatistics : MatchStatistics {
  public var isOpponentsFreeThrowsPercentage: Swift.Bool {
    get
  }
  public var isOpponentsThreePointsPercentage: Swift.Bool {
    get
  }
  public var isOpponentsFieldGoalsPercentage: Swift.Bool {
    get
  }
  public var isOpponentsAssistsPerMatch: Swift.Bool {
    get
  }
  public var isOpponentsReboundsPerMatch: Swift.Bool {
    get
  }
  public var isGamesPlayed: Swift.Bool {
    get
  }
  public var isTimeSpentInLead: Swift.Bool {
    get
  }
  public var isLeadChanges: Swift.Bool {
    get
  }
  public var isBiggestLead: Swift.Bool {
    get
  }
  public var isTwoPointers: Swift.Bool {
    get
  }
  public var isThreePointers: Swift.Bool {
    get
  }
  public var isSuccessAttempts: Swift.Bool {
    get
  }
  public var isPoints: Swift.Bool {
    get
  }
  public var isRebounds: Swift.Bool {
    get
  }
  public var isEfficiency: Swift.Bool {
    get
  }
  public var isBallPossession: Swift.Bool {
    get
  }
  public var isTotalFouls: Swift.Bool {
    get
  }
  public var isMaxPointsInARow: Swift.Bool {
    get
  }
  public var isFreeThrowsScored: Swift.Bool {
    get
  }
  public var isTimeouts: Swift.Bool {
    get
  }
  public var isMinutesPlayed: Swift.Bool {
    get
  }
  public var isAssistToTurnoverRatio: Swift.Bool {
    get
  }
  public var isAssists: Swift.Bool {
    get
  }
  public var isBlockedAttempts: Swift.Bool {
    get
  }
  public var isBlocks: Swift.Bool {
    get
  }
  public var isDefensiveRebounds: Swift.Bool {
    get
  }
  public var isFastBreakpoints: Swift.Bool {
    get
  }
  public var isFieldGoalsAttempted: Swift.Bool {
    get
  }
  public var isFieldGoalsMade: Swift.Bool {
    get
  }
  public var isFieldGoalsPercentage: Swift.Bool {
    get
  }
  public var isFlagrantFouls: Swift.Bool {
    get
  }
  public var isFoulouts: Swift.Bool {
    get
  }
  public var isFreeThrowsAttempted: Swift.Bool {
    get
  }
  public var isFreeThrowsMade: Swift.Bool {
    get
  }
  public var isFreeThrowsPercentage: Swift.Bool {
    get
  }
  public var isOffensiveRebounds: Swift.Bool {
    get
  }
  public var isPointsInThePaint: Swift.Bool {
    get
  }
  public var isPersonalFouls: Swift.Bool {
    get
  }
  public var isPointsOffTurnovers: Swift.Bool {
    get
  }
  public var isSecondChancePoints: Swift.Bool {
    get
  }
  public var isSteals: Swift.Bool {
    get
  }
  public var isTeamRebounds: Swift.Bool {
    get
  }
  public var isTeamTechnicalFouls: Swift.Bool {
    get
  }
  public var isTeamTurnovers: Swift.Bool {
    get
  }
  public var isThreePointsAttempted: Swift.Bool {
    get
  }
  public var isThreePointsMade: Swift.Bool {
    get
  }
  public var isThreePointsPercentage: Swift.Bool {
    get
  }
  public var isTurnovers: Swift.Bool {
    get
  }
  public var isTwoPointsAttempted: Swift.Bool {
    get
  }
  public var isTwoPointsMade: Swift.Bool {
    get
  }
  public var isTwoPointsPercentage: Swift.Bool {
    get
  }
  public var isTotalRebounds: Swift.Bool {
    get
  }
  public var isDuration: Swift.Bool {
    get
  }
  public var isAttendance: Swift.Bool {
    get
  }
  public var isTimesTied: Swift.Bool {
    get
  }
  public var isPlayerTechnicalFouls: Swift.Bool {
    get
  }
  public var isEjections: Swift.Bool {
    get
  }
  public var isLossesTotal: Swift.Bool {
    get
  }
  public var isWinsTotal: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class IceHockeyDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> IceHockeyDetailsParams
  @discardableResult
  final public func includeBallCoordinate() -> IceHockeyDetailsParams
  @discardableResult
  final public func includeLineups() -> IceHockeyDetailsParams
  @discardableResult
  final public func includeTeam1LeagueTable() -> IceHockeyDetailsParams
  @discardableResult
  final public func includeTeam2LeagueTable() -> IceHockeyDetailsParams
  @discardableResult
  final public func includeLiveRankingTable() -> IceHockeyDetailsParams
  @discardableResult
  final public func includeStaff() -> IceHockeyDetailsParams
  @discardableResult
  final public func includeEvents() -> IceHockeyDetailsParams
  @discardableResult
  final public func includeOdds() -> IceHockeyDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> IceHockeyDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> IceHockeyDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> IceHockeyDetailsParams
  @discardableResult
  final public func includeVenue() -> IceHockeyDetailsParams
  @discardableResult
  final public func includeAttendance() -> IceHockeyDetailsParams
  @discardableResult
  final public func includeStatistics() -> IceHockeyDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> IceHockeyDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> IceHockeyDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> IceHockeyDetailsParams
  @discardableResult
  final public func includeCommentary() -> IceHockeyDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> IceHockeyDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PesapalloStatistics : MatchStatistics {
  public var isBallPossession: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FutsalPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> FutsalPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> FutsalPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> FutsalPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> FutsalPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> FutsalPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> FutsalPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> FutsalPlayerDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FormulaOneController : MotorsportController<FormulaOneSport, FormulaOneDriver, FormulaOneDriverStatistics, FormulaOneSeason, FormulaOneRaceStageDetails, FormulaOneRaceStage>, GenericMotorsportController {
  final public func loadGenericSeasons(completion: @escaping (Response<[Season]>) -> Swift.Void)
  final public func loadGenericActiveSeason(completion: @escaping (Response<Season>) -> Swift.Void)
  final public func loadGenericStagesForSeason(season: Season, completion: @escaping (Response<[Contest]>) -> Swift.Void)
  final public func loadGenericLastSeasonStages(completion: @escaping (Response<[Contest]?>) -> Swift.Void)
  final public func getGenericSeason(by id: Swift.Int, completion: @escaping (Response<Season>) -> Swift.Void)
  final public func getGenericStage(by id: Swift.Int, completion: @escaping (Response<Contest>) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BeachVolleyPlayerStatistics : PlayerStatistics {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LeagueOfLegendsStatistics : ESportsStatistics {
  public var isChampion: Swift.Bool {
    get
  }
  public var isGold: Swift.Bool {
    get
  }
  public var isTowers: Swift.Bool {
    get
  }
  public var isDragons: Swift.Bool {
    get
  }
  public var isBarons: Swift.Bool {
    get
  }
  public var isMinions: Swift.Bool {
    get
  }
  public var isInhibitors: Swift.Bool {
    get
  }
  @objc deinit
}
public typealias JSONObject = MarshalDictionary
public struct JSONParser {
  public static func JSONObjectWithData(_ data: Foundation.Data) throws -> JSONObject
  public static func JSONArrayWithData(_ data: Foundation.Data) throws -> [JSONObject]
}
public protocol JSONCollectionType {
  func jsonData() throws -> Foundation.Data
}
extension JSONCollectionType {
  public func jsonData() throws -> Foundation.Data
}
extension Swift.Dictionary : JSONCollectionType {
}
extension Swift.Array : JSONCollectionType {
}
extension Swift.Set : JSONCollectionType {
}
public protocol JSONMarshaling {
  func jsonObject() -> JSONObject
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PesapalloController : BaseController {
  final public func getTournaments(completion: @escaping (Response<[PesapalloTournament]>) -> Swift.Void)
  final public func getSeasonsForTournament(tournament: PesapalloTournament, completion: @escaping (Response<[PesapalloSeason]>) -> Swift.Void)
  final public func getSeasonMatches(season: PesapalloSeason, completion: @escaping (Response<[PesapalloMatch]>) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class NascarRaceStageDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> NascarRaceStageDetailsParams
  @discardableResult
  final public func includeRaces() -> NascarRaceStageDetailsParams
  @discardableResult
  final public func includeDrivers() -> NascarRaceStageDetailsParams
  @discardableResult
  final public func includeDriverStats() -> NascarRaceStageDetailsParams
  @discardableResult
  final public func includeStageScores() -> NascarRaceStageDetailsParams
  @objc deinit
}
public enum StatValueType : Swift.CaseIterable {
  case number
  case extended
  public static func == (a: StatValueType, b: StatValueType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [StatValueType]
  public static var allCases: [StatValueType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public enum MatchStatTypeId : Swift.CaseIterable {
  case unknown
  case yellowCards
  case yellowRedCards
  case redCards
  case substitutions
  case ballPossession
  case freeKicks
  case goalKicks
  case throwIns
  case offsides
  case cornerKicks
  case shotOnTarget
  case shotOffTarget
  case saves
  case fouls
  case aces
  case doubleFaults
  case maxPoints
  case wonPoints
  case firstServePointsWon
  case firstServeSuccessful
  case breakPointsWon
  case servingPoints
  case breakPoints
  case maxGames
  case serverGames
  case injuries
  case shotsBlocked
  case dangerousAttack
  case ballSafe
  case freeThrowsScored
  case rebounds
  case teamRebounds
  case totalRebounds
  case sevenMetersScored
  case twoMinutesPenalties
  case goalsInPowerplay
  case goalsShortHanded
  case attackSuccess
  case powerplays
  case serviceErrors
  case timeouts
  case penalties
  case attack
  case tiebreaksWon
  case secondServeSuccessful
  case secondServePointsWon
  case receiverPointsWon
  case comebackToWin
  case biggestLead
  case tries
  case conversions
  case dropGoals
  case lineouts
  case scrums
  case penaltyTries
  case penaltyGoals
  case penaltiesConceded
  case steals
  case technicalFaults
  case technicalFouls
  case gamesTwoPointers
  case gamesThreePointers
  case gamesSuccsessAttempts
  case gamesWon
  case matchPlayed
  case totalAssists
  case efficiency
  case minutesPlayed
  case blueCards
  case goalAttempts
  case shootingEfficiency
  case goals7m
  case fieldGoals
  case fastbreakGoals
  case wingGoals
  case rightWingGoals
  case leftWingGoals
  case pivotGoals
  case pivotMisses
  case pivotPosts
  case pivotBlocks
  case wingMisses
  case wingPosts
  case wingBlocks
  case goals9m
  case goals6m
  case shots
  case awarded7m
  case shots7m
  case shots6m
  case goalsShortHandedPercent
  case goalsPowerplayPercent
  case goals
  case shotsPivot
  case shots9m
  case shotsFastbreak
  case goalsBreakthrough
  case goalsBreakthroughGoalkeeper
  case savesBreakthrough
  case missesBreakthrough
  case postsBreakthrough
  case blocksBreakthrough
  case saves7m
  case goals6mLeft
  case goals6mCentre
  case goals6mRight
  case shots6mLeft
  case shots6mCentre
  case shots6mRight
  case goals9mLeft
  case goals9mCentre
  case goals9mRight
  case shots9mLeft
  case shots9mCentre
  case shots9mRight
  case shotsRightWing
  case shotsLeftWing
  case shotsBreakthrough
  case shotsBreakthroughGoalkeeper
  case lastGoal
  case wingSavesGoalkeeper
  case wingShotsGoalkeeper
  case backcourtShots
  case backcourtGoals
  case backcourtMisses
  case backcourtSaves
  case backcourtBlocks
  case backcourtPosts
  case gkshots7m
  case blocks6m
  case substitution_out
  case blocks9m
  case gkgoals9m
  case gksaves9m
  case gksavespivot
  case home_goals
  case misses9m
  case gkgoalspivot
  case gkgoalsfield
  case substitution_in
  case missesfastbreak
  case away_goals
  case misses6m
  case gksavesfastbreak
  case gksavesbreakthrough
  case all_post_shots
  case shotsblocked
  case gkgoalsfastbreak
  case gkshotsfastbreak
  case gkshots6m
  case gkgoalswing
  case gkgoals
  case yellowcards
  case gkgoals7m
  case gkshotspivot
  case posts9m
  case gksavesbackcourt
  case gksaves6m
  case misses7m
  case gksaves7m
  case gksavesfield
  case gkshotsbackcourt
  case gkshots9m
  case technicalfoulsperiod
  case gksaves
  case gkshotsfield
  case secondsplayed
  case gkgoals6m
  case disciplinary_points
  case technicalfouls
  case first_goal
  case gkshots
  case savedShotsPercent
  case timeSpentInLead
  case leadChanges
  case fieldShots
  case points
  case twoPointsMade
  case twoPointsAttempted
  case threePointsMade
  case threePointsAttempted
  case freeThrowMade
  case freeThrowAttempted
  case offensiveRebounds
  case defensiveRebounds
  case blocksAgainst
  case turnovers
  case personalFouls
  case assistToTurnoverRatio
  case blockedAttempts
  case fastBreakPoints
  case fieldGoalsAttempted
  case fieldGoalsMade
  case fieldGoalsPercentage
  case flagrantFouls
  case foulouts
  case freeThrowsAttempted
  case freeThrowsMade
  case freeThrowsPercentage
  case paintPoints
  case pointsOffTurnover
  case secondChancePoints
  case threePointsPercentage
  case twoPointsPercentage
  case minutes
  case duration
  case attendance
  case timesTied
  case isPlayerTechnicalFouls
  case isEjections
  case isLossesTotal
  case isWinsTotal
  case suspensionMinutes
  case shotsOnGoal
  case faceoffWinningPercentage
  case powerplayOpportunities
  case hits
  case giveaways
  case takeaways
  case goaltendingTotalGoalsAgainst
  case goaltendingTotalSaves
  case goaltendingTotalSavesPercentage
  case shootingPercentage
  case gamesPlayed
  case suspensions
  case plusMinus
  case goaltendingTimeOnIce
  case faceoffsWon
  case faceoffsLost
  case goaltendingTotalShotsAgainst
  case goaltendingTotalAverageGoalsAgainst
  case goaltendingTotalShutouts
  case penaltyMinutes
  case timeOnIce
  case shifts
  case opponentGoals
  case opponentPowerplayGoals
  case shotsOnGoalPerMatch
  case goaltendingTotalOvertimeLosses
  case opponentsPowerplayOpportunities
  case opponentsShotsOnGoalPerMatch
  case ejections
  case playerTechnicalFouls
  case goaltendingShootoutShotsAgainst
  case goaltendingShootoutGoalsAgainst
  case goaltendingShootoutSaves
  case goaltendingShootoutSavesPercentage
  case missedShots
  case overtimeGoals
  case winningGoals
  case powerPlayShotsOnGoal
  case powerPlayAssists
  case powerPlayFaceoffs
  case powerPlayFaceoffsWon
  case powerPlayFaceoffsLost
  case shortHandedShotsOnGoal
  case shortHandedAssists
  case shortHandedFaceoffs
  case shortHandedFaceoffsWon
  case shortHandedFaceoffsLost
  case evenStrengthShotsOnGoal
  case evenStrengthGoals
  case evenStrengthAssists
  case evenStrengthFaceoffs
  case evenStrengthFaceoffsWon
  case evenStrengthFaceoffsLost
  case shootoutGoals
  case goaltendingTotalWins
  case goaltendingTotalLosses
  case goaltendingPowerPlayShotsAgainst
  case goaltendingPowerPlayGoalsAgainst
  case goaltendingPowerPlaySaves
  case goaltendingShortHandedShotsAgainst
  case goaltendingShortHandedSaves
  case goaltendingEvenStrengthShotsAgainst
  case goaltendingEvenStrengthSaves
  case powerPlay5V4Shots
  case powerPlay5V4Goals
  case powerPlay5V4Time
  case powerPlay5V3Shots
  case powerPlay5V3Goals
  case powerPlay5V3Time
  case powerPlay4V3Shots
  case powerPlay4V3Goals
  case powerPlay4V3Time
  case shortHanded4V5Shots
  case shortHanded4V5Goals
  case shortHanded3V5Shots
  case shortHanded3V5Goals
  case shortHanded3V4Shots
  case shortHanded3V4Goals
  case evenStrength5V5Shots
  case evenStrength5V5Goals
  case evenStrength4V4Shots
  case evenStrength4V4Goals
  case evenStrength3V3Shots
  case evenStrength3V3Goals
  case opponentsPenalties
  case opponentsPenaltyMinutes
  case lossesTotal
  case winsTotal
  case overtimeLossesTotal
  case numberOfTwoMinutePenalties
  case numberOfFiveMinutePenalties
  case numberOfTenMinutePenalties
  case shootoutAttempts
  case emptyNetGoals
  case errors
  case atBatsPerStrikeout
  case runnersLeftOnBase
  case ballsInPlay
  case walksPerPlateAppearance
  case secondaryAverage
  case pitchesFaced
  case lineDrive
  case flyBall
  case popUp
  case groundBall
  case singles
  case hitByPitch
  case fieldersChoice
  case reachedOnError
  case cycles
  case strikesLooking
  case strikesSwinging
  case totalStrikes
  case balls
  case intentionalBallsTaken
  case dirtBallsFaced
  case foulBalls
  case popOuts
  case flyOutsIntoDoublePlays
  case lineOut
  case lineOutInDoublePlay
  case strikeoutsLooking
  case strikeoutsSwinging
  case sacrificeFlys
  case sacrificeHits
  case stolenBasePercentage
  case overallOpponentsRunnersLeftOnBase
  case overallWildPitches
  case overallInningsPitchedFormatted
  case overallSinglesAllowed
  case overallDoublesAllowed
  case overallTriplesAllowed
  case overallTotalBasesAllowed
  case overallFieldersChoiceAllowed
  case overallReachedOnErrorAllowed
  case overallUnearnedRunsAllowed
  case overallStrikesLooking
  case overallBalls
  case overallIntentionalBalls
  case overallDirtBalls
  case overallFoulBalls
  case overallPopOuts
  case overallFlyOutsIntoDoublePlays
  case overallLineOuts
  case overallLineOutsInDoublePlays
  case overallGroundOutsIntoDoublePlays
  case overallStrikeoutsLooking
  case overallStrikeoutsSwinging
  case overallSacrififceFlys
  case overallSacrificeHits
  case overallPickoff
  case overallRunnersCaughtStealing
  case overallStolenBasesAllowed
  case overallBalks
  case overallStrikesSwinging
  case baseballDayNight
  case baseballGameNumber
  case primaryAssists
  case secondaryAssists
  case shorthandedTimeOnIce
  case goaltenderDecision
  case probablePitcher
  case startingPitcher
  case totalWinners
  case forehandWinners
  case backhandWinners
  case netPointsWon
  case netpointswonwinnersperiod
  case forcedErrors
  case unforcedErrors
  case fastest1stServe
  case average1stServe
  case fastest2stServe
  case average2stServe
  case challengesRemaining
  case periodsDuration
  case firstDartAverage
  case secondDartAverage
  case thirdDartAverage
  case thrown180
  case thrown140
  case thrown100
  case highestCheckout
  case checkout100
  case checkoutPercentage
  case allDartsAverage
  case averages3Darts
  case matchPoints
  case warnings
  case numberOfLets
  case directFouls
  case directFreeKicks
  case directFreeKicksScored
  case directFreeKicksMissed
  case penaltiesScored
  case penaltiesMissed
  case passingYards
  case rushingYards
  case rushingAverage
  case extraPointsAttempted
  case extraPointsMade
  case firstDowns
  case goalEfficiencyAttempted
  case possesionTime
  case redzoneEfficiencyAttempted
  case remainingTimeouts
  case thirdDownEfficiencyAttempted
  case totalYards
  case touchdowns
  case rushingAttempts
  case rushingTouchdowns
  case receptions
  case receivingTouchdowns
  case receivingYards
  case passingAttempts
  case passingCompletions
  case passingTouchdowns
  case totalChances
  case putouts
  case totalErrors
  case doublePlays
  case passedBalls
  case wildPitchesWhileCatching
  case triplePlays
  case throwingErrors
  case fieldingErrors
  case interferenceErrors
  case atBats
  case runsScored
  case doubles
  case triples
  case homeRuns
  case runsBattedIn
  case walks
  case strikeouts
  case stolenBases
  case caughtStealing
  case atBatsWithRunnersInScoringPosition
  case hitsWithRunnersInScoringPosition
  case groundedIntoDoublePlay
  case pickoffs
  case runnersOnBaseWithTwoOuts
  case battedInWithTwoOuts
  case teamRunnersLeftOnBase
  case bases
  case wins
  case losses
  case holds
  case inningsPitched
  case hitsAllowed
  case runsAllowed
  case earnedRunsAllowed
  case homeRunsAllowed
  case battersFaced
  case blownSaves
  case flyOuts
  case groundOuts
  case battersHit
  case intentionalWalks
  case pitchCount
  case strikes
  case gamesStarted
  case percentage
  case rangeFactor
  case plateAppearances
  case battingAverage
  case onBasePercentage
  case sluggingPercentage
  case onBasePlusSluggingPercentage
  case isolatedPower
  case walksPerStrikeout
  case groundedToFlyBallRatio
  case extraBaseHits
  case earnedRunAverage
  case saveOpportunities
  case walksPlusHits
  case qualityStarts
  case completeGames
  case shutouts
  case gamesFinished
  case overallGamesTeamLoss
  case overallGamesTeamWin
  case overallGamesFinished
  case isAttendance
  case isDuration
  case isDayOrNight
  case isGameNumber
  case kills
  case killAssists
  case deaths
  case level
  case xp
  case headshots
  case killDeathRatio
  case towers
  case netWorthGold
  case heroChampion
  case barracks
  case aegis
  case lastHits
  case denies
  case items
  case dragons
  case barons
  case minions
  case inhibitors
  public static func == (a: MatchStatTypeId, b: MatchStatTypeId) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [MatchStatTypeId]
  public static var allCases: [MatchStatTypeId] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension BaseTennisMatch {
  public func isBreakTimeInProgress() -> Swift.Bool?
  public func addPoint(winingTeamPoints: Swift.Int?, loosingTeamPoints: Swift.Int?, tieBreakInProgress: Swift.Bool?) -> Swift.Int
}
@_hasMissingDesignatedInitializers public class AnyContestDetailsParams : Params {
  public init()
  @discardableResult
  public func includeAll() -> AnyContestDetailsParams
  @discardableResult
  public func includeLineups() -> AnyContestDetailsParams
  @discardableResult
  public func includeTeam1LeagueTable() -> AnyContestDetailsParams
  @discardableResult
  public func includeTeam2LeagueTable() -> AnyContestDetailsParams
  @discardableResult
  public func includeLiveRankingTable() -> AnyContestDetailsParams
  @discardableResult
  public func includeStaff() -> AnyContestDetailsParams
  @discardableResult
  public func includeEvents() -> AnyContestDetailsParams
  @discardableResult
  public func includePointsFlow() -> AnyContestDetailsParams
  @discardableResult
  public func includeOdds() -> AnyContestDetailsParams
  @discardableResult
  public func includeOddsComparison() -> AnyContestDetailsParams
  @discardableResult
  public func includeVenue() -> AnyContestDetailsParams
  @discardableResult
  public func includeAttendance() -> AnyContestDetailsParams
  @discardableResult
  public func includeStatistics() -> AnyContestDetailsParams
  @discardableResult
  public func includePeriodStatistics() -> AnyContestDetailsParams
  @discardableResult
  public func includeCommentary() -> AnyContestDetailsParams
  @discardableResult
  public func includeDrivers() -> AnyContestDetailsParams
  @discardableResult
  public func includeDriverStats() -> AnyContestDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BadmintonStatistics : MatchStatistics {
  public var isMaxPointsInRow: Swift.Bool {
    get
  }
  public var isPointsWon: Swift.Bool {
    get
  }
  public var isServicePointsWon: Swift.Bool {
    get
  }
  public var isServiceErrors: Swift.Bool {
    get
  }
  public var isReceiverPointsWon: Swift.Bool {
    get
  }
  public var isMatchPoints: Swift.Bool {
    get
  }
  public var isComebackToWin: Swift.Bool {
    get
  }
  public var isBiggestLead: Swift.Bool {
    get
  }
  public var isWarnings: Swift.Bool {
    get
  }
  public var isPenalties: Swift.Bool {
    get
  }
  public var isNumberOfLets: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FutsalSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> FutsalSeasonDetailsParams
  @discardableResult
  final public func includeCards() -> FutsalSeasonDetailsParams
  @discardableResult
  final public func includeGoals() -> FutsalSeasonDetailsParams
  @discardableResult
  final public func includeOwnGoals() -> FutsalSeasonDetailsParams
  @discardableResult
  final public func includeAssists() -> FutsalSeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> FutsalSeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> FutsalSeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> FutsalSeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> FutsalSeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> FutsalSeasonDetailsParams
  @objc deinit
}
public enum VoteTag : Swift.String {
  case contest
  case tournament
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum VoteType : Swift.String {
  case winner
  case nextScore
  case nextScorer
  case bestContester
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class VotingController {
  public func getVotes(tag: VoteTag, tagId: Swift.Int, type: VoteType, searchQuery: VoteSearchParameters? = nil, completion: @escaping (Response<[VoteInfo]>) -> Swift.Void)
  public func getGlobalVotes(tag: VoteTag, tagId: Swift.Int, type: VoteType, searchQuery: VoteSearchParameters? = nil, completion: @escaping (Response<[VoteInfo]>) -> Swift.Void)
  public func getVoteCount(tag: VoteTag, tagId: Swift.Int, type: VoteType, searchQuery: VoteSearchParameters? = nil, completion: @escaping (Response<[VoteCountInfo]>) -> Swift.Void)
  public func getGlobalVoteCount(tag: VoteTag, tagId: Swift.Int, type: VoteType, searchQuery: VoteSearchParameters? = nil, completion: @escaping (Response<[VoteCountInfo]>) -> Swift.Void)
  public func addVote(vote: Vote, tag: VoteTag, tagId: Swift.Int, type: VoteType, completion: @escaping (Response<VoteCountInfo>) -> Swift.Void)
  public func deleteVote(tag: VoteTag, tagId: Swift.Int, type: VoteType, completion: @escaping (Response<Swift.Bool>) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DotaStatistics : ESportsStatistics {
  public var isHero: Swift.Bool {
    get
  }
  public var isNetWorth: Swift.Bool {
    get
  }
  public var isTowers: Swift.Bool {
    get
  }
  public var isBarracks: Swift.Bool {
    get
  }
  public var isAegis: Swift.Bool {
    get
  }
  public var isLastHits: Swift.Bool {
    get
  }
  public var isDenies: Swift.Bool {
    get
  }
  public var isItems: Swift.Bool {
    get
  }
  @objc deinit
}
public protocol ValueType {
  associatedtype Value = Self
  static func value(from object: Any) throws -> Self.Value
}
extension ValueType {
  public static func value(from object: Any) throws -> Self.Value
}
extension Swift.String : ValueType {
  public typealias Value = Swift.String
}
extension Swift.Int : ValueType {
  public typealias Value = Swift.Int
}
extension Swift.UInt : ValueType {
  public typealias Value = Swift.UInt
}
extension Swift.Bool : ValueType {
  public typealias Value = Swift.Bool
}
extension Swift.Float : ValueType {
  public static func value(from object: Any) throws -> Swift.Float
  public typealias Value = Swift.Float
}
extension Swift.Double : ValueType {
  public static func value(from object: Any) throws -> Swift.Double
  public typealias Value = Swift.Double
}
extension Swift.Int64 : ValueType {
  public static func value(from object: Any) throws -> Swift.Int64
  public typealias Value = Swift.Int64
}
extension Swift.Array where Element : ValueType {
  public static func value(from object: Any, discardingErrors: Swift.Bool = false) throws -> [Element]
  public static func value(from object: Any) throws -> [Element?]
}
extension Swift.Dictionary where Value : ValueType {
  public static func value(from object: Any) throws -> Swift.Dictionary<Key, Value>
}
extension Swift.Set where Element : ValueType {
  public static func value(from object: Any) throws -> Swift.Set<Element>
}
extension Foundation.URL : ValueType {
  public static func value(from object: Any) throws -> Foundation.URL
  public typealias Value = Foundation.URL
}
extension Swift.Int8 : ValueType {
  public static func value(from object: Any) throws -> Swift.Int8
  public typealias Value = Swift.Int8
}
extension Swift.Int16 : ValueType {
  public static func value(from object: Any) throws -> Swift.Int16
  public typealias Value = Swift.Int16
}
extension Swift.Int32 : ValueType {
  public static func value(from object: Any) throws -> Swift.Int32
  public typealias Value = Swift.Int32
}
extension Swift.UInt8 : ValueType {
  public static func value(from object: Any) throws -> Swift.UInt8
  public typealias Value = Swift.UInt8
}
extension Swift.UInt16 : ValueType {
  public static func value(from object: Any) throws -> Swift.UInt16
  public typealias Value = Swift.UInt16
}
extension Swift.UInt32 : ValueType {
  public static func value(from object: Any) throws -> Swift.UInt32
  public typealias Value = Swift.UInt32
}
extension Swift.UInt64 : ValueType {
  public static func value(from object: Any) throws -> Swift.UInt64
  public typealias Value = Swift.UInt64
}
extension Swift.Character : ValueType {
  public static func value(from object: Any) throws -> Swift.Character
  public typealias Value = Swift.Character
}
@_hasMissingDesignatedInitializers final public class CyclingSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> CyclingSeasonDetailsParams
  @discardableResult
  final public func includeCompetitors() -> CyclingSeasonDetailsParams
  @discardableResult
  final public func includeCompetitorStatistics() -> CyclingSeasonDetailsParams
  @discardableResult
  final public func includeStages() -> CyclingSeasonDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Circuit : Venue {
  public var debutYear: Swift.Int? {
    get
  }
  public var length: Swift.Int? {
    get
  }
  public var laps: Swift.Int? {
    get
  }
  public var url: Swift.String? {
    get
  }
  public var leftCurves: Swift.Int? {
    get
  }
  public var rightCurves: Swift.Int? {
    get
  }
  public var latitude: Swift.Float? {
    get
  }
  public var longitude: Swift.Float? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TennisTeam : BaseTennisTeam {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class IceHockeyPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> IceHockeyPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> IceHockeyPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> IceHockeyPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> IceHockeyPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> IceHockeyPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> IceHockeyPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> IceHockeyPlayerDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Statistics : StatisticsNameValueProtocol {
  public var name: Swift.String {
    get
  }
  public var value: Any {
    get
  }
  public var valueUnit: ValueUnit {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class HandballTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> HandballTeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> HandballTeamDetailsParams
  @discardableResult
  final public func includeSquad() -> HandballTeamDetailsParams
  @discardableResult
  final public func includeRoles() -> HandballTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> HandballTeamDetailsParams
  @discardableResult
  final public func includeStages() -> HandballTeamDetailsParams
  @discardableResult
  final public func includeManager() -> HandballTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> HandballTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> HandballTeamDetailsParams
  @objc deinit
}
public struct MDPNotificationSubscription : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public protocol TeamPlayerEvent {
  var player: TeamPlayer? { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class MatchAboutToStartEvent : Event {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class MatchStartedEvent : Event {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class MatchEndedEvent : Event {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PeriodStartedEvent : Event {
  final public let period: Swift.Int
  final public let isBreak: Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ScoreChangeEvent<P, T, SRT> : Event, AnyScoreChangeEvent where P : Contester, P : Person, T : Team, SRT : Swift.Comparable {
  final public let result: ContestScore<T, SRT>
  final public let scorer: P?
  final public let asists: [P]?
  final public let points: Swift.Int
  final public let isPenalty: Swift.Bool?
  public var anyResult: AnyContestScore? {
    get
  }
  public var genericScorer: Player? {
    get
  }
  public var genericAsists: [Player]? {
    get
  }
  @objc deinit
}
public protocol AnyScoreChangeEvent : AnyEvent {
  var anyResult: AnyContestScore? { get }
  var genericScorer: Player? { get }
  var genericAsists: [Player]? { get }
  var points: Swift.Int { get }
  var isPenalty: Swift.Bool? { get }
}
@_hasMissingDesignatedInitializers final public class SoccerGoalEvent<P, T, SRT> : ScoreChangeEvent<P, T, SRT>, AnySoccerGoalEvent where P : Contester, P : Person, T : Team, SRT : Swift.Comparable {
  final public let types: [GoalType]?
  @objc deinit
}
public protocol AnySoccerGoalEvent : AnyScoreChangeEvent {
  var types: [GoalType]? { get }
}
public enum GoalType {
  case post
  case ownGoal
  case penalty
  case header
  case bar
  public static func == (a: GoalType, b: GoalType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class PeriodScoreEvent<T, PS, SRT, CSCORE> : Event, AnyPeriodScoreEvent where T : Team, PS : PeriodStatus, SRT : Swift.Comparable, CSCORE : ContestScore<T, SRT> {
  final public let periodScore: ContestScore<T, SRT>?
  final public let result: Score<T, PS, SRT, CSCORE>?
  final public let period: Swift.Int?
  final public var genericTeamIntResult: AnyTeamIntScore? {
    get
  }
  final public var genericTeamIntPeriodScores: AnyContestScore? {
    get
  }
  @objc deinit
}
public protocol AnyPeriodScoreEvent : AnyEvent {
  var genericTeamIntResult: AnyTeamIntScore? { get }
  var genericTeamIntPeriodScores: AnyContestScore? { get }
}
@_hasMissingDesignatedInitializers final public class GoalCancelledEvent : Event {
  final public let reason: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CoordinatesEvent : Event {
  final public let coordinates: [ContesterCoordinate<Team>]
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BallPossessionEvent : Event {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TimeoutEvent : Event {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TimeoutOverEvent : Event {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class GoalkeeperSaveEvent : Event, TeamPlayerEvent {
  final public let goalkeeper: TeamPlayer?
  final public let player: TeamPlayer?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PlayerStealEvent : Event, TeamPlayerEvent {
  final public let player: TeamPlayer?
  final public let stealer: TeamPlayer?
  final public let lost: TeamPlayer?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ShotBlockedEvent : Event, TeamPlayerEvent {
  final public let player: TeamPlayer?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PlayerEvent : Event, TeamPlayerEvent {
  final public let player: TeamPlayer?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TeamSuspensionEvent : Event, TeamPlayerEvent {
  final public let player: TeamPlayer?
  final public var suspendedTeam: Team? {
    get
    set
  }
  final public let duration: Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TeamSuspensionOverEvent : Event {
  final public var suspendedTeam: Team? {
    get
    set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PenaltyShotEvent<TPL, T, SRT> : ScoreChangeEvent<TPL, T, SRT>, TeamPlayerEvent, AnyPenaltyShotEvent where TPL : TeamPlayer, T : Team, SRT : Swift.Comparable {
  final public let player: TeamPlayer?
  final public let successful: Swift.Bool
  final public let number: Swift.Int?
  @objc deinit
}
public protocol AnyPenaltyShotEvent : AnyScoreChangeEvent {
  var player: TeamPlayer? { get }
  var successful: Swift.Bool { get }
  var number: Swift.Int? { get }
}
@_hasMissingDesignatedInitializers final public class PenaltyRewardedEvent : Event, TeamPlayerEvent {
  final public let player: TeamPlayer?
  final public let attacker: TeamPlayer?
  final public let defender: TeamPlayer?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CardEvent : Event, TeamPlayerEvent {
  final public let player: TeamPlayer?
  final public let card: Card
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class InjuryEvent : Event, TeamPlayerEvent {
  final public let player: TeamPlayer?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TimeRunningEvent : Event {
  final public let isRunning: Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ActiveGoalkeepersEvent : Event {
  final public let team1Goalkeeper: TeamPlayer?
  final public let team2Goalkeeper: TeamPlayer?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PlayersOnPitchEvent : Event {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PlayersWarmingUpEvent : Event {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PenaltyMissedEvent : Event, TeamPlayerEvent {
  final public let player: TeamPlayer?
  final public let shooter: TeamPlayer?
  final public let goalkeeper: TeamPlayer?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TennisScoreEvent : Event {
  final public let score: TennisScore
  final public let pointType: TennisPointType?
  final public let servingTeam: TennisTeam?
  final public let wonOpportunities: [TennisGameOpportunity]
  final public let wonOpportunityDescription: Swift.String
  final public let wonOpportunitiesSucceeded: [TennisGameOpportunity]
  final public let wonOpportunitySucceededDescription: Swift.String
  final public let eventStartedBreakTime: Swift.Bool
  final public let scoringTeam: TennisTeam?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FreeThrowsAwardedEvent : Event {
  final public let numAwarded: Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ScoreAttemptMissedEvent : Event, TeamPlayerEvent {
  final public let player: TeamPlayer?
  final public let points: Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FoulEvent : Event, TeamPlayerEvent {
  final public let player: TeamPlayer?
  final public let fouling: TeamPlayer?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TurnoverEvent : Event {
  final public let reason: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BlockEvent : Event, TeamPlayerEvent {
  final public let player: TeamPlayer?
  final public let blocking: BasketballPlayer?
  final public let blocked: BasketballPlayer?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ReboundEvent : Event, TeamPlayerEvent {
  final public let player: TeamPlayer?
  final public let direction: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TechnicalFaultEvent : Event, TeamPlayerEvent {
  final public let player: TeamPlayer?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TimeStartStop : Event {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FreeThrowAwardedEvent : Event {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ShotOffGoalEvent : Event, TeamPlayerEvent {
  final public let player: TeamPlayer?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ThrowBlockedEvent : Event, TeamPlayerEvent {
  final public let player: TeamPlayer?
  final public let blocker: HandballPlayer?
  final public let blocked: HandballPlayer?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SeventhPlayerSubstitutionEvent : Event {
  final public let playerIn: HandballPlayer?
  final public let playerOut: HandballPlayer?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class StartedTeamEvent : Event {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class StealEvent : Event {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class GoalUnderReviewEvent : Event {
  final public let reason: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SituationEvent : Event {
  final public let situation: Situation<Team>?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CornerEvent : Event {
  final public let side: CornerSide
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SubstitutionEvent : Event {
  final public let playerIn: TeamPlayer?
  final public let playerOut: TeamPlayer?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class InjuryTimeEvent : Event {
  final public let injuryTimePlayed: Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class MatchSituationSafeEvent : Event {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class InterruptedEvent : Event {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CancelledEvent : Event {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class ThrowInEvent : Event {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BackFromInjuryEvent : Event {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class GameResumedEvent : Event {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FreeKickEvent : Event {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class ShotOnTargetEvent : Event {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class GoalKickEvent : Event {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class OffsideEvent : Event {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PenaltyEvent : Event {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BallInPlayEvent : Event {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TennisFirstServeFaultEvent : Event {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TennisServiceTakenEvent : Event {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TimeInfoEvent : Event {
  final public let timeInfo: [Swift.String : Swift.String]
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AttendanceEvent : Event {
  final public let attendance: Swift.Int?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FirstServerEvent : Event {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class VideoAssistantRefereeRequestEvent : Event {
  final public let reason: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class VideoAssistantRefereeResponseEvent : Event {
  final public let outcome: Swift.String
  @objc deinit
}
public enum Situation<T> where T : Team {
  case dangerousAttack(name: Swift.String, team: T?)
  case safe(name: Swift.String, team: T?)
  case attacking(name: Swift.String, team: T?)
}
@_hasMissingDesignatedInitializers final public class MotorsportRaceEvent : Event {
  final public let race: MotorsportRaceProtocol
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TennisLastPointEvent : Event {
  final public let lastPointType: LastPointType?
  final public let lastPointTypeName: Swift.String?
  final public let additionalInfo: Swift.String?
  final public let currentStatus: TennisGameOpportunity?
  final public let currentStatusName: Swift.String?
  final public let serveSpeed: Swift.Int?
  @objc deinit
}
public enum LastPointType {
  case Ace
  case Let
  case Fault
  case DoubleFault
  case FootFault
  case ForehandWinner
  case BackhandWinner
  case NetWinner
  case ReturnOfServiceWinner
  case ForehandUnforcedWinner
  case BackhandUnforcedWinner
  case NetUnforcedWinner
  case ReturnOfServiceUnforcedError
  case ForehandForcedWinner
  case BackhandForcedWinner
  case NetForcedWinner
  case ReturnOfServiceForcedError
  public static func == (a: LastPointType, b: LastPointType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class WaterPoloTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> WaterPoloTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> WaterPoloTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> WaterPoloTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> WaterPoloTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> WaterPoloTournamentDetailsParams
  @objc deinit
}
public struct TeamSquadResult {
  public var squad: [TeamPlayer]?
  public var roles: [TeamPlayer : [TeamPlayerRole<Team>]]?
}
@_hasMissingDesignatedInitializers final public class CounterStrikeTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> CounterStrikeTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> CounterStrikeTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> CounterStrikeTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> CounterStrikeTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> CounterStrikeTournamentDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PlayerPosition {
  public var positionId: Swift.Int {
    get
  }
  public var positionName: Swift.String {
    get
  }
  public var shortName: Swift.String {
    get
  }
  public var positionType: PlayerPosition.PlayerPositionType? {
    get
  }
  public enum PlayerPositionType {
    case goalkeeper
    case defender
    case midfielder
    case striker
    case center
    case leftWinger
    case rightWinger
    case `guard`
    case forward
    case centerForward
    case guardForward
    case centerBack
    case rightWing
    case leftWing
    case rightBack
    case leftBack
    case pivot
    case quarterback
    case runningback
    case fullback
    case wideReciever
    case tightEnd
    case offensiveGuard
    case offensiveTackle
    case outsideLinebacker
    case freeSafety
    case cornerback
    case defensiveTackle
    case linebacker
    case noseTackle
    case strongSafety
    case defensiveEnd
    case kicker
    case longSnapper
    case punter
    case pitcher
    case infielder
    case outfielder
    case catcher
    case startingPitcher
    case reliefPitcher
    case firstBase
    case secondBase
    case thirdBase
    case shortstop
    case leftField
    case rightField
    case centerField
    case wing
    case halfback
    case flyHalf
    case scrumHalf
    case frontRow
    case hooker
    case prop
    case secondRow
    case lock
    case backRow
    public static func == (a: PlayerPosition.PlayerPositionType, b: PlayerPosition.PlayerPositionType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SoccerPlayerPosition : PlayerPosition {
  public var isGoalkeeper: Swift.Bool {
    get
  }
  public var isDefender: Swift.Bool {
    get
  }
  public var isMidfielder: Swift.Bool {
    get
  }
  public var isStriker: Swift.Bool {
    get
  }
  public var isCenter: Swift.Bool {
    get
  }
  public var isLeftWinger: Swift.Bool {
    get
  }
  public var isRightWinger: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AussieRulesPlayerPosition : PlayerPosition {
  public var isForward: Swift.Bool {
    get
  }
  public var isDefender: Swift.Bool {
    get
  }
  public var isMidfielder: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FutsalPlayerPosition : SoccerPlayerPosition {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class WaterPoloPlayerPosition : SoccerPlayerPosition {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BasketballPlayerPosition : PlayerPosition {
  final public var isGuard: Swift.Bool {
    get
  }
  final public var isForward: Swift.Bool {
    get
  }
  final public var isCenter: Swift.Bool {
    get
  }
  final public var isCenterForward: Swift.Bool {
    get
  }
  final public var isGuardForward: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Use property isGuardForward; Will be removed in SDK version 4.0.")
  final public var isForwardGuard: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PesapalloPlayerPosition : PlayerPosition {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class HandballPlayerPosition : PlayerPosition {
  final public var isCenterBack: Swift.Bool {
    get
  }
  final public var isRightWing: Swift.Bool {
    get
  }
  final public var isLeftWing: Swift.Bool {
    get
  }
  final public var isRightBack: Swift.Bool {
    get
  }
  final public var isLeftBack: Swift.Bool {
    get
  }
  final public var isPivot: Swift.Bool {
    get
  }
  final public var isGoalkeeper: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class IceHockeyPlayerPosition : PlayerPosition {
  final public var isGoalkeeper: Swift.Bool {
    get
  }
  final public var isDefender: Swift.Bool {
    get
  }
  final public var isForward: Swift.Bool {
    get
  }
  final public var isRightWing: Swift.Bool {
    get
  }
  final public var isLeftWing: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BandyPlayerPosition : PlayerPosition {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FloorballPlayerPosition : PlayerPosition {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FieldHockeyPlayerPosition : PlayerPosition {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class VolleyballPlayerPosition : PlayerPosition {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RugbyPlayerPosition : PlayerPosition {
  final public var isFullback: Swift.Bool {
    get
  }
  final public var isCenter: Swift.Bool {
    get
  }
  final public var isWing: Swift.Bool {
    get
  }
  final public var isHalfback: Swift.Bool {
    get
  }
  final public var isFlyHalf: Swift.Bool {
    get
  }
  final public var isScrumHalf: Swift.Bool {
    get
  }
  final public var isFrontRow: Swift.Bool {
    get
  }
  final public var isHooker: Swift.Bool {
    get
  }
  final public var isProp: Swift.Bool {
    get
  }
  final public var isSecondRow: Swift.Bool {
    get
  }
  final public var isLock: Swift.Bool {
    get
  }
  final public var isBackRow: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BaseballPlayerPosition : PlayerPosition {
  final public var primaryPositionName: Swift.String? {
    get
  }
  final public var primaryShortName: Swift.String? {
    get
  }
  final public var isPitcher: Swift.Bool {
    get
  }
  final public var isInfielder: Swift.Bool {
    get
  }
  final public var isOutfielder: Swift.Bool {
    get
  }
  final public var isCatcher: Swift.Bool {
    get
  }
  final public var isStartingPitcher: Swift.Bool {
    get
  }
  final public var isReliefPitcher: Swift.Bool {
    get
  }
  final public var isFirstBase: Swift.Bool {
    get
  }
  final public var isSecondBase: Swift.Bool {
    get
  }
  final public var isThirdBase: Swift.Bool {
    get
  }
  final public var isShortstop: Swift.Bool {
    get
  }
  final public var isLeftField: Swift.Bool {
    get
  }
  final public var isRightField: Swift.Bool {
    get
  }
  final public var isCenterField: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AmericanFootballPlayerPosition : PlayerPosition {
  final public var isQuarterback: Swift.Bool {
    get
  }
  final public var isRunningback: Swift.Bool {
    get
  }
  final public var isFullback: Swift.Bool {
    get
  }
  final public var isWideReciever: Swift.Bool {
    get
  }
  final public var isTightEnd: Swift.Bool {
    get
  }
  final public var isCenter: Swift.Bool {
    get
  }
  final public var isOffensiveGuard: Swift.Bool {
    get
  }
  final public var isOffensiveTackle: Swift.Bool {
    get
  }
  final public var isOffense: Swift.Bool {
    get
  }
  final public var isOutsideLinebacker: Swift.Bool {
    get
  }
  final public var isFreeSafety: Swift.Bool {
    get
  }
  final public var isCornerback: Swift.Bool {
    get
  }
  final public var isDefensiveTackle: Swift.Bool {
    get
  }
  final public var isLinebacker: Swift.Bool {
    get
  }
  final public var isNoseTackle: Swift.Bool {
    get
  }
  final public var isStrongSafety: Swift.Bool {
    get
  }
  final public var isDefensiveEnd: Swift.Bool {
    get
  }
  final public var isDefence: Swift.Bool {
    get
  }
  final public var isKicker: Swift.Bool {
    get
  }
  final public var isLongSnapper: Swift.Bool {
    get
  }
  final public var isPunter: Swift.Bool {
    get
  }
  final public var isSpecial: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AmericanFootballTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> AmericanFootballTeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> AmericanFootballTeamDetailsParams
  @discardableResult
  final public func includeSquad() -> AmericanFootballTeamDetailsParams
  @discardableResult
  final public func includeRoles() -> AmericanFootballTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> AmericanFootballTeamDetailsParams
  @discardableResult
  final public func includeStages() -> AmericanFootballTeamDetailsParams
  @discardableResult
  final public func includeManager() -> AmericanFootballTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> AmericanFootballTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> AmericanFootballTeamDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FieldHockeyPlayerStatistics : PlayerStatistics {
  final public var isGoals: Swift.Bool {
    get
  }
  final public var isAssists: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Manager : Person {
  final public var fullname: Swift.String? {
    get
  }
  final public var nationality: Country? {
    get
  }
  final public var birthDate: Foundation.Date? {
    get
  }
  final public var gender: Gender? {
    get
  }
  final public var nickname: Swift.String? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Referee : Person {
  final public var fullname: Swift.String?
  final public var nationality: Country?
  final public var birthDate: Foundation.Date?
  final public var gender: Gender?
  final public var nickname: Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Official : Person, Swift.Decodable {
  final public var fullname: Swift.String?
  final public var nationality: Country?
  final public var birthDate: Foundation.Date?
  final public var gender: Gender?
  final public var nickname: Swift.String?
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class RallySeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> RallySeasonDetailsParams
  @discardableResult
  final public func includeStages() -> RallySeasonDetailsParams
  @discardableResult
  final public func includeDrivers() -> RallySeasonDetailsParams
  @discardableResult
  final public func includeDriverStats() -> RallySeasonDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BeachVolleyStatistics : VolleyballStatistics {
  @objc deinit
}
public struct VersusMatchStats : Swift.Decodable {
  public let highestwin: HighestWinStatistics?
  public let totalmatches: CommonStatisticsItem?
  public let teamwins: CommonStatisticsItem?
  public let teamloses: CommonStatisticsItem?
  public let teamdraws: CommonStatisticsItem?
  public let oldestmatchdate: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct CommonStatisticsItem : Swift.Decodable {
  public let total: Swift.Float
  public let home: Swift.Float
  public let away: Swift.Float
  public init(from decoder: Swift.Decoder) throws
}
public struct HighestWinStatistics : Swift.Decodable {
  public let total: HighestWinItem?
  public let home: HighestWinItem?
  public let away: HighestWinItem?
  public init(from decoder: Swift.Decoder) throws
}
public struct HighestWinItem : Swift.Decodable {
  public let home: Swift.Int
  public let away: Swift.Int
  public let period: Swift.String
  public let winner: Swift.String
  public let goaldiff: Swift.Int
  public let matchid: Swift.Int
  public let matchuts: Swift.Int
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class SoccerSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> SoccerSeasonDetailsParams
  @discardableResult
  final public func includeCards() -> SoccerSeasonDetailsParams
  @discardableResult
  final public func includePlayerStats() -> SoccerSeasonDetailsParams
  @discardableResult
  final public func includeGoals() -> SoccerSeasonDetailsParams
  @discardableResult
  final public func includeOwnGoals() -> SoccerSeasonDetailsParams
  @discardableResult
  final public func includeAssists() -> SoccerSeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> SoccerSeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> SoccerSeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> SoccerSeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> SoccerSeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> SoccerSeasonDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class VolleyballTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> VolleyballTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> VolleyballTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> VolleyballTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> VolleyballTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> VolleyballTournamentDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class WaterPoloPlayerStatistics : PlayerStatistics {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PlayerStatistics : Statistics {
  public var statType: PlayerStatTypeId {
    get
  }
  public var isActive: Swift.Bool {
    get
  }
  public var isStarted: Swift.Bool {
    get
  }
  public var isNumberOfPlayedMatches: Swift.Bool {
    get
  }
  public var isMinutesPlayed: Swift.Bool {
    get
  }
  public var isGamesStarted: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BaseballPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BaseballPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> BaseballPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> BaseballPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> BaseballPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> BaseballPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> BaseballPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> BaseballPlayerDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SpeedwayDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> SpeedwayDetailsParams
  @discardableResult
  final public func includeLiveRankingTable() -> SpeedwayDetailsParams
  @discardableResult
  final public func includeStaff() -> SpeedwayDetailsParams
  @discardableResult
  final public func includeEvents() -> SpeedwayDetailsParams
  @discardableResult
  final public func includeOdds() -> SpeedwayDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> SpeedwayDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> SpeedwayDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> SpeedwayDetailsParams
  @discardableResult
  final public func includeVenue() -> SpeedwayDetailsParams
  @discardableResult
  final public func includeAttendance() -> SpeedwayDetailsParams
  @discardableResult
  final public func includeStatistics() -> SpeedwayDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> SpeedwayDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> SpeedwayDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> SpeedwayDetailsParams
  @discardableResult
  final public func includeCommentary() -> SpeedwayDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> SpeedwayDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FutsalTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> FutsalTeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> FutsalTeamDetailsParams
  @discardableResult
  final public func includeSquad() -> FutsalTeamDetailsParams
  @discardableResult
  final public func includeRoles() -> FutsalTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> FutsalTeamDetailsParams
  @discardableResult
  final public func includeStages() -> FutsalTeamDetailsParams
  @discardableResult
  final public func includeManager() -> FutsalTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> FutsalTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> FutsalTeamDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SoccerMatch : TeamStagedMatchWithIntContestScore<SoccerDetailsParams, SoccerTeam, HalftimeBasedStatus, SoccerDetails, SoccerSport, SoccerPlayer, HalftimeBasedPeriodStatus, SoccerStage, SoccerTournament, SoccerDetailsCoverage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AussieRulesMatch : TeamStagedMatchWithIntContestScore<AussieRulesDetailsParams, AussieRulesTeam, AussieRulesStatus, AussieRulesDetails, AussieRulesSport, AussieRulesPlayer, AussieRulesPeriodStatus, AussieRulesStage, AussieRulesTournament, AussieRulesDetailsCoverage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FutsalMatch : TeamStagedMatchWithIntContestScore<FutsalDetailsParams, FutsalTeam, HalftimeBasedStatus, FutsalDetails, FutsalSport, FutsalPlayer, HalftimeBasedPeriodStatus, FutsalStage, FutsalTournament, FutsalDetailsCoverage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class WaterPoloMatch : TeamStagedMatchWithIntContestScore<WaterPoloDetailsParams, WaterPoloTeam, WaterPoloStatus, WaterPoloDetails, WaterPoloSport, WaterPoloPlayer, WaterPoloPeriodStatus, WaterPoloStage, WaterPoloTournament, WaterPoloDetailsCoverage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class HandballMatch : TeamStagedMatchWithIntContestScore<HandballDetailsParams, HandballTeam, HandballStatus, HandballDetails, HandballSport, HandballPlayer, HandballStatus, HandballStage, HandballTournament, HandballDetailsCoverage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BadmintonMatch : TeamStagedMatchWithIntContestScore<BadmintonDetailsParams, BadmintonTeam, BadmintonStatus, BadmintonDetails, BadmintonSport, BadmintonPlayer, BadmintonPeriodStatus, BadmintonStage, BadmintonTournament, BadmintonDetailsCoverage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SquashMatch : TeamStagedMatchWithIntContestScore<SquashDetailsParams, SquashTeam, SquashStatus, SquashDetails, SquashSport, SquashPlayer, SquashPeriodStatus, SquashStage, SquashTournament, SquashDetailsCoverage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RugbyMatch : TeamStagedMatchWithIntContestScore<RugbyDetailsParams, RugbyTeam, HalftimeBasedStatus, RugbyDetails, RugbySport, RugbyPlayer, HalftimeBasedPeriodStatus, RugbyStage, RugbyTournament, RugbyDetailsCoverage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BaseballMatch : TeamStagedMatchWithIntContestScore<BaseballDetailsParams, BaseballTeam, BaseballStatus, BaseballDetails, BaseballSport, BaseballPlayer, BaseballPeriodStatus, BaseballStage, BaseballTournament, BaseballDetailsCoverage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AmericanFootballMatch : TeamStagedMatchWithIntContestScore<AmericanFootballDetailsParams, AmericanFootballTeam, AmericanFootballStatus, AmericanFootballDetails, AmericanFootballSport, AmericanFootballPlayer, AmericanFootballPeriodStatus, AmericanFootballStage, AmericanFootballTournament, AmericanFootballDetailsCoverage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class VolleyballMatch : TeamStagedMatchWithIntContestScore<VolleyballDetailsParams, VolleyballTeam, VolleyballStatus, VolleyballDetails, VolleyballSport, VolleyballPlayer, VolleyballPeriodStatus, VolleyballStage, VolleyballTournament, VolleyballDetailsCoverage>, ServiceMatch {
  final public var serviceTeam: VolleyballTeam? {
    get
  }
  final public var servicePosition: ServicePosition? {
    get
  }
  final public var genericServiceTeam: Team? {
    get
  }
  public typealias T = VolleyballTeam
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BeachVolleyMatch : TeamStagedMatchWithIntContestScore<BeachVolleyDetailsParams, BeachVolleyTeam, BeachVolleyStatus, BeachVolleyDetails, BeachVolleySport, BeachVolleyPlayer, BeachVolleyPeriodStatus, BeachVolleyStage, BeachVolleyTournament, BeachVolleyDetailsCoverage>, ServiceMatch {
  final public var serviceTeam: BeachVolleyTeam? {
    get
  }
  final public var servicePosition: ServicePosition? {
    get
  }
  final public var genericServiceTeam: Team? {
    get
  }
  public typealias T = BeachVolleyTeam
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class IceHockeyMatch : TeamStagedMatchWithIntContestScore<IceHockeyDetailsParams, IceHockeyTeam, IceHockeyStatus, IceHockeyDetails, IceHockeySport, IceHockeyPlayer, IceHockeyPeriodStatus, IceHockeyStage, IceHockeyTournament, IceHockeyDetailsCoverage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BandyMatch : TeamStagedMatchWithIntContestScore<BandyDetailsParams, BandyTeam, BandyStatus, BandyDetails, BandySport, BandyPlayer, HalftimeBasedPeriodStatus, BandyStage, BandyTournament, BandyDetailsCoverage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FloorballMatch : TeamStagedMatchWithIntContestScore<FloorballDetailsParams, FloorballTeam, FloorballStatus, FloorballDetails, FloorballSport, FloorballPlayer, FloorballPeriodStatus, FloorballStage, FloorballTournament, FloorballDetailsCoverage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FieldHockeyMatch : TeamStagedMatchWithIntContestScore<FieldHockeyDetailsParams, FieldHockeyTeam, FieldHockeyStatus, FieldHockeyDetails, FieldHockeySport, FieldHockeyPlayer, FieldHockeyPeriodStatus, FieldHockeyStage, FieldHockeyTournament, FieldHockeyDetailsCoverage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BasketballMatch : TeamStagedMatchWithIntContestScore<BasketballDetailsParams, BasketballTeam, BasketballStatus, BasketballDetails, BasketballSport, BasketballPlayer, BasketballPeriodStatus, BasketballStage, BasketballTournament, BasketballDetailsCoverage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DartsMatch : TeamStagedMatchWithIntContestScore<DartsDetailsParams, DartsTeam, DartsStatus, DartsDetails, DartsSport, DartsPlayer, DartsStatus, DartsStage, DartsTournament, DartsDetailsCoverage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SnookerMatch : TeamStagedMatchWithIntContestScore<SnookerDetailsParams, SnookerTeam, SnookerStatus, SnookerDetails, SnookerSport, SnookerPlayer, SnookerStatus, SnookerStage, SnookerTournament, SnookerDetailsCoverage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PesapalloMatch : TeamStagedMatchWithIntContestScore<PesapalloDetailsParams, PesapalloTeam, PesapalloStatus, PesapalloDetails, PesapalloSport, PesapalloPlayer, PesapalloPeriodStatus, PesapalloStage, PesapalloTournament, PesapalloDetailsCoverage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CounterStrikeMatch : TeamStagedMatchWithIntContestScore<CounterStrikeDetailsParams, CounterStrikeTeam, ContestStatus, CounterStrikeDetails, CounterStrikeSport, CounterStrikePlayer, ContestStatus, CounterStrikeStage, CounterStrikeTournament, CounterStrikeDetailsCoverage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class LeagueOfLegendsMatch : TeamStagedMatchWithIntContestScore<LeagueOfLegendsDetailsParams, LeagueOfLegendsTeam, ContestStatus, LeagueOfLegendsDetails, LeagueOfLegendsSport, LeagueOfLegendsPlayer, ContestStatus, LeagueOfLegendsStage, LeagueOfLegendsTournament, LeagueOfLegendsDetailsCoverage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class Dota2Match : TeamStagedMatchWithIntContestScore<Dota2DetailsParams, Dota2Team, ContestStatus, Dota2Details, Dota2Sport, Dota2Player, ContestStatus, Dota2Stage, Dota2Tournament, Dota2DetailsCoverage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SpeedwayRace : TeamStagedMatchWithIntContestScore<SpeedwayDetailsParams, SpeedwayTeam, ContestStatus, SpeedwayDetails, SpeedwaySport, SpeedwayDriver, ContestStatus, SpeedwayStage, SpeedwayTournament, SpeedwayDetailsCoverage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TableTennisMatch : Match<TableTennisDetailsParams, TableTennisTeam, TableTennisStatus, Score<TableTennisTeam, TableTennisPeriodStatus, Swift.Int, TeamIntContestScore<TableTennisTeam>>, Swift.Int, TableTennisDetails, TableTennisSport, TableTennisPlayer, TableTennisPeriodStatus, TeamIntContestScore<TableTennisTeam>, TableTennisDetailsCoverage>, ServiceMatch, AnyServiceMatch {
  public var serviceTeam: TableTennisTeam? {
    get
  }
  public var servicePosition: ServicePosition? {
    get
  }
  public var genericServiceTeam: Team? {
    get
  }
  public typealias T = TableTennisTeam
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BaseTennisMatch : TeamStagedMatch<TennisDetailsParams, TennisTeam, TennisStatus, TennisScore, Swift.Int, TennisDetails, TennisSport, TennisPlayer, TennisPeriodStatus, TeamIntContestScore<TennisTeam>, TennisStage, TennisTournament, TennisDetailsCoverage>, ServiceMatch {
  public var serviceTeam: TennisTeam? {
    get
  }
  public var servicePosition: ServicePosition? {
    get
  }
  public var courtName: Swift.String? {
    get
  }
  public var gameOpportunityTeam: TennisTeam? {
    get
  }
  public var gameOpportunities: [TennisGameOpportunity]? {
    get
  }
  public var gameOpportunityCount: Swift.Int? {
    get
  }
  public var lastGameOpportunity: TennisGameOpportunity? {
    get
  }
  public var tieBreakScores: [Swift.String : TennisGameScore]? {
    get
  }
  public var breakTime: BreakTime? {
    get
  }
  public var bestOfSets: Swift.Int? {
    get
  }
  public var numberOfSets: Swift.Int? {
    get
  }
  public var pointsFlow: PointFlow? {
    get
  }
  public var supportsTieBreaks: Swift.Bool? {
    get
  }
  public var genericServiceTeam: Team? {
    get
  }
  public func isTieBreakPeriod(periodIndex: Swift.Int?) -> Swift.Bool
  public func isSuperTieBreakPeriod(periodIndex: Swift.Int?) -> Swift.Bool
  public typealias T = TennisTeam
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AmericanFootballPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> AmericanFootballPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> AmericanFootballPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> AmericanFootballPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> AmericanFootballPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> AmericanFootballPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> AmericanFootballPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> AmericanFootballPlayerDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MotorsportController<S, MD, MDS, MS, MRSD, MRS> : BaseController where S : Sport, MS : Season, MRS : Contest {
  public func toGenericMotorsportController() -> GenericMotorsportController?
  public func loadSeasons(completion: @escaping (Response<[MS]>) -> Swift.Void)
  public func loadActiveSeason(completion: @escaping (Response<MS?>) -> Swift.Void)
  public func loadStagesForSeason(season: MS, completion: @escaping (Response<[MRS]>) -> Swift.Void)
  public func loadLastSeasonStages(completion: @escaping (Response<[MRS]?>) -> Swift.Void)
  public func getSeason(by id: Swift.Int, completion: @escaping (Response<MS>) -> Swift.Void)
  public func getStage(by id: Swift.Int, completion: @escaping (Response<MRS>) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class VolleyballSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> VolleyballSeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> VolleyballSeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> VolleyballSeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> VolleyballSeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> VolleyballSeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> VolleyballSeasonDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BadmintonPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BadmintonPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> BadmintonPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> BadmintonPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> BadmintonPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> BadmintonPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> BadmintonPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> BadmintonPlayerDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class NascarController : MotorsportController<NascarSport, NascarDriver, NascarDriverStatistics, NascarSeason, NascarRaceStageDetails, NascarRaceStage>, GenericMotorsportController {
  final public func loadGenericSeasons(completion: @escaping (Response<[Season]>) -> Swift.Void)
  final public func loadGenericActiveSeason(completion: @escaping (Response<Season>) -> Swift.Void)
  final public func loadGenericStagesForSeason(season: Season, completion: @escaping (Response<[Contest]>) -> Swift.Void)
  final public func loadGenericLastSeasonStages(completion: @escaping (Response<[Contest]?>) -> Swift.Void)
  final public func getGenericSeason(by id: Swift.Int, completion: @escaping (Response<Season>) -> Swift.Void)
  final public func getGenericStage(by id: Swift.Int, completion: @escaping (Response<Contest>) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class VolleyballPlayerStatistics : PlayerStatistics {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Contest : SportRadarModel, AnyGenericContest, NotificationSubscribable, DetailsLoadableGeneric, RepeatingDetailsLoadableGeneric {
  public var sportId: Swift.Int {
    get
  }
  public var subscriptionType: SubscriptionTag {
    get
  }
  public var id: Swift.Int {
    get
  }
  public var startTime: Foundation.Date? {
    get
  }
  public var isStartTimeFinal: Swift.Bool {
    get
  }
  public var isLive: Swift.Bool {
    get
  }
  public var competition: Competition? {
    get
  }
  public var venue: Venue? {
    get
  }
  public var time: CountingContestTime? {
    get
  }
  public var anyMatch: AnyMatch? {
    get
  }
  public var anyMotorsportRaceStage: AnyMotorsportRaceStage? {
    get
  }
  public var genericSport: Sport {
    get
  }
  @available(*, deprecated, message: "Use contest.anyMatch or contest.anyMotorsportRaceStage; Will be removed in SDK version 4.0.")
  public var anyContest: AnyContest? {
    get
  }
  public func toSpecificContest<C>() -> C? where C : Contest
  public func loadGenericDetails(with params: AnyContestDetailsParams, completion: @escaping (Response<AnyContestDetails>) -> Swift.Void)
  public func trackGenericDetails(with params: AnyContestDetailsParams, completion: @escaping (RepeatingResponse<AnyContestDetails>) -> Swift.Void) -> RepeatingTask
  public typealias GD = AnyContestDetails
  public typealias GP = AnyContestDetailsParams
  @objc deinit
}
public protocol AnyGenericContest {
  var id: Swift.Int { get }
  var startTime: Foundation.Date? { get }
  var isStartTimeFinal: Swift.Bool { get }
  var isLive: Swift.Bool { get }
  var competition: Competition? { get }
  var venue: Venue? { get }
  var time: CountingContestTime? { get }
  var genericSport: Sport { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ContestDetails : Details, AnyContestDetails {
  public var matchDetails: AnyMatchDetails? {
    get
  }
  public var motorsportRaceStageDetails: AnyMotorsportRaceStageDetails? {
    get
  }
  @objc deinit
}
public protocol AnyContestDetails {
  var matchDetails: AnyMatchDetails? { get }
  var motorsportRaceStageDetails: AnyMotorsportRaceStageDetails? { get }
}
@_hasMissingDesignatedInitializers public class ContestWithDetails<C, D, COV, CS, SCORE, SRT, SP> : Contest, AnyContestWithDetails where C : Contester, D : Details, COV : DetailsCoverage, CS : ContestStatus, SCORE : ContestScore<C, SRT>, SRT : Swift.Comparable, SP : Sport {
  public var sport: SP {
    get
  }
  public var contesters: [C] {
    get
  }
  public var detailsCoverage: COV? {
    get
  }
  public var status: CS? {
    get
  }
  public var score: SCORE? {
    get
  }
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  public var details: D? {
    get
  }
  override public var genericSport: Sport {
    get
  }
  public var genericContesters: [Contester]? {
    get
  }
  public var genericDetailsCoverage: DetailsCoverage? {
    get
  }
  public var genericStatus: ContestStatus? {
    get
  }
  @objc deinit
}
public protocol AnyContestWithDetails : AnyGenericContest {
  var genericSport: Sport { get }
  var genericContesters: [Contester]? { get }
  var genericDetailsCoverage: DetailsCoverage? { get }
  var genericStatus: ContestStatus? { get }
}
extension Contest : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum MatchWeather {
  case good
  case medium
  case bad
  case indoor
  case extreme
  public static func == (a: MatchWeather, b: MatchWeather) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PitchCondition {
  case good
  case medium
  case bad
  public static func == (a: PitchCondition, b: PitchCondition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AmericanFootballStatistics : MatchStatistics {
  public var isPassingYards: Swift.Bool {
    get
  }
  public var isPassingAverageYards: Swift.Bool {
    get
  }
  public var isRushingYards: Swift.Bool {
    get
  }
  public var isRushingAverage: Swift.Bool {
    get
  }
  public var isExtraPointsTotalAttempted: Swift.Bool {
    get
  }
  public var isExtraPointsTotalMade: Swift.Bool {
    get
  }
  public var isFieldGoalsAttempted: Swift.Bool {
    get
  }
  public var isFieldGoalsMade: Swift.Bool {
    get
  }
  public var isFirstDownsTotal: Swift.Bool {
    get
  }
  public var isGoalEfficiencyAttempted: Swift.Bool {
    get
  }
  public var isPossessionTime: Swift.Bool {
    get
  }
  public var isRedzoneEfficiencyAttempted: Swift.Bool {
    get
  }
  public var isRemainingTimeouts: Swift.Bool {
    get
  }
  public var isThirdDownEfficiencyAttempted: Swift.Bool {
    get
  }
  public var isTotalYards: Swift.Bool {
    get
  }
  public var isTouchdownsTotal: Swift.Bool {
    get
  }
  public var isTurnovers: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BasketballTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BasketballTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> BasketballTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> BasketballTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> BasketballTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> BasketballTournamentDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BasketballDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BasketballDetailsParams
  @discardableResult
  final public func includeBallCoordinate() -> BasketballDetailsParams
  @discardableResult
  final public func includeLineups() -> BasketballDetailsParams
  @discardableResult
  final public func includeTeam1LeagueTable() -> BasketballDetailsParams
  @discardableResult
  final public func includeTeam2LeagueTable() -> BasketballDetailsParams
  @discardableResult
  final public func includeLiveRankingTable() -> BasketballDetailsParams
  @discardableResult
  final public func includeStaff() -> BasketballDetailsParams
  @discardableResult
  final public func includeEvents() -> BasketballDetailsParams
  @discardableResult
  final public func includeOdds() -> BasketballDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> BasketballDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> BasketballDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> BasketballDetailsParams
  @discardableResult
  final public func includeVenue() -> BasketballDetailsParams
  @discardableResult
  final public func includeAttendance() -> BasketballDetailsParams
  @discardableResult
  final public func includeStatistics() -> BasketballDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> BasketballDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> BasketballDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> BasketballDetailsParams
  @discardableResult
  final public func includeCommentary() -> BasketballDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> BasketballDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ContestScore<C, R> : AnyContestScore where C : Contester, R : Swift.Comparable {
  final public let results: [ContesterResultPair<C, R>]
  final public let winner: C?
  public var anyTeamIntResults: [AnyContesterResultPair]? {
    get
  }
  public var genericWinner: Contester? {
    get
  }
  @objc deinit
}
public protocol AnyContestScore {
  var anyTeamIntResults: [AnyContesterResultPair]? { get }
  var genericWinner: Contester? { get }
}
public struct PeriodScore<ST, T, R, SCORE> : AnyTeamIntPeriodScore where ST : PeriodStatus, T : Team, R : Swift.Comparable, SCORE : ContestScore<T, R> {
  public let periodStatus: ST
  public let score: SCORE
  public var genericPeriodStatus: PeriodStatus {
    get
  }
  public var anyTeamIntContestScore: AnyTeamIntContestScore? {
    get
  }
}
public protocol AnyTeamIntPeriodScore {
  var genericPeriodStatus: PeriodStatus { get }
  var anyTeamIntContestScore: AnyTeamIntContestScore? { get }
}
@_hasMissingDesignatedInitializers public class Score<C, ST, R, SCORE> : ContestScore<C, R>, AnyTeamIntScore where C : Team, ST : PeriodStatus, R : Swift.Comparable, SCORE : ContestScore<C, R> {
  final public let contestScore: SCORE?
  final public let periodScores: [PeriodScore<ST, C, R, SCORE>]?
  public var anyTeamIntContestScore: AnyTeamIntContestScore? {
    get
  }
  public var anyTeamIntPeriodScores: [AnyTeamIntPeriodScore]? {
    get
  }
  @objc deinit
}
public protocol AnyTeamIntScore : AnyContestScore {
  var anyTeamIntContestScore: AnyTeamIntContestScore? { get }
  var anyTeamIntPeriodScores: [AnyTeamIntPeriodScore]? { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TeamIntContestScore<C> : ContestScore<C, Swift.Int>, AnyTeamIntContestScore where C : Team {
  public var team1: Swift.Int? {
    get
  }
  public var team2: Swift.Int? {
    get
  }
  @objc deinit
}
public protocol AnyTeamIntContestScore {
  var team1: Swift.Int? { get }
  var team2: Swift.Int? { get }
}
@_hasMissingDesignatedInitializers public class TennisScore : Score<TennisTeam, TennisPeriodStatus, Swift.Int, TeamIntContestScore<TennisTeam>> {
  final public let gameScore: TennisGameScore?
  final public let gamePoints: TennisGamePoints?
  final public let setScore: TennisSetScore?
  @objc deinit
}
public struct TennisGameScore {
  public let team1: Swift.Int
  public let team2: Swift.Int
}
public struct TennisGamePoints {
  public let team1: TennisTeamPointsScore
  public let team2: TennisTeamPointsScore
}
public struct TennisSetScore {
  public let team1: Swift.Int?
  public let team2: Swift.Int?
}
@_hasMissingDesignatedInitializers public class TennisTeamPointsScore {
  public var isAdvantage: Swift.Bool
  public var points: Swift.String {
    get
  }
  public var pointsInt: Swift.Int {
    get
  }
  @objc deinit
}
public struct ContesterResultPair<C, R> : AnyContesterResultPair where C : Contester, R : Swift.Comparable {
  public let contester: C
  public let result: R?
  public var genericContester: Contester {
    get
  }
  public var intResult: Swift.Int? {
    get
  }
  public var racePositionResult: RacePosition? {
    get
  }
  public var cyclingRacePositionResult: CyclingRacePosition? {
    get
  }
}
public protocol AnyContesterResultPair {
  var genericContester: Contester { get }
  var intResult: Swift.Int? { get }
  var racePositionResult: RacePosition? { get }
  var cyclingRacePositionResult: CyclingRacePosition? { get }
}
@_hasMissingDesignatedInitializers public class RacePosition : Swift.Comparable {
  final public let position: Swift.Int
  final public let points: Swift.Int?
  public static func < (lhs: RacePosition, rhs: RacePosition) -> Swift.Bool
  public static func == (lhs: RacePosition, rhs: RacePosition) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RaceScore<C> : ContestScore<C, RacePosition>, AnyRaceScore where C : Contester {
  public var anyRaceResults: [AnyContesterResultPair] {
    get
  }
  @objc deinit
}
public protocol AnyRaceScore : AnyContestScore {
  var anyRaceResults: [AnyContesterResultPair] { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FormulaOneRaceScore : RaceScore<FormulaOneDriver> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RallyRaceScore : RaceScore<RallyDriver> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NascarRaceScore : RaceScore<NascarDriver> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MotorbikesRaceScore : RaceScore<MotorbikesDriver> {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CyclingRacePosition : Swift.Comparable {
  final public let position: Swift.Int
  final public let time: Swift.String?
  public static func < (lhs: CyclingRacePosition, rhs: CyclingRacePosition) -> Swift.Bool
  public static func == (lhs: CyclingRacePosition, rhs: CyclingRacePosition) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CyclingRaceScore : ContestScore<CyclingRider, CyclingRacePosition>, AnyRaceScore {
  public var anyRaceResults: [AnyContesterResultPair] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class RugbyTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> RugbyTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> RugbyTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> RugbyTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> RugbyTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> RugbyTournamentDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AnyMotorsportSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> AnyMotorsportSeasonDetailsParams
  @discardableResult
  final public func includeStages() -> AnyMotorsportSeasonDetailsParams
  @discardableResult
  final public func includeDrivers() -> AnyMotorsportSeasonDetailsParams
  @discardableResult
  final public func includeDriverStats() -> AnyMotorsportSeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> AnyMotorsportSeasonDetailsParams
  @discardableResult
  final public func includeTeamStats() -> AnyMotorsportSeasonDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FloorballTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> FloorballTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> FloorballTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> FloorballTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> FloorballTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> FloorballTournamentDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Dota2SeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> Dota2SeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> Dota2SeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> Dota2SeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> Dota2SeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> Dota2SeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> Dota2SeasonDetailsParams
  @objc deinit
}
public enum Card {
  case yellow, red, yellowRed, blue
  public static func == (a: Card, b: Card) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SquashPlayerStatistics : PlayerStatistics {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MatchDetails<T, P, S> : ContestDetails, AnyMatchDetails where T : Contester, T : Swift.Hashable, P : Contester, P : Person, P : Swift.Hashable, S : Statistics {
  public var events: [Event]? {
    get
  }
  public var odds: [Odds]? {
    get
  }
  public var matchOdds: [Odds]? {
    get
  }
  public var liveOdds: [Odds]? {
    get
  }
  public var oddsComparison: OddsComparison? {
    get
  }
  public var venue: Venue? {
    get
  }
  public var jerseys: MatchJerseys? {
    get
  }
  public var attendance: Swift.Int? {
    get
  }
  public var statistics: [T : [S]]? {
    get
  }
  public var periodStatistics: [Swift.Int : [T : [S]]]? {
    get
  }
  public var playerStatistics: [T : [P : [S]]]? {
    get
  }
  public var playerPeriodStatistics: [Swift.Int : [T : [P : [S]]]]? {
    get
  }
  public var commentary: [Comment]? {
    get
  }
  public var matchStatistics: [S]? {
    get
  }
  public var genericStatistics: [Team : [MatchStatistics]]? {
    get
  }
  public var genericPeriodStatistics: [Swift.Int : [Team : [MatchStatistics]]]? {
    get
  }
  public var genericPlayerStatistics: [Team : [TeamPlayer : [PlayerStatistics]]]? {
    get
  }
  public var genericPlayerPeriodStatistics: [Swift.Int : [Team : [TeamPlayer : [PlayerStatistics]]]]? {
    get
  }
  public var genericMatchStatistics: [MatchStatistics]? {
    get
  }
  public var anyRankingContestDetails: AnyRankingContestDetails? {
    get
  }
  public func isEmpty() -> Swift.Bool
  @objc deinit
}
public protocol AnyMatchDetails {
  var events: [Event]? { get }
  var odds: [Odds]? { get }
  var matchOdds: [Odds]? { get }
  var liveOdds: [Odds]? { get }
  var oddsComparison: OddsComparison? { get }
  var venue: Venue? { get }
  var jerseys: MatchJerseys? { get }
  var attendance: Swift.Int? { get }
  var genericStatistics: [Team : [MatchStatistics]]? { get }
  var genericPeriodStatistics: [Swift.Int : [Team : [MatchStatistics]]]? { get }
  var genericPlayerStatistics: [Team : [TeamPlayer : [PlayerStatistics]]]? { get }
  var genericPlayerPeriodStatistics: [Swift.Int : [Team : [TeamPlayer : [PlayerStatistics]]]]? { get }
  var commentary: [Comment]? { get }
  var genericMatchStatistics: [MatchStatistics]? { get }
  var anyRankingContestDetails: AnyRankingContestDetails? { get }
  func isEmpty() -> Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RankingContestDetails<T, TP, S> : MatchDetails<T, TP, S>, AnyRankingContestDetails where T : Team, TP : TeamPlayer, S : Statistics {
  public var liveRankingTable: RankingTable? {
    get
  }
  public var staff: MatchStaff? {
    get
  }
  public var anyLineupsRankingContestDetails: AnyLineupsRankingContestDetails? {
    get
  }
  override public func isEmpty() -> Swift.Bool
  @objc deinit
}
public protocol AnyRankingContestDetails : AnyMatchDetails {
  var liveRankingTable: RankingTable? { get }
  var staff: MatchStaff? { get }
  var anyLineupsRankingContestDetails: AnyLineupsRankingContestDetails? { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LineupsRankingContestDetails<T, TP, S> : RankingContestDetails<T, TP, S>, AnyLineupsRankingContestDetails where T : Team, TP : TeamPlayer, S : Statistics {
  public var lineups: MatchLineups<TP>? {
    get
  }
  public var previousLineups: MatchLineups<TP>? {
    get
  }
  public var team1LeagueTable: RankingTableItem? {
    get
  }
  public var team2LeagueTable: RankingTableItem? {
    get
  }
  public var genericLineups: AnyMatchLineups? {
    get
  }
  public var genericPreviousLineups: AnyMatchLineups? {
    get
  }
  override public func isEmpty() -> Swift.Bool
  @objc deinit
}
public protocol AnyLineupsRankingContestDetails : AnyRankingContestDetails {
  var genericLineups: AnyMatchLineups? { get }
  var genericPreviousLineups: AnyMatchLineups? { get }
  var team1LeagueTable: RankingTableItem? { get }
  var team2LeagueTable: RankingTableItem? { get }
}
@_hasMissingDesignatedInitializers final public class MatchStaff {
  final public var team1Manager: Manager? {
    get
  }
  final public var team2Manager: Manager? {
    get
  }
  final public var referees: [Referee]? {
    get
  }
  final public var supervisor: Official? {
    get
  }
  final public var officials: Officials? {
    get
  }
  final public var timeKeeper: Official? {
    get
  }
  final public var secretary: Official? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TennisStatistics : MatchStatistics {
  public var isMatchesWon: Swift.Bool {
    get
  }
  public var isAces: Swift.Bool {
    get
  }
  public var isDoubleFaults: Swift.Bool {
    get
  }
  public var isMaxPointsInRow: Swift.Bool {
    get
  }
  public var isPointsWon: Swift.Bool {
    get
  }
  public var isFirstServePointsWon: Swift.Bool {
    get
  }
  public var isSecondServePointsWon: Swift.Bool {
    get
  }
  public var isBreakPointsWon: Swift.Bool {
    get
  }
  public var isServicePointsWon: Swift.Bool {
    get
  }
  public var isMaxGamesInRow: Swift.Bool {
    get
  }
  public var isServiceGamesWon: Swift.Bool {
    get
  }
  public var isTiebreaksWon: Swift.Bool {
    get
  }
  public var isFirstServeSuccessful: Swift.Bool {
    get
  }
  public var isSecondServeSuccessful: Swift.Bool {
    get
  }
  public var isReceiverPointsWon: Swift.Bool {
    get
  }
  public var isGamesWon: Swift.Bool {
    get
  }
  @objc deinit
}
extension MarshaledObject {
  @available(*, unavailable, renamed: "value(for:)")
  public func valueForKey<A>(_ key: KeyType) throws -> A where A : ValueType
  @available(*, unavailable, renamed: "value(for:)")
  public func valueForKey<A>(_ key: KeyType) throws -> A? where A : ValueType
  @available(*, unavailable, renamed: "value(for:)")
  public func valueForKey<A>(_ key: KeyType) throws -> [A] where A : ValueType
  @available(*, unavailable, renamed: "value(for:)")
  public func valueForKey<A>(_ key: KeyType) throws -> [A]? where A : ValueType
  @available(*, unavailable, renamed: "value(for:)")
  public func valueForKey<A>(_ key: KeyType) throws -> Swift.Set<A> where A : ValueType, A : Swift.Hashable
  @available(*, unavailable, renamed: "value(for:)")
  public func valueForKey<A>(_ key: KeyType) throws -> Swift.Set<A>? where A : ValueType, A : Swift.Hashable
  @available(*, unavailable, renamed: "value(for:)")
  public func valueForKey<A>(_ key: KeyType) throws -> A where A : Swift.RawRepresentable, A.RawValue : ValueType
  @available(*, unavailable, renamed: "value(for:)")
  public func valueForKey<A>(for key: KeyType) throws -> A? where A : Swift.RawRepresentable, A.RawValue : ValueType
  @available(*, unavailable, renamed: "value(for:)")
  public func valueForKey<A>(_ key: KeyType) throws -> [A] where A : Swift.RawRepresentable, A.RawValue : ValueType
  @available(*, unavailable, renamed: "value(for:)")
  public func valueForKey<A>(_ key: KeyType) throws -> [A]? where A : Swift.RawRepresentable, A.RawValue : ValueType
  @available(*, unavailable, renamed: "value(for:)")
  public func valueForKey<A>(_ key: KeyType) throws -> Swift.Set<A> where A : Swift.Hashable, A : Swift.RawRepresentable, A.RawValue : ValueType
  @available(*, unavailable, renamed: "value(for:)")
  public func valueForKey<A>(_ key: KeyType) throws -> Swift.Set<A>? where A : Swift.Hashable, A : Swift.RawRepresentable, A.RawValue : ValueType
}
public enum LocksmithInternetProtocol : Swift.RawRepresentable {
  case ftp, ftpAccount, http, irc, nntp, pop3, smtp, socks, imap, ldap, appleTalk, afp, telnet, ssh, ftps, https, httpProxy, httpsProxy, ftpProxy, smb, rtsp, rtspProxy, daap, eppc, ipp, nntps, ldaps, telnetS, imaps, ircs, pop3S
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
@_hasMissingDesignatedInitializers public class CountingContestTime {
  public func getTimeInterval() -> Foundation.TimeInterval
  public func getCountingSeconds() -> Swift.Int
  public func getCountingMinutes() -> Swift.Int
  public func getCountingHours() -> Swift.Int
  public func getCountingString() -> Swift.String
  public func getCountingInjurySeconds() -> Swift.Int
  public var isRunning: Swift.Bool {
    get
  }
  public var startedTime: Foundation.Date? {
    get
  }
  public var endedTime: Foundation.Date? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ContestStatus : PeriodStatus, Swift.Hashable {
  public var id: Swift.Int {
    get
  }
  public var isNotStarted: Swift.Bool {
    get
  }
  public var isEnded: Swift.Bool {
    get
  }
  public var isInterrupted: Swift.Bool {
    get
  }
  public var isCancelled: Swift.Bool {
    get
  }
  public var isSuspended: Swift.Bool {
    get
  }
  public var isDefaulted: Swift.Bool {
    get
  }
  public var isPaused: Swift.Bool {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public protocol BreakStatus {
  var isBreak: Swift.Bool { get }
  var isFirstBreak: Swift.Bool { get }
  var isSecondBreak: Swift.Bool { get }
  var isThirdBreak: Swift.Bool { get }
  var isFourthBreak: Swift.Bool { get }
}
extension BreakStatus where Self : ContestStatus {
  public var isBreak: Swift.Bool {
    get
  }
  public var isFirstBreak: Swift.Bool {
    get
  }
  public var isSecondBreak: Swift.Bool {
    get
  }
  public var isThirdBreak: Swift.Bool {
    get
  }
  public var isFourthBreak: Swift.Bool {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class HalftimeBasedStatus : HalftimeBasedPeriodStatus {
  public var isHalfTime: Swift.Bool {
    get
  }
  public var isWaitingExtraTime: Swift.Bool {
    get
  }
  public var isFirstExtraTime: Swift.Bool {
    get
  }
  public var isExtraTimeHalftime: Swift.Bool {
    get
  }
  public var isSecondExtraTime: Swift.Bool {
    get
  }
  public var isWaitingPenalties: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AussieRulesStatus : AussieRulesPeriodStatus {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class HandballStatus : HalftimeBasedStatus {
  final public var isTimeout: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BadmintonStatus : BadmintonPeriodStatus, BreakStatus {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SquashStatus : SquashPeriodStatus {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BaseballStatus : BaseballPeriodStatus {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class VolleyballStatus : VolleyballPeriodStatus {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BeachVolleyStatus : BeachVolleyPeriodStatus {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AmericanFootballStatus : AmericanFootballPeriodStatus {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TennisStatus : TennisPeriodStatus {
  final public var isWalkoverPlayer1: Swift.Bool {
    get
  }
  final public var isWalkoverPlayer2: Swift.Bool {
    get
  }
  final public var isWalkover: Swift.Bool {
    get
  }
  final public var isRetired: Swift.Bool {
    get
  }
  final public var isAbandoned: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TableTennisStatus : TableTennisPeriodStatus {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BasketballStatus : BasketballPeriodStatus, BreakStatus {
  final public var isBreak: Swift.Bool {
    get
  }
  final public var isSecondQuater: Swift.Bool {
    get
  }
  final public var isHalfTime: Swift.Bool {
    get
  }
  final public var isThirdQuater: Swift.Bool {
    get
  }
  final public var isFourthQuater: Swift.Bool {
    get
  }
  final public var isExtraTime: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DartsStatus : ContestStatus {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SnookerStatus : ContestStatus {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class IceHockeyStatus : IceHockeyPeriodStatus, BreakStatus {
  final public var isBreak: Swift.Bool {
    get
  }
  final public var isWaitingOvertime: Swift.Bool {
    get
  }
  final public var isWaitingPenalties: Swift.Bool {
    get
  }
  final public var isAfterExtraTime: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BandyStatus : HalftimeBasedPeriodStatus {
  final public var isTimeout: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FloorballStatus : FloorballPeriodStatus, BreakStatus {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FieldHockeyStatus : FieldHockeyPeriodStatus, BreakStatus {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PesapalloStatus : PesapalloPeriodStatus {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class WaterPoloStatus : WaterPoloPeriodStatus {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MotorsportStatus : ContestStatus {
  final public var isRunning: Swift.Bool {
    get
  }
  override final public var isNotStarted: Swift.Bool {
    get
  }
  override final public var isCancelled: Swift.Bool {
    get
  }
  override final public var isInterrupted: Swift.Bool {
    get
  }
  override final public var isEnded: Swift.Bool {
    get
  }
  final public var isRedFlag: Swift.Bool {
    get
  }
  final public var isYellowFlag: Swift.Bool {
    get
  }
  final public var isRedYellowStripedFlag: Swift.Bool {
    get
  }
  final public var isWhiteFlag: Swift.Bool {
    get
  }
  final public var isSafetyCar: Swift.Bool {
    get
  }
  final public var isWarmup: Swift.Bool {
    get
  }
  final public var isInGrid: Swift.Bool {
    get
  }
  final public var isGridMustBeCleared: Swift.Bool {
    get
  }
  final public func getCurrentStatus() -> MotorsportStatusTypes?
  override final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CyclingStatus : ContestStatus {
  override final public var isInterrupted: Swift.Bool {
    get
  }
  override final public var isCancelled: Swift.Bool {
    get
  }
  override final public var isEnded: Swift.Bool {
    get
  }
  override final public var isNotStarted: Swift.Bool {
    get
  }
  final public var isRunning: Swift.Bool {
    get
  }
  final public var isCompleted: Swift.Bool {
    get
  }
  final public var isClosed: Swift.Bool {
    get
  }
  final public var isPreliminary: Swift.Bool {
    get
  }
  final public var isStarted: Swift.Bool {
    get
  }
  final public func getCurrentStatus() -> CyclingStatusTypes?
  @objc deinit
}
public enum CyclingStatusTypes {
  case cancelled
  case finished
  case running
  case notStarted
  case completed
  case closed
  case preliminary
  case interrupted
  case started
  public static func == (a: CyclingStatusTypes, b: CyclingStatusTypes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class AussieRulesTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> AussieRulesTeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> AussieRulesTeamDetailsParams
  @discardableResult
  final public func includeSquad() -> AussieRulesTeamDetailsParams
  @discardableResult
  final public func includeRoles() -> AussieRulesTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> AussieRulesTeamDetailsParams
  @discardableResult
  final public func includeStages() -> AussieRulesTeamDetailsParams
  @discardableResult
  final public func includeManager() -> AussieRulesTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> AussieRulesTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> AussieRulesTeamDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class HandballTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> HandballTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> HandballTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> HandballTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> HandballTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> HandballTournamentDetailsParams
  @objc deinit
}
extension Swift.Dictionary {
  public init(withoutOptionalValues initial: Swift.Dictionary<Key, Value?>)
  public init(pairs: [(Key, Value)])
  public init(initial: Swift.Dictionary<Key, Value>, toMerge: Swift.Dictionary<Key, Value>)
}
@_hasMissingDesignatedInitializers public class Tournament : Competition, NotificationSubscribable, DetailsLoadableGeneric {
  public var sportId: Swift.Int {
    get
  }
  public var subscriptionType: SubscriptionTag {
    get
  }
  public var activeSeasonId: Swift.Int? {
    get
  }
  public var country: Country? {
    get
  }
  public func loadGenericDetails(with params: AnyTournametDetailsParams, completion: @escaping (Response<AnyTournametDetails>) -> Swift.Void)
  public typealias GD = AnyTournametDetails
  public typealias GP = AnyTournametDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TournamentWithDetails<D, P> : Tournament, DetailsLoadable where D : Details, P : Params {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  public var details: D? {
    get
  }
  public func loadDetails(with params: P, completion: @escaping (Response<D>) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SoccerTournament : TournamentWithDetails<SoccerTournamentDetails, SoccerTournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AussieRulesTournament : TournamentWithDetails<AussieRulesTournamentDetails, AussieRulesTournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FutsalTournament : TournamentWithDetails<FutsalTournamentDetails, FutsalTournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class WaterPoloTournament : TournamentWithDetails<WaterPoloTournamentDetails, WaterPoloTournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PesapalloTournament : TournamentWithDetails<PesapalloTournamentDetails, PesapalloTournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BasketballTournament : TournamentWithDetails<BasketballTournamentDetails, BasketballTournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DartsTournament : TournamentWithDetails<DartsTournamentDetails, DartsTournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SnookerTournament : TournamentWithDetails<SnookerTournamentDetails, SnookerTournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class IceHockeyTournament : TournamentWithDetails<IceHockeyTournamentDetails, IceHockeyTournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BandyTournament : TournamentWithDetails<BandyTournamentDetails, BandyTournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FloorballTournament : TournamentWithDetails<FloorballTournamentDetails, FloorballTournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FieldHockeyTournament : TournamentWithDetails<FieldHockeyTournamentDetails, FieldHockeyTournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class HandballTournament : TournamentWithDetails<HandballTournamentDetails, HandballTournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BadmintonTournament : TournamentWithDetails<BadmintonTournamentDetails, BadmintonTournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SquashTournament : TournamentWithDetails<SquashTournamentDetails, SquashTournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class VolleyballTournament : TournamentWithDetails<VolleyballTournamentDetails, VolleyballTournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BeachVolleyTournament : TournamentWithDetails<BeachVolleyTournamentDetails, BeachVolleyTournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RugbyTournament : TournamentWithDetails<RugbyTournamentDetails, RugbyTournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BaseballTournament : TournamentWithDetails<BaseballTournamentDetails, BaseballTournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AmericanFootballTournament : TournamentWithDetails<AmericanFootballTournamentDetails, AmericanFootballTournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TableTennisTournament : TournamentWithDetails<TableTennisTournamentDetails, TableTennisTournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CounterStrikeTournament : TournamentWithDetails<CounterStrikeTournamentDetails, CounterStrikeTournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class LeagueOfLegendsTournament : TournamentWithDetails<LeagueOfLegendsTournamentDetails, LeagueOfLegendsTournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class Dota2Tournament : TournamentWithDetails<Dota2TournamentDetails, Dota2TournamentDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SpeedwayTournament : TournamentWithDetails<SpeedwayTournamentDetails, SpeedwayTournamentDetailsParams> {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FormulaOneRaceStageDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> FormulaOneRaceStageDetailsParams
  @discardableResult
  final public func includeRace() -> FormulaOneRaceStageDetailsParams
  @discardableResult
  final public func includePractices() -> FormulaOneRaceStageDetailsParams
  @discardableResult
  final public func includeQualifications() -> FormulaOneRaceStageDetailsParams
  @discardableResult
  final public func includeTeams() -> FormulaOneRaceStageDetailsParams
  @discardableResult
  final public func includeTeamStats() -> FormulaOneRaceStageDetailsParams
  @discardableResult
  final public func includeRaces() -> FormulaOneRaceStageDetailsParams
  @discardableResult
  final public func includeDrivers() -> FormulaOneRaceStageDetailsParams
  @discardableResult
  final public func includeDriverStats() -> FormulaOneRaceStageDetailsParams
  @discardableResult
  final public func includeStageScores() -> FormulaOneRaceStageDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MotorsportRaceStage<D, MD, SP, DS> : ContestWithDetails<D, MD, DetailsCoverage, MotorsportStatus, RaceScore<D>, RacePosition, SP>, AnyMotorsportRaceStage where D : MotorsportDriver, MD : Details, SP : Sport {
  public var uid: Swift.Int?
  public var name: Swift.String {
    get
  }
  public var startDate: Foundation.Date? {
    get
  }
  public var endDate: Foundation.Date? {
    get
  }
  public var stageRaces: [MotorsportRaceProtocol]? {
    get
  }
  public var winner: D? {
    get
  }
  public var genericWinner: MotorsportDriver? {
    get
  }
  @available(*, deprecated, message: "Use contest.anyMotorsportRaceStage; Will be removed in SDK version 4.0.")
  override public var anyContest: AnyContest? {
    get
  }
  @objc deinit
}
public protocol AnyMotorsportRaceStage : AnyContestWithDetails {
  var uid: Swift.Int? { get }
  var name: Swift.String { get }
  var startDate: Foundation.Date? { get }
  var endDate: Foundation.Date? { get }
  var genericWinner: MotorsportDriver? { get }
  var stageRaces: [MotorsportRaceProtocol]? { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FormulaOneRaceStage : MotorsportRaceStage<FormulaOneDriver, FormulaOneRaceStageDetails, FormulaOneSport, FormulaOneDriverStatistics> {
  public var circuit: Circuit? {
    get
  }
  public func getPractices() -> [FormulaOneRace]?
  public func getQualifications() -> [FormulaOneRace]?
  public func getRaces() -> [FormulaOneRace]?
  @objc deinit
}
extension FormulaOneRaceStage : DetailsLoadable, RepeatingDetailsLoadable {
  public func loadDetails(with params: FormulaOneRaceStageDetailsParams, completion: @escaping (Response<FormulaOneRaceStageDetails>) -> Swift.Void)
  public func trackDetails(with params: FormulaOneRaceStageDetailsParams, completion: @escaping (RepeatingResponse<FormulaOneRaceStageDetails>) -> Swift.Void) -> RepeatingTask
  public typealias D = FormulaOneRaceStageDetails
  public typealias P = FormulaOneRaceStageDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RallyRaceStage : MotorsportRaceStage<RallyDriver, RallyRaceStageDetails, RallySport, RallyDriverStatistics> {
  @objc deinit
}
extension RallyRaceStage : DetailsLoadable {
  final public func loadDetails(with params: RallyRaceStageDetailsParams, completion: @escaping (Response<RallyRaceStageDetails>) -> Swift.Void)
  public typealias D = RallyRaceStageDetails
  public typealias P = RallyRaceStageDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class NascarRaceStage : MotorsportRaceStage<NascarDriver, NascarRaceStageDetails, NascarSport, NascarDriverStatistics> {
  @objc deinit
}
extension NascarRaceStage : DetailsLoadable {
  final public func loadDetails(with params: NascarRaceStageDetailsParams, completion: @escaping (Response<NascarRaceStageDetails>) -> Swift.Void)
  public typealias D = NascarRaceStageDetails
  public typealias P = NascarRaceStageDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class MotorbikesRaceStage : MotorsportRaceStage<MotorbikesDriver, MotorbikesRaceStageDetails, MotorbikesSport, MotorbikesDriverStatistics> {
  final public var circuit: Circuit? {
    get
  }
  @objc deinit
}
extension MotorbikesRaceStage : DetailsLoadable {
  final public func loadDetails(with params: MotorbikesRaceStageDetailsParams, completion: @escaping (Response<MotorbikesRaceStageDetails>) -> Swift.Void)
  public typealias D = MotorbikesRaceStageDetails
  public typealias P = MotorbikesRaceStageDetailsParams
}
@_hasMissingDesignatedInitializers final public class CyclingRaceStage : ContestWithDetails<CyclingRider, CyclingRaceStageDetails, CyclingDetailsCoverage, CyclingStatus, CyclingRaceScore, CyclingRacePosition, CyclingSport> {
  final public var name: Swift.String {
    get
  }
  final public var startDate: Foundation.Date? {
    get
  }
  final public var endDate: Foundation.Date? {
    get
  }
  final public var startAndFinish: CyclingEndpointLocations? {
    get
  }
  final public var winner: CyclingRider? {
    get
  }
  final public var parentSeason: CyclingSeason? {
    get
  }
  final public var parentDiscipline: CyclingStageDiscipline? {
    get
  }
  final public var stageRaces: [CyclingRace]? {
    get
  }
  @objc deinit
}
extension CyclingRaceStage : DetailsLoadable {
  final public func loadDetails(with params: CyclingRaceStageDetailsParams, completion: @escaping (Response<CyclingRaceStageDetails>) -> Swift.Void)
  public typealias D = CyclingRaceStageDetails
  public typealias P = CyclingRaceStageDetailsParams
}
@_hasMissingDesignatedInitializers final public class IceHockeyTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> IceHockeyTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> IceHockeyTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> IceHockeyTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> IceHockeyTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> IceHockeyTournamentDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BaseTennisStage : TournamentStage {
  public var ground: TennisGround {
    get
  }
  public var groundMain: Swift.String? {
    get
  }
  public var city: Swift.String? {
    get
  }
  public var country: Country? {
    get
  }
  public var qualification: Swift.Bool? {
    get
  }
  public var gender: Gender? {
    get
  }
  public var type: TennisTournamentType? {
    get
  }
  public var typeName: Swift.String {
    get
  }
  public var sets: Swift.Int? {
    get
  }
  public var startDate: Foundation.Date? {
    get
  }
  public var endDate: Foundation.Date? {
    get
  }
  public var prizeAmount: Swift.String? {
    get
  }
  public var prizeCurrency: Swift.String? {
    get
  }
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  public var details: TennisTournamentDetails? {
    get
  }
  @objc deinit
}
public enum TennisGround : Swift.Int, Swift.Codable {
  case unknown, hardoutdoor, hardindoor, clay, clayindoor, clayoutdoor, hardcourt, indoor, grass, all
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum Gender : Swift.Int, Swift.Codable {
  case male, female
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum TennisTournamentType : Swift.Int, Swift.Codable {
  case singles, doubles, mixed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum TennisRankingType : Swift.Int {
  case singles, doubles, doubleTeam, singlesRace, doublesRace
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum TennisPointType : Swift.CaseIterable {
  case point, ace, doubleFault
  public static func == (a: TennisPointType, b: TennisPointType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [TennisPointType]
  public static var allCases: [TennisPointType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class AussieRulesSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> AussieRulesSeasonDetailsParams
  @discardableResult
  final public func includeCards() -> AussieRulesSeasonDetailsParams
  @discardableResult
  final public func includeGoals() -> AussieRulesSeasonDetailsParams
  @discardableResult
  final public func includeOwnGoals() -> AussieRulesSeasonDetailsParams
  @discardableResult
  final public func includeAssists() -> AussieRulesSeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> AussieRulesSeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> AussieRulesSeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> AussieRulesSeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> AussieRulesSeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> AussieRulesSeasonDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PesapalloTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> PesapalloTeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> PesapalloTeamDetailsParams
  @discardableResult
  final public func includeSquad() -> PesapalloTeamDetailsParams
  @discardableResult
  final public func includeRoles() -> PesapalloTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> PesapalloTeamDetailsParams
  @discardableResult
  final public func includeStages() -> PesapalloTeamDetailsParams
  @discardableResult
  final public func includeManager() -> PesapalloTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> PesapalloTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> PesapalloTeamDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class WaterPoloTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> WaterPoloTeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> WaterPoloTeamDetailsParams
  @discardableResult
  final public func includeSquad() -> WaterPoloTeamDetailsParams
  @discardableResult
  final public func includeRoles() -> WaterPoloTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> WaterPoloTeamDetailsParams
  @discardableResult
  final public func includeStages() -> WaterPoloTeamDetailsParams
  @discardableResult
  final public func includeManager() -> WaterPoloTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> WaterPoloTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> WaterPoloTeamDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BandyPlayerStatistics : PlayerStatistics {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RallyController : MotorsportController<RallySport, RallyDriver, RallyDriverStatistics, RallySeason, RallyRaceStageDetails, RallyRaceStage>, GenericMotorsportController {
  final public func loadGenericSeasons(completion: @escaping (Response<[Season]>) -> Swift.Void)
  final public func loadGenericActiveSeason(completion: @escaping (Response<Season>) -> Swift.Void)
  final public func loadGenericStagesForSeason(season: Season, completion: @escaping (Response<[Contest]>) -> Swift.Void)
  final public func loadGenericLastSeasonStages(completion: @escaping (Response<[Contest]?>) -> Swift.Void)
  final public func getGenericSeason(by id: Swift.Int, completion: @escaping (Response<Season>) -> Swift.Void)
  final public func getGenericStage(by id: Swift.Int, completion: @escaping (Response<Contest>) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SnookerPlayerStatistics : PlayerStatistics {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class HandballSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeCards() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeTopGoalkeeperAssists() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeTopGoals2() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeTopShootingPercentage() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeTopAssists2() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeTopGoals7m() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeTopGoalsFastBreak() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeTopTehnicalFaults() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeTopYellowCards() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeTopPenalties() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeTopBlueCards() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeTopRedCards() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeTopGoalkeeperSaves() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeTopGoalkeeperSavesPercentage() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeTopGoalkeeperSaves7m() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeTopGoalkeeperSaves9m() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeTopGoalkeeperSavesWing() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeTopGoalkeeperPlaytimePerMatch() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeTopGoalkeeperYellowCards() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeTopGoalkeeperRedCards() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeTopGoalkeeperPenaltiesTime() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeTopMisses() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeGoals() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeOwnGoals() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeAssists() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> HandballSeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> HandballSeasonDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TennisSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> TennisSeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> TennisSeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> TennisSeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> TennisSeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> TennisSeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> TennisSeasonDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CounterStrikeDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> CounterStrikeDetailsParams
  @discardableResult
  final public func includeLiveRankingTable() -> CounterStrikeDetailsParams
  @discardableResult
  final public func includeStaff() -> CounterStrikeDetailsParams
  @discardableResult
  final public func includeEvents() -> CounterStrikeDetailsParams
  @discardableResult
  final public func includeOdds() -> CounterStrikeDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> CounterStrikeDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> CounterStrikeDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> CounterStrikeDetailsParams
  @discardableResult
  final public func includeVenue() -> CounterStrikeDetailsParams
  @discardableResult
  final public func includeAttendance() -> CounterStrikeDetailsParams
  @discardableResult
  final public func includeStatistics() -> CounterStrikeDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> CounterStrikeDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> CounterStrikeDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> CounterStrikeDetailsParams
  @discardableResult
  final public func includeCommentary() -> CounterStrikeDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> CounterStrikeDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TennisTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> TennisTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> TennisTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> TennisTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> TennisTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> TennisTournamentDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BadmintonPlayerStatistics : PlayerStatistics {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class RugbyDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> RugbyDetailsParams
  @discardableResult
  final public func includeLineups() -> RugbyDetailsParams
  @discardableResult
  final public func includeTeam1LeagueTable() -> RugbyDetailsParams
  @discardableResult
  final public func includeTeam2LeagueTable() -> RugbyDetailsParams
  @discardableResult
  final public func includeLiveRankingTable() -> RugbyDetailsParams
  @discardableResult
  final public func includeStaff() -> RugbyDetailsParams
  @discardableResult
  final public func includeEvents() -> RugbyDetailsParams
  @discardableResult
  final public func includeOdds() -> RugbyDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> RugbyDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> RugbyDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> RugbyDetailsParams
  @discardableResult
  final public func includeVenue() -> RugbyDetailsParams
  @discardableResult
  final public func includeAttendance() -> RugbyDetailsParams
  @discardableResult
  final public func includeStatistics() -> RugbyDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> RugbyDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> RugbyDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> RugbyDetailsParams
  @discardableResult
  final public func includeCommentary() -> RugbyDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> RugbyDetailsParams
  @objc deinit
}
public typealias AnySport = Sport
@_hasMissingDesignatedInitializers public class Sport : SportRadarModel {
  public var id: Swift.Int {
    get
  }
  public var name: Swift.String {
    get
  }
  public var hasLiveCoverage: Swift.Bool {
    get
  }
  @objc deinit
}
extension Sport : Swift.Equatable {
  public static func == (lhs: Sport, rhs: Sport) -> Swift.Bool
}
extension Sport : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TennisPlayerStatistics : PlayerStatistics {
  override final public var isNumberOfPlayedMatches: Swift.Bool {
    get
  }
  final public var isMatchesWon: Swift.Bool {
    get
  }
  final public var isMatchesWonPercent: Swift.Bool {
    get
  }
  final public var isMatchesLost: Swift.Bool {
    get
  }
  final public var isMatchesLostPercent: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DartsPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> DartsPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> DartsPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> DartsPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> DartsPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> DartsPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> DartsPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> DartsPlayerDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SquashDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> SquashDetailsParams
  @discardableResult
  final public func includeEvents() -> SquashDetailsParams
  @discardableResult
  final public func includeOdds() -> SquashDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> SquashDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> SquashDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> SquashDetailsParams
  @discardableResult
  final public func includeVenue() -> SquashDetailsParams
  @discardableResult
  final public func includeAttendance() -> SquashDetailsParams
  @discardableResult
  final public func includeStatistics() -> SquashDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> SquashDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> SquashDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> SquashDetailsParams
  @discardableResult
  final public func includeCommentary() -> SquashDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> SquashDetailsParams
  @objc deinit
}
public class SRSDKConfig {
  public init(appId: Swift.String, widgetUrl: Swift.String? = nil, languageCode: Swift.String? = nil, timezone: Foundation.TimeZone? = nil, shouldLog: Swift.Bool? = nil, dayOffsetLimit: Swift.Int? = nil)
  @objc deinit
}
final public class SRSDK {
  final public var isInitialized: Swift.Bool {
    get
  }
  final public var widgetUrl: Swift.String? {
    get
  }
  final public var language: Swift.String {
    get
  }
  final public var contestController: ContestController {
    get
    set
  }
  final public var tennisController: TennisController {
    get
    set
  }
  final public var formulaOneController: FormulaOneController {
    get
    set
  }
  final public var rallyController: RallyController {
    get
    set
  }
  final public var nascarController: NascarController {
    get
    set
  }
  final public var motorbikesController: MotorbikesController {
    get
    set
  }
  final public var cyclingController: CyclingController {
    get
    set
  }
  final public var contesterController: ContesterController {
    get
    set
  }
  final public var competitionController: CompetitionController {
    get
    set
  }
  final public var notificationsController: NotificationsController {
    get
    set
  }
  final public var favouritesController: FavouritesController {
    get
    set
  }
  final public var votingController: VotingController {
    get
    set
  }
  final public var feedSearchController: FeedSearchController {
    get
    set
  }
  final public var recommendationController: RecommendationController {
    get
    set
  }
  public init(config: SRSDKConfig, completion: @escaping (_ settings: Response<Swift.Dictionary<Swift.String, Swift.String>>) -> Swift.Void)
  final public func changeLanguage(langCode: Swift.String, completion: @escaping (_ success: Swift.Bool, _ newLangCode: Swift.String?) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Competition : SportRadarModel {
  public var id: Swift.Int {
    get
  }
  public var name: Swift.String {
    get
  }
  public var sport: Sport {
    get
  }
  public var parent: Competition? {
    get
  }
  @objc deinit
}
extension Competition : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: Competition, rhs: Competition) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class HandballDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> HandballDetailsParams
  @discardableResult
  final public func includeLineups() -> HandballDetailsParams
  @discardableResult
  final public func includeTeam1LeagueTable() -> HandballDetailsParams
  @discardableResult
  final public func includeTeam2LeagueTable() -> HandballDetailsParams
  @discardableResult
  final public func includeLiveRankingTable() -> HandballDetailsParams
  @discardableResult
  final public func includeStaff() -> HandballDetailsParams
  @discardableResult
  final public func includeEvents() -> HandballDetailsParams
  @discardableResult
  final public func includeOdds() -> HandballDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> HandballDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> HandballDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> HandballDetailsParams
  @discardableResult
  final public func includeVenue() -> HandballDetailsParams
  @discardableResult
  final public func includeAttendance() -> HandballDetailsParams
  @discardableResult
  final public func includeStatistics() -> HandballDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> HandballDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> HandballDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> HandballDetailsParams
  @discardableResult
  final public func includeCommentary() -> HandballDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> HandballDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class IceHockeySeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> IceHockeySeasonDetailsParams
  @discardableResult
  final public func includeTeamStatistics() -> IceHockeySeasonDetailsParams
  @discardableResult
  final public func includePlayerStats() -> IceHockeySeasonDetailsParams
  @discardableResult
  final public func includeGoals() -> IceHockeySeasonDetailsParams
  @discardableResult
  final public func includeOwnGoals() -> IceHockeySeasonDetailsParams
  @discardableResult
  final public func includeAssists() -> IceHockeySeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> IceHockeySeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> IceHockeySeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> IceHockeySeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> IceHockeySeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> IceHockeySeasonDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Category : Competition {
  public var country: Country? {
    get
  }
  @objc deinit
}
public protocol Unmarshaling : ValueType {
  associatedtype ConvertibleType = Self
  init(object: MarshaledObject) throws
}
extension Unmarshaling {
  public static func value(from object: Any) throws -> Self.ConvertibleType
}
@_hasMissingDesignatedInitializers final public class DartsSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> DartsSeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> DartsSeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> DartsSeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> DartsSeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> DartsSeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> DartsSeasonDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class IceHockeyTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> IceHockeyTeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> IceHockeyTeamDetailsParams
  @discardableResult
  final public func includeSquad() -> IceHockeyTeamDetailsParams
  @discardableResult
  final public func includeRoles() -> IceHockeyTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> IceHockeyTeamDetailsParams
  @discardableResult
  final public func includeStages() -> IceHockeyTeamDetailsParams
  @discardableResult
  final public func includeManager() -> IceHockeyTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> IceHockeyTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> IceHockeyTeamDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class WaterPoloDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> WaterPoloDetailsParams
  @discardableResult
  final public func includeLineups() -> WaterPoloDetailsParams
  @discardableResult
  final public func includeTeam1LeagueTable() -> WaterPoloDetailsParams
  @discardableResult
  final public func includeTeam2LeagueTable() -> WaterPoloDetailsParams
  @discardableResult
  final public func includeLiveRankingTable() -> WaterPoloDetailsParams
  @discardableResult
  final public func includeStaff() -> WaterPoloDetailsParams
  @discardableResult
  final public func includeEvents() -> WaterPoloDetailsParams
  @discardableResult
  final public func includeOdds() -> WaterPoloDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> WaterPoloDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> WaterPoloDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> WaterPoloDetailsParams
  @discardableResult
  final public func includeVenue() -> WaterPoloDetailsParams
  @discardableResult
  final public func includeAttendance() -> WaterPoloDetailsParams
  @discardableResult
  final public func includeStatistics() -> WaterPoloDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> WaterPoloDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> WaterPoloDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> WaterPoloDetailsParams
  @discardableResult
  final public func includeCommentary() -> WaterPoloDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> WaterPoloDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AussieRulesTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> AussieRulesTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> AussieRulesTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> AussieRulesTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> AussieRulesTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> AussieRulesTournamentDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TeamPlayer : Player, DetailsLoadableGeneric {
  public var id: Swift.Int {
    get
  }
  public var uid: Swift.Int {
    get
  }
  public var name: Swift.String {
    get
  }
  public var surname: Swift.String? {
    get
  }
  public var abbr: Swift.String? {
    get
  }
  public var sport: AnySport {
    get
  }
  public var fullname: Swift.String? {
    get
  }
  public var nationality: Country? {
    get
  }
  public var birthDate: Foundation.Date? {
    get
  }
  public var gender: Gender? {
    get
  }
  public var weight: Swift.Int? {
    get
  }
  public var height: Swift.Int? {
    get
  }
  public var nickname: Swift.String? {
    get
  }
  public var officialType: Swift.String? {
    get
  }
  public var genericPositionTeamPlayer: AnyPositionalTeamPlayer? {
    get
  }
  public func loadGenericDetails(with params: AnyPlayerDetailsParams, completion: @escaping (Response<AnyPlayerDetails>) -> Swift.Void)
  public func playerImageURL() -> Swift.String?
  public typealias GD = AnyPlayerDetails
  public typealias GP = AnyPlayerDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TeamPlayerWithDetails<D, P> : TeamPlayer, DetailsLoadable where D : Details, P : Params {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  public var details: D? {
    get
  }
  public func loadDetails(with params: P, completion: @escaping (Response<D>) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PositionalTeamPlayer<POS, D, P> : TeamPlayerWithDetails<D, P>, AnyPositionalTeamPlayer where POS : PlayerPosition, D : Details, P : Params {
  public var position: POS? {
    get
  }
  public var shirtNumber: Swift.Int? {
    get
  }
  public var genericPosition: PlayerPosition? {
    get
  }
  @objc deinit
}
public protocol AnyPositionalTeamPlayer {
  var genericPosition: PlayerPosition? { get }
  var shirtNumber: Swift.Int? { get }
}
extension TeamPlayer : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension TeamPlayer : Swift.Equatable {
  public static func == (lhs: TeamPlayer, rhs: TeamPlayer) -> Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SoccerPlayer : PositionalTeamPlayer<SoccerPlayerPosition, SoccerPlayerDetails, SoccerPlayerDetailsParams> {
  final public var preferredFoot: PreferredFoot? {
    get
  }
  @objc deinit
}
public enum PreferredFoot {
  case left
  case right
  case both
  public static func == (a: PreferredFoot, b: PreferredFoot) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AussieRulesPlayer : PositionalTeamPlayer<AussieRulesPlayerPosition, AussieRulesPlayerDetails, AussieRulesPlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FutsalPlayer : PositionalTeamPlayer<FutsalPlayerPosition, FutsalPlayerDetails, FutsalPlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class WaterPoloPlayer : PositionalTeamPlayer<WaterPoloPlayerPosition, WaterPoloPlayerDetails, WaterPoloPlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BasketballPlayer : PositionalTeamPlayer<BasketballPlayerPosition, BasketballPlayerDetails, BasketballPlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DartsPlayer : TeamPlayerWithDetails<DartsPlayerDetails, DartsPlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SnookerPlayer : TeamPlayerWithDetails<SnookerPlayerDetails, SnookerPlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PesapalloPlayer : PositionalTeamPlayer<PesapalloPlayerPosition, PesapalloPlayerDetails, PesapalloPlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class HandballPlayer : PositionalTeamPlayer<HandballPlayerPosition, HandballPlayerDetails, HandballPlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BadmintonPlayer : TeamPlayerWithDetails<BadmintonPlayerDetails, BadmintonPlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SquashPlayer : TeamPlayerWithDetails<SquashPlayerDetails, SquashPlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TennisPlayer : TeamPlayerWithDetails<TennisPlayerDetails, TennisPlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TableTennisPlayer : TeamPlayerWithDetails<TableTennisPlayerDetails, TableTennisPlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class VolleyballPlayer : PositionalTeamPlayer<VolleyballPlayerPosition, VolleyballPlayerDetails, VolleyballPlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BeachVolleyPlayer : TeamPlayerWithDetails<BeachVolleyPlayerDetails, BeachVolleyPlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RugbyPlayer : PositionalTeamPlayer<RugbyPlayerPosition, RugbyPlayerDetails, RugbyPlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BaseballPlayer : PositionalTeamPlayer<BaseballPlayerPosition, BaseballPlayerDetails, BaseballPlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AmericanFootballPlayer : PositionalTeamPlayer<AmericanFootballPlayerPosition, AmericanFootballPlayerDetails, AmericanFootballPlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class IceHockeyPlayer : PositionalTeamPlayer<IceHockeyPlayerPosition, IceHockeyPlayerDetails, IceHockeyPlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BandyPlayer : PositionalTeamPlayer<BandyPlayerPosition, BandyPlayerDetails, BandyPlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FloorballPlayer : PositionalTeamPlayer<FloorballPlayerPosition, FloorballPlayerDetails, FloorballPlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FieldHockeyPlayer : PositionalTeamPlayer<FieldHockeyPlayerPosition, FieldHockeyPlayerDetails, FieldHockeyPlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CounterStrikePlayer : ESportsPlayer<CounterStrikePlayerDetails, CounterStrikePlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class LeagueOfLegendsPlayer : ESportsPlayer<LeagueOfLegendsPlayerDetails, LeagueOfLegendsPlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class Dota2Player : ESportsPlayer<Dota2PlayerDetails, Dota2PlayerDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SpeedwayDriver : TeamPlayerWithDetails<SpeedwayDriverDetails, SpeedwayDriverDetailsParams> {
  @objc deinit
}
public typealias ContestsResult<C> = OrderedDictionary<C, [Event]> where C : Contest
public typealias ContestsBaseResult = OrderedDictionary<Contest, [Event]>
public typealias AnyContestsResult = OrderedDictionary<AnyContest, [Event]>
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class ContestController : BaseController {
  @available(*, deprecated, message: "Use trackTodayContests(forSports:completion:); Will be removed in SDK version 4.0.")
  final public func trackTodayAnyContests(forSports filterSports: [Sport.Type]? = nil, completion: @escaping (RepeatingResponse<AnyContestsResult>) -> Swift.Void) -> RepeatingTask
  final public func trackOdds(dayOffset: Swift.Int? = nil, forSports filterSports: [Sport.Type]? = nil, completion: @escaping (RepeatingResponse<[Swift.Int : [Odds]]?>) -> Swift.Void) -> RepeatingTask
  final public func trackTodayContests(forSports filterSports: [Sport.Type]? = nil, completion: @escaping (RepeatingResponse<ContestsBaseResult>) -> Swift.Void) -> RepeatingTask
  final public func trackTodayContests<C>(_ contestType: C.Type, completion: @escaping (RepeatingResponse<ContestsResult<C>>) -> Swift.Void) -> RepeatingTask where C : Contest
  @available(*, deprecated, message: "Use loadContests(dayOffset:forSports:completion:); Will be removed in SDK version 4.0.")
  final public func loadAnyContests(dayOffset: Swift.Int, forSports filterSports: [Sport.Type]? = nil, completion: @escaping (Response<AnyContestsResult>) -> Swift.Void)
  final public func loadOdds(dayOffset: Swift.Int, forSports filterSports: [Sport.Type]? = nil, completion: @escaping (Response<[Swift.Int : [Odds]]?>) -> Swift.Void)
  final public func loadContests(dayOffset: Swift.Int, forSports filterSports: [Sport.Type]? = nil, completion: @escaping (Response<ContestsBaseResult>) -> Swift.Void)
  final public func loadContests<C>(_ contestType: C.Type, dayOffset: Swift.Int, completion: @escaping (Response<ContestsResult<C>>) -> Swift.Void) where C : Contest
  final public func loadContest<C>(_ contestType: C.Type, contestId: Swift.Int, completion: @escaping (Response<C>) -> Swift.Void) where C : Contest
  final public func getOddsComparison(contest: Contest, completion: @escaping (Response<OddsComparison>) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Coordinate {
  final public let x: Swift.Double
  final public let y: Swift.Double
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Dota2PlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> Dota2PlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> Dota2PlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> Dota2PlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> Dota2PlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> Dota2PlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> Dota2PlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> Dota2PlayerDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SoccerSport : Sport {
  override public var hasLiveCoverage: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AussieRulesSport : Sport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FutsalSport : Sport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class WaterPoloSport : Sport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BasketballSport : Sport {
  override public var hasLiveCoverage: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DartsSport : Sport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SnookerSport : Sport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IceHockeySport : Sport {
  override public var hasLiveCoverage: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BandySport : Sport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FieldHockeySport : Sport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FloorballSport : Sport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TennisSport : Sport {
  override public var hasLiveCoverage: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TableTennisSport : Sport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VolleyballSport : Sport {
  override public var hasLiveCoverage: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BeachVolleySport : Sport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RugbySport : Sport {
  override public var hasLiveCoverage: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BaseballSport : Sport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AmericanFootballSport : Sport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class HandballSport : Sport {
  override public var hasLiveCoverage: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BadmintonSport : Sport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SquashSport : Sport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CounterStrikeSport : Sport {
  override public var hasLiveCoverage: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LeagueOfLegendsSport : Sport {
  override public var hasLiveCoverage: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PesapalloSport : Sport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Dota2Sport : Sport {
  override public var hasLiveCoverage: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MotorsportSport : Sport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FormulaOneSport : Sport {
  override public var hasLiveCoverage: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RallySport : Sport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NascarSport : Sport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MotorbikesSport : Sport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MotoGPSport : MotorbikesSport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Moto2Sport : MotorbikesSport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Moto3Sport : MotorbikesSport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SuperbikeSport : MotorbikesSport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CyclingSport : Sport {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SpeedwaySport : Sport {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SnookerPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> SnookerPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> SnookerPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> SnookerPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> SnookerPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> SnookerPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> SnookerPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> SnookerPlayerDetailsParams
  @objc deinit
}
public protocol UnmarshalUpdating {
  mutating func update(with object: MarshaledObject) throws
}
@_hasMissingDesignatedInitializers public class Details {
  @objc deinit
}
public protocol AnyMotorsportRaceStageDetails {
  var genericRaces: [AnyMotorsportRace]? { get }
  var genericDrivers: [MotorsportDriver]? { get }
  var genericDriverStats: [MotorsportDriver : [MotorsportDriverStatistics]]? { get }
  var anyMotorsportTeamRaceStageDetails: AnyMotorsportTeamRaceStageDetails? { get }
  var genericStageScore: AnyRaceScore? { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MotorsportRaceStageDetails<R, D, DS> : ContestDetails, AnyMotorsportRaceStageDetails where R : MotorsportRaceProtocol, D : MotorsportDriver, DS : MotorsportDriverStatistics {
  public var races: [R]? {
    get
  }
  public var drivers: [D]? {
    get
  }
  public var driverStats: [D : [DS]]? {
    get
  }
  public var stageScores: RaceScore<D>? {
    get
  }
  public var genericRaces: [AnyMotorsportRace]? {
    get
  }
  public var genericDrivers: [MotorsportDriver]? {
    get
  }
  public var genericDriverStats: [MotorsportDriver : [MotorsportDriverStatistics]]? {
    get
  }
  public var anyMotorsportRaceStageDetails: AnyMotorsportRaceStageDetails? {
    get
  }
  public var anyMotorsportTeamRaceStageDetails: AnyMotorsportTeamRaceStageDetails? {
    get
  }
  public var genericStageScore: AnyRaceScore? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MotorsportTeamRaceStageDetails<D, DS, R, S, T, TS> : MotorsportRaceStageDetails<R, D, DS>, AnyMotorsportTeamRaceStageDetails where D : MotorsportDriver, DS : MotorsportDriverStatistics, R : MotorsportRace<S, D, DS>, S : Sport, T : Team, TS : MotorsportStatistics {
  public var race: R? {
    get
  }
  public var practices: [R]? {
    get
  }
  public var qualifications: [R]? {
    get
  }
  public var teams: [T]? {
    get
  }
  public var teamStats: [T : [TS]]? {
    get
  }
  public var genericRace: AnyMotorsportRace? {
    get
  }
  public var genericPractices: [AnyMotorsportRace]? {
    get
  }
  public var genericQualifications: [AnyMotorsportRace]? {
    get
  }
  public var genericTeams: [Team]? {
    get
  }
  public var genericTeamStats: [Team : [MotorsportStatistics]]? {
    get
  }
  @objc deinit
}
public protocol AnyMotorsportTeamRaceStageDetails {
  var genericRace: AnyMotorsportRace? { get }
  var genericPractices: [AnyMotorsportRace]? { get }
  var genericQualifications: [AnyMotorsportRace]? { get }
  var genericTeams: [Team]? { get }
  var genericTeamStats: [Team : [MotorsportStatistics]]? { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FormulaOneRaceStageDetails : MotorsportTeamRaceStageDetails<FormulaOneDriver, FormulaOneDriverStatistics, FormulaOneRace, FormulaOneSport, FormulaOneTeam, FormulaOneTeamStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RallyRaceStageDetails : MotorsportRaceStageDetails<RallyRace, RallyDriver, RallyDriverStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class NascarRaceStageDetails : MotorsportRaceStageDetails<NascarRace, NascarDriver, NascarDriverStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class MotorbikesRaceStageDetails : MotorsportTeamRaceStageDetails<MotorbikesDriver, MotorbikesDriverStatistics, MotorbikesRace, MotorbikesSport, MotorbikesTeam, MotorbikesTeamStatistics> {
  @available(*, deprecated, message: "Use property races; Will be removed in SDK version 4.0.")
  override final public var race: MotorbikesRace? {
    get
    set
  }
  @objc deinit
}
public let LocksmithDefaultService: Swift.String
public typealias PerformRequestClosureType = (_ requestReference: CoreFoundation.CFDictionary, _ result: inout Swift.AnyObject?) -> (Darwin.OSStatus)
public struct Locksmith {
  public static func loadDataForUserAccount(userAccount: Swift.String, inService service: Swift.String = LocksmithDefaultService) -> [Swift.String : Any]?
  public static func saveData(data: [Swift.String : Any], forUserAccount userAccount: Swift.String, inService service: Swift.String = LocksmithDefaultService) throws
  public static func deleteDataForUserAccount(userAccount: Swift.String, inService service: Swift.String = LocksmithDefaultService) throws
  public static func updateData(data: [Swift.String : Any], forUserAccount userAccount: Swift.String, inService service: Swift.String = LocksmithDefaultService) throws
}
public protocol SecureStorable {
  var accessible: LocksmithAccessibleOption? { get }
  var accessGroup: Swift.String? { get }
}
extension SecureStorable {
  public var accessible: LocksmithAccessibleOption? {
    get
  }
  public var accessGroup: Swift.String? {
    get
  }
  public var secureStorableBaseStoragePropertyDictionary: [Swift.String : Any] {
    get
  }
}
public protocol AccountBasedSecureStorable {
  var account: Swift.String { get }
}
public protocol AccountBasedSecureStorableResultType : AccountBasedSecureStorable, SecureStorableResultType {
}
extension AccountBasedSecureStorableResultType {
  public var account: Swift.String {
    get
  }
}
public protocol DescribableSecureStorable {
  var description: Swift.String? { get }
}
extension DescribableSecureStorable {
  public var description: Swift.String? {
    get
  }
}
public protocol DescribableSecureStorableResultType : DescribableSecureStorable, SecureStorableResultType {
}
extension DescribableSecureStorableResultType {
  public var description: Swift.String? {
    get
  }
}
public protocol CommentableSecureStorable {
  var comment: Swift.String? { get }
}
extension CommentableSecureStorable {
  public var comment: Swift.String? {
    get
  }
}
public protocol CommentableSecureStorableResultType : CommentableSecureStorable, SecureStorableResultType {
}
extension CommentableSecureStorableResultType {
  public var comment: Swift.String? {
    get
  }
}
public protocol CreatorDesignatableSecureStorable {
  var creator: Swift.UInt? { get }
}
extension CreatorDesignatableSecureStorable {
  public var creator: Swift.UInt? {
    get
  }
}
public protocol CreatorDesignatableSecureStorableResultType : CreatorDesignatableSecureStorable, SecureStorableResultType {
}
extension CreatorDesignatableSecureStorableResultType {
  public var creator: Swift.UInt? {
    get
  }
}
public protocol LabellableSecureStorable {
  var label: Swift.String? { get }
}
extension LabellableSecureStorable {
  public var label: Swift.String? {
    get
  }
}
public protocol LabellableSecureStorableResultType : LabellableSecureStorable, SecureStorableResultType {
}
extension LabellableSecureStorableResultType {
  public var label: Swift.String? {
    get
  }
}
public protocol TypeDesignatableSecureStorable {
  var type: Swift.UInt? { get }
}
extension TypeDesignatableSecureStorable {
  public var type: Swift.UInt? {
    get
  }
}
public protocol TypeDesignatableSecureStorableResultType : SecureStorableResultType, TypeDesignatableSecureStorable {
}
extension TypeDesignatableSecureStorableResultType {
  public var type: Swift.UInt? {
    get
  }
}
public protocol IsInvisibleAssignableSecureStorable {
  var isInvisible: Swift.Bool? { get }
}
extension IsInvisibleAssignableSecureStorable {
  public var isInvisible: Swift.Bool? {
    get
  }
}
public protocol IsInvisibleAssignableSecureStorableResultType : IsInvisibleAssignableSecureStorable, SecureStorableResultType {
}
extension IsInvisibleAssignableSecureStorableResultType {
  public var isInvisible: Swift.Bool? {
    get
  }
}
public protocol IsNegativeAssignableSecureStorable {
  var isNegative: Swift.Bool? { get }
}
extension IsNegativeAssignableSecureStorable {
  public var isNegative: Swift.Bool? {
    get
  }
}
public protocol IsNegativeAssignableSecureStorableResultType : IsNegativeAssignableSecureStorable, SecureStorableResultType {
}
extension IsNegativeAssignableSecureStorableResultType {
  public var isNegative: Swift.Bool? {
    get
  }
}
public protocol GenericPasswordSecureStorable : AccountBasedSecureStorable, CommentableSecureStorable, CreatorDesignatableSecureStorable, DescribableSecureStorable, IsInvisibleAssignableSecureStorable, IsNegativeAssignableSecureStorable, LabellableSecureStorable, TypeDesignatableSecureStorable {
  var service: Swift.String { get }
  var generic: Foundation.NSData? { get }
}
extension GenericPasswordSecureStorable {
  public var generic: Foundation.NSData? {
    get
  }
}
public protocol GenericPasswordSecureStorableResultType : AccountBasedSecureStorableResultType, CommentableSecureStorableResultType, CreatorDesignatableSecureStorableResultType, DescribableSecureStorableResultType, GenericPasswordSecureStorable, IsInvisibleAssignableSecureStorableResultType, IsNegativeAssignableSecureStorableResultType, LabellableSecureStorableResultType, TypeDesignatableSecureStorableResultType {
}
extension GenericPasswordSecureStorableResultType {
  public var service: Swift.String {
    get
  }
  public var generic: Foundation.NSData? {
    get
  }
}
public protocol InternetPasswordSecureStorable : AccountBasedSecureStorable, CommentableSecureStorable, CreatorDesignatableSecureStorable, DescribableSecureStorable, IsInvisibleAssignableSecureStorable, IsNegativeAssignableSecureStorable, TypeDesignatableSecureStorable {
  var server: Swift.String { get }
  var port: Swift.Int { get }
  var internetProtocol: LocksmithInternetProtocol { get }
  var authenticationType: LocksmithInternetAuthenticationType { get }
  var securityDomain: Swift.String? { get }
  var path: Swift.String? { get }
}
extension InternetPasswordSecureStorable {
  public var securityDomain: Swift.String? {
    get
  }
  public var path: Swift.String? {
    get
  }
}
public protocol InternetPasswordSecureStorableResultType : AccountBasedSecureStorableResultType, CommentableSecureStorableResultType, CreatorDesignatableSecureStorableResultType, DescribableSecureStorableResultType, IsInvisibleAssignableSecureStorableResultType, IsNegativeAssignableSecureStorableResultType, TypeDesignatableSecureStorableResultType {
}
extension InternetPasswordSecureStorableResultType {
  public var server: Swift.String {
    get
  }
  public var port: Swift.Int {
    get
  }
  public var internetProtocol: LocksmithInternetProtocol {
    get
  }
  public var authenticationType: LocksmithInternetAuthenticationType {
    get
  }
  public var securityDomain: Swift.String? {
    get
  }
  public var path: Swift.String? {
    get
  }
}
public protocol CertificateSecureStorable : SecureStorable {
}
public protocol KeySecureStorable : SecureStorable {
}
public protocol CreateableSecureStorable : SecureStorable {
  var data: [Swift.String : Any] { get }
  var performCreateRequestClosure: PerformRequestClosureType { get }
  func createInSecureStore() throws
  func updateInSecureStore() throws
}
public protocol ReadableSecureStorable : SecureStorable {
  var performReadRequestClosure: PerformRequestClosureType { get }
  func readFromSecureStore() -> SecureStorableResultType?
}
extension ReadableSecureStorable {
  public var performReadRequestClosure: PerformRequestClosureType {
    get
  }
  public func readFromSecureStore() -> SecureStorableResultType?
}
extension ReadableSecureStorable where Self : GenericPasswordSecureStorable {
  public var asReadableSecureStoragePropertyDictionary: [Swift.String : Any] {
    get
  }
}
extension ReadableSecureStorable where Self : InternetPasswordSecureStorable {
  public var asReadableSecureStoragePropertyDictionary: [Swift.String : Any] {
    get
  }
}
extension ReadableSecureStorable where Self : GenericPasswordSecureStorable {
  public func readFromSecureStore() -> GenericPasswordSecureStorableResultType?
}
extension ReadableSecureStorable where Self : InternetPasswordSecureStorable {
  public func readFromSecureStore() -> InternetPasswordSecureStorableResultType?
}
public protocol DeleteableSecureStorable : SecureStorable {
  var performDeleteRequestClosure: PerformRequestClosureType { get }
  func deleteFromSecureStore() throws
}
extension CreateableSecureStorable where Self : GenericPasswordSecureStorable {
  public var asCreateableSecureStoragePropertyDictionary: [Swift.String : Any] {
    get
  }
}
extension CreateableSecureStorable where Self : GenericPasswordSecureStorable {
  public func createInSecureStore() throws
  public func updateInSecureStore() throws
}
extension CreateableSecureStorable where Self : InternetPasswordSecureStorable {
  public var asCreateableSecureStoragePropertyDictionary: [Swift.String : Any] {
    get
  }
}
extension CreateableSecureStorable {
  public var performCreateRequestClosure: PerformRequestClosureType {
    get
  }
}
extension CreateableSecureStorable where Self : InternetPasswordSecureStorable {
  public func createInSecureStore() throws
  public func updateInSecureStore() throws
}
extension DeleteableSecureStorable {
  public var performDeleteRequestClosure: PerformRequestClosureType {
    get
  }
}
extension DeleteableSecureStorable where Self : GenericPasswordSecureStorable {
  public var asDeleteableSecureStoragePropertyDictionary: [Swift.String : Any] {
    get
  }
}
extension DeleteableSecureStorable where Self : InternetPasswordSecureStorable {
  public var asDeleteableSecureStoragePropertyDictionary: [Swift.String : Any] {
    get
  }
}
extension DeleteableSecureStorable where Self : GenericPasswordSecureStorable {
  public func deleteFromSecureStore() throws
}
extension DeleteableSecureStorable where Self : InternetPasswordSecureStorable {
  public func deleteFromSecureStore() throws
}
public protocol SecureStorableResultType : SecureStorable {
  var resultDictionary: [Swift.String : Any] { get }
  var data: [Swift.String : Any]? { get }
}
extension SecureStorableResultType {
  public var resultDictionary: [Swift.String : Any] {
    get
  }
  public var data: [Swift.String : Any]? {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BasketballPlayerStatistics : PlayerStatistics {
  final public var isFouls: Swift.Bool {
    get
  }
  final public var isPoints: Swift.Bool {
    get
  }
  final public var isRebounds: Swift.Bool {
    get
  }
  final public var isSteals: Swift.Bool {
    get
  }
  final public var isTurnovers: Swift.Bool {
    get
  }
  final public var isEfficiency: Swift.Bool {
    get
  }
  final public var isTwoPointsMade: Swift.Bool {
    get
  }
  final public var isTwoPointsAttempted: Swift.Bool {
    get
  }
  final public var isTwoPointsPercentage: Swift.Bool {
    get
  }
  final public var isThreePointsMade: Swift.Bool {
    get
  }
  final public var isThreePointsAttempted: Swift.Bool {
    get
  }
  final public var isThreePointsPercentage: Swift.Bool {
    get
  }
  final public var isFreeThrowsMade: Swift.Bool {
    get
  }
  final public var isFreeThrowsAttempted: Swift.Bool {
    get
  }
  final public var isFreeThrowsPercentage: Swift.Bool {
    get
  }
  override final public var isMinutesPlayed: Swift.Bool {
    get
  }
  final public var isFieldGoalsMade: Swift.Bool {
    get
  }
  final public var isFieldGoalsAttempted: Swift.Bool {
    get
  }
  final public var isFieldGoalsPercentage: Swift.Bool {
    get
  }
  final public var isAssists: Swift.Bool {
    get
  }
  final public var isBlocks: Swift.Bool {
    get
  }
  final public var isPersonalFouls: Swift.Bool {
    get
  }
  final public var isGamesPlayed: Swift.Bool {
    get
  }
  final public var isBlockedAttempts: Swift.Bool {
    get
  }
  final public var isDefensiveRebounds: Swift.Bool {
    get
  }
  final public var isFlagrantFouls: Swift.Bool {
    get
  }
  final public var isOffensiveRebounds: Swift.Bool {
    get
  }
  final public var isPlusMinus: Swift.Bool {
    get
  }
  final public var isTechnicalFouls: Swift.Bool {
    get
  }
  @objc deinit
}
public struct OrderedDictionary<TK, TV> where TK : Swift.Hashable {
  public var keys: [TK]
  public var values: [TK : TV]
}
@_hasMissingDesignatedInitializers final public class BeachVolleyTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BeachVolleyTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> BeachVolleyTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> BeachVolleyTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> BeachVolleyTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> BeachVolleyTournamentDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BasketballSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BasketballSeasonDetailsParams
  @discardableResult
  final public func includeAssists() -> BasketballSeasonDetailsParams
  @discardableResult
  final public func includePlayerStats() -> BasketballSeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> BasketballSeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> BasketballSeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> BasketballSeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> BasketballSeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> BasketballSeasonDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AnyPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> AnyPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> AnyPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> AnyPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> AnyPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> AnyPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> AnyPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> AnyPlayerDetailsParams
  @objc deinit
}
public func == <EC>(lhs: EC, rhs: EC) -> Swift.Bool where EC : Status
public func == <EC>(lhs: EC, rhs: EC) -> Swift.Bool where EC : Contest
public func == <EC>(lhs: EC, rhs: EC) -> Swift.Bool where EC : Statistics
@_hasMissingDesignatedInitializers final public class RugbyPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> RugbyPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> RugbyPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> RugbyPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> RugbyPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> RugbyPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> RugbyPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> RugbyPlayerDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TennisStage : BaseTennisStage {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FloorballPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> FloorballPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> FloorballPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> FloorballPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> FloorballPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> FloorballPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> FloorballPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> FloorballPlayerDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SnookerSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> SnookerSeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> SnookerSeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> SnookerSeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> SnookerSeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> SnookerSeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> SnookerSeasonDetailsParams
  @objc deinit
}
public protocol SportRadarModel {
  var id: Swift.Int { get }
}
public enum CornerSide {
  case left, right
  public static func == (a: CornerSide, b: CornerSide) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SoccerTeam : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: SoccerTeamDetails? {
    get
  }
  @objc deinit
}
extension SoccerTeam : DetailsLoadable {
  final public func loadDetails(with params: SoccerTeamDetailsParams, completion: @escaping (Response<SoccerTeamDetails>) -> Swift.Void)
  public typealias D = SoccerTeamDetails
  public typealias P = SoccerTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AussieRulesTeam : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: AussieRulesTeamDetails? {
    get
  }
  @objc deinit
}
extension AussieRulesTeam : DetailsLoadable {
  final public func loadDetails(with params: AussieRulesTeamDetailsParams, completion: @escaping (Response<AussieRulesTeamDetails>) -> Swift.Void)
  public typealias D = AussieRulesTeamDetails
  public typealias P = AussieRulesTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FutsalTeam : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: FutsalTeamDetails? {
    get
  }
  @objc deinit
}
extension FutsalTeam : DetailsLoadable {
  final public func loadDetails(with params: FutsalTeamDetailsParams, completion: @escaping (Response<FutsalTeamDetails>) -> Swift.Void)
  public typealias D = FutsalTeamDetails
  public typealias P = FutsalTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class WaterPoloTeam : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: WaterPoloTeamDetails? {
    get
  }
  @objc deinit
}
extension WaterPoloTeam : DetailsLoadable {
  final public func loadDetails(with params: WaterPoloTeamDetailsParams, completion: @escaping (Response<WaterPoloTeamDetails>) -> Swift.Void)
  public typealias D = WaterPoloTeamDetails
  public typealias P = WaterPoloTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PesapalloTeam : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: PesapalloTeamDetails? {
    get
  }
  @objc deinit
}
extension PesapalloTeam : DetailsLoadable {
  final public func loadDetails(with params: PesapalloTeamDetailsParams, completion: @escaping (Response<PesapalloTeamDetails>) -> Swift.Void)
  public typealias D = PesapalloTeamDetails
  public typealias P = PesapalloTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BasketballTeam : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: BasketballTeamDetails? {
    get
  }
  @objc deinit
}
extension BasketballTeam : DetailsLoadable {
  final public func loadDetails(with params: BasketballTeamDetailsParams, completion: @escaping (Response<BasketballTeamDetails>) -> Swift.Void)
  public typealias D = BasketballTeamDetails
  public typealias P = BasketballTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DartsTeam : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: DartsTeamDetails? {
    get
  }
  @objc deinit
}
extension DartsTeam : DetailsLoadable {
  final public func loadDetails(with params: DartsTeamDetailsParams, completion: @escaping (Response<DartsTeamDetails>) -> Swift.Void)
  public typealias D = DartsTeamDetails
  public typealias P = DartsTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SnookerTeam : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: SnookerTeamDetails? {
    get
  }
  @objc deinit
}
extension SnookerTeam : DetailsLoadable {
  final public func loadDetails(with params: SnookerTeamDetailsParams, completion: @escaping (Response<SnookerTeamDetails>) -> Swift.Void)
  public typealias D = SnookerTeamDetails
  public typealias P = SnookerTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class IceHockeyTeam : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: IceHockeyTeamDetails? {
    get
  }
  @objc deinit
}
extension IceHockeyTeam : DetailsLoadable {
  final public func loadDetails(with params: IceHockeyTeamDetailsParams, completion: @escaping (Response<IceHockeyTeamDetails>) -> Swift.Void)
  public typealias D = IceHockeyTeamDetails
  public typealias P = IceHockeyTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BandyTeam : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: BandyTeamDetails? {
    get
  }
  @objc deinit
}
extension BandyTeam : DetailsLoadable {
  final public func loadDetails(with params: BandyTeamDetailsParams, completion: @escaping (Response<BandyTeamDetails>) -> Swift.Void)
  public typealias D = BandyTeamDetails
  public typealias P = BandyTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FloorballTeam : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: FloorballTeamDetails? {
    get
  }
  @objc deinit
}
extension FloorballTeam : DetailsLoadable {
  final public func loadDetails(with params: FloorballTeamDetailsParams, completion: @escaping (Response<FloorballTeamDetails>) -> Swift.Void)
  public typealias D = FloorballTeamDetails
  public typealias P = FloorballTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FieldHockeyTeam : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: FieldHockeyTeamDetails? {
    get
  }
  @objc deinit
}
extension FieldHockeyTeam : DetailsLoadable {
  final public func loadDetails(with params: FieldHockeyTeamDetailsParams, completion: @escaping (Response<FieldHockeyTeamDetails>) -> Swift.Void)
  public typealias D = FieldHockeyTeamDetails
  public typealias P = FieldHockeyTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class HandballTeam : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: HandballTeamDetails? {
    get
  }
  @objc deinit
}
extension HandballTeam : DetailsLoadable {
  final public func loadDetails(with params: HandballTeamDetailsParams, completion: @escaping (Response<HandballTeamDetails>) -> Swift.Void)
  public typealias D = HandballTeamDetails
  public typealias P = HandballTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BadmintonTeam : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: BadmintonTeamDetails? {
    get
  }
  @objc deinit
}
extension BadmintonTeam : DetailsLoadable {
  final public func loadDetails(with params: BadmintonTeamDetailsParams, completion: @escaping (Response<BadmintonTeamDetails>) -> Swift.Void)
  public typealias D = BadmintonTeamDetails
  public typealias P = BadmintonTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SquashTeam : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: SquashTeamDetails? {
    get
  }
  @objc deinit
}
extension SquashTeam : DetailsLoadable {
  final public func loadDetails(with params: SquashTeamDetailsParams, completion: @escaping (Response<SquashTeamDetails>) -> Swift.Void)
  public typealias D = SquashTeamDetails
  public typealias P = SquashTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class VolleyballTeam : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: VolleyballTeamDetails? {
    get
  }
  @objc deinit
}
extension VolleyballTeam : DetailsLoadable {
  final public func loadDetails(with params: VolleyballTeamDetailsParams, completion: @escaping (Response<VolleyballTeamDetails>) -> Swift.Void)
  public typealias D = VolleyballTeamDetails
  public typealias P = VolleyballTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BeachVolleyTeam : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: BeachVolleyTeamDetails? {
    get
  }
  @objc deinit
}
extension BeachVolleyTeam : DetailsLoadable {
  final public func loadDetails(with params: BeachVolleyTeamDetailsParams, completion: @escaping (Response<BeachVolleyTeamDetails>) -> Swift.Void)
  public typealias D = BeachVolleyTeamDetails
  public typealias P = BeachVolleyTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RugbyTeam : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: RugbyTeamDetails? {
    get
  }
  @objc deinit
}
extension RugbyTeam : DetailsLoadable {
  final public func loadDetails(with params: RugbyTeamDetailsParams, completion: @escaping (Response<RugbyTeamDetails>) -> Swift.Void)
  public typealias D = RugbyTeamDetails
  public typealias P = RugbyTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BaseballTeam : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: BaseballTeamDetails? {
    get
  }
  @objc deinit
}
extension BaseballTeam : DetailsLoadable {
  final public func loadDetails(with params: BaseballTeamDetailsParams, completion: @escaping (Response<BaseballTeamDetails>) -> Swift.Void)
  public typealias D = BaseballTeamDetails
  public typealias P = BaseballTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AmericanFootballTeam : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: AmericanFootballTeamDetails? {
    get
  }
  @objc deinit
}
extension AmericanFootballTeam : DetailsLoadable {
  final public func loadDetails(with params: AmericanFootballTeamDetailsParams, completion: @escaping (Response<AmericanFootballTeamDetails>) -> Swift.Void)
  public typealias D = AmericanFootballTeamDetails
  public typealias P = AmericanFootballTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TableTennisTeam : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: TableTennisTeamDetails? {
    get
  }
  @objc deinit
}
extension TableTennisTeam : DetailsLoadable {
  final public func loadDetails(with params: TableTennisTeamDetailsParams, completion: @escaping (Response<TableTennisTeamDetails>) -> Swift.Void)
  public typealias D = TableTennisTeamDetails
  public typealias P = TableTennisTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CounterStrikeTeam : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: CounterStrikeTeamDetails? {
    get
  }
  @objc deinit
}
extension CounterStrikeTeam : DetailsLoadable {
  final public func loadDetails(with params: CounterStrikeTeamDetailsParams, completion: @escaping (Response<CounterStrikeTeamDetails>) -> Swift.Void)
  public typealias D = CounterStrikeTeamDetails
  public typealias P = CounterStrikeTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class LeagueOfLegendsTeam : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: LeagueOfLegendsTeamDetails? {
    get
  }
  @objc deinit
}
extension LeagueOfLegendsTeam : DetailsLoadable {
  final public func loadDetails(with params: LeagueOfLegendsTeamDetailsParams, completion: @escaping (Response<LeagueOfLegendsTeamDetails>) -> Swift.Void)
  public typealias D = LeagueOfLegendsTeamDetails
  public typealias P = LeagueOfLegendsTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class Dota2Team : Team {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  final public var details: Dota2TeamDetails? {
    get
  }
  @objc deinit
}
extension Dota2Team : DetailsLoadable {
  final public func loadDetails(with params: Dota2TeamDetailsParams, completion: @escaping (Response<Dota2TeamDetails>) -> Swift.Void)
  public typealias D = Dota2TeamDetails
  public typealias P = Dota2TeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FormulaOneTeam : Team {
  final public var parentId: Swift.Int? {
    get
  }
  final public var country: Country? {
    get
  }
  final public var currentPosition: RacePosition? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SpeedwayTeam : Team {
  final public var country: Country? {
    get
  }
  final public var currentPosition: RacePosition? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class NascarTeam : Team {
  final public var parentId: Swift.Int? {
    get
  }
  final public var country: Country? {
    get
  }
  final public var currentPosition: RacePosition? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class MotorbikesTeam : Team {
  final public var country: Country? {
    get
  }
  final public var parentId: Swift.Int? {
    get
  }
  final public var currentPosition: RacePosition? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CyclingTeam : Team {
  final public var country: Country? {
    get
  }
  final public var parentId: Swift.Int? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CyclingRider : Contester, Person, Swift.Hashable {
  public var name: Swift.String {
    get
  }
  public var abbr: Swift.String? {
    get
  }
  public var sport: AnySport {
    get
  }
  public var fullname: Swift.String? {
    get
  }
  public var nationality: Country? {
    get
  }
  public var birthDate: Foundation.Date? {
    get
  }
  public var gender: Gender? {
    get
  }
  public var nickname: Swift.String? {
    get
  }
  public var id: Swift.Int {
    get
  }
  public var parentId: Swift.Int {
    get
  }
  public var teamCountry: Country? {
    get
  }
  public var team: CyclingTeam? {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: CyclingRider, rhs: CyclingRider) -> Swift.Bool
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AmericanFootballPlayerStatistics : PlayerStatistics {
  final public var isPassingYards: Swift.Bool {
    get
  }
  final public var isRushingYards: Swift.Bool {
    get
  }
  final public var isReceivingYards: Swift.Bool {
    get
  }
  final public var isDefenseTackles: Swift.Bool {
    get
  }
  final public var isDefenseSacks: Swift.Bool {
    get
  }
  final public var isDefenseInterception: Swift.Bool {
    get
  }
  final public var isPassingAtempts: Swift.Bool {
    get
  }
  final public var isPassingCompletions: Swift.Bool {
    get
  }
  final public var isPassingTouchdowns: Swift.Bool {
    get
  }
  final public var isReceptions: Swift.Bool {
    get
  }
  final public var isReceivingTouchdown: Swift.Bool {
    get
  }
  final public var isRushingAttempts: Swift.Bool {
    get
  }
  final public var isRushingTouchdowns: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AussieRulesStatistics : MatchStatistics {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FieldHockeyStatistics : MatchStatistics {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SoccerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> SoccerDetailsParams
  @discardableResult
  final public func includeBallCoordinate() -> SoccerDetailsParams
  @discardableResult
  final public func includeTableComparison() -> SoccerDetailsParams
  @discardableResult
  final public func includeLineups() -> SoccerDetailsParams
  @discardableResult
  final public func includeTeam1LeagueTable() -> SoccerDetailsParams
  @discardableResult
  final public func includeTeam2LeagueTable() -> SoccerDetailsParams
  @discardableResult
  final public func includeLiveRankingTable() -> SoccerDetailsParams
  @discardableResult
  final public func includeStaff() -> SoccerDetailsParams
  @discardableResult
  final public func includeEvents() -> SoccerDetailsParams
  @discardableResult
  final public func includeOdds() -> SoccerDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> SoccerDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> SoccerDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> SoccerDetailsParams
  @discardableResult
  final public func includeVenue() -> SoccerDetailsParams
  @discardableResult
  final public func includeAttendance() -> SoccerDetailsParams
  @discardableResult
  final public func includeStatistics() -> SoccerDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> SoccerDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> SoccerDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> SoccerDetailsParams
  @discardableResult
  final public func includeCommentary() -> SoccerDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> SoccerDetailsParams
  @objc deinit
}
public protocol Contester : SportRadarModel {
  var name: Swift.String { get }
  var abbr: Swift.String? { get }
  var sport: AnySport { get }
}
public enum LocksmithInternetAuthenticationType : Swift.RawRepresentable {
  case ntlm, msn, dpa, rpa, httpBasic, httpDigest, htmlForm, `default`
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
public protocol MarshaledObject {
  func any(for key: KeyType) throws -> Any
  func optionalAny(for key: KeyType) -> Any?
}
extension MarshaledObject {
  public func any(for key: KeyType) throws -> Any
  public func value<A>(for key: KeyType) throws -> A where A : ValueType
  public func value<A>(for key: KeyType) throws -> A? where A : ValueType
  public func value<A>(for key: KeyType, discardingErrors: Swift.Bool = false) throws -> [A] where A : ValueType
  public func value<A>(for key: KeyType) throws -> [A?] where A : ValueType
  public func value<A>(for key: KeyType, discardingErrors: Swift.Bool = false) throws -> [A]? where A : ValueType
  public func value<A>(for key: KeyType) throws -> [A?]? where A : ValueType
  public func value<A>(for key: KeyType) throws -> [Swift.String : A] where A : ValueType
  public func value<A>(for key: KeyType) throws -> [Swift.String : A]? where A : ValueType
  public func value(for key: KeyType) throws -> [MarshalDictionary]
  public func value(for key: KeyType) throws -> [MarshalDictionary]?
  public func value(for key: KeyType) throws -> MarshalDictionary
  public func value(for key: KeyType) throws -> MarshalDictionary?
  public func value<A>(for key: KeyType) throws -> Swift.Set<A> where A : ValueType, A : Swift.Hashable
  public func value<A>(for key: KeyType) throws -> Swift.Set<A>? where A : ValueType, A : Swift.Hashable
  public func value<A>(for key: KeyType) throws -> A where A : Swift.RawRepresentable, A.RawValue : ValueType
  public func value<A>(for key: KeyType) throws -> A? where A : Swift.RawRepresentable, A.RawValue : ValueType
  public func value<A>(for key: KeyType) throws -> [A] where A : Swift.RawRepresentable, A.RawValue : ValueType
  public func value<A>(for key: KeyType) throws -> [A]? where A : Swift.RawRepresentable, A.RawValue : ValueType
  public func value<A>(for key: KeyType) throws -> Swift.Set<A> where A : Swift.Hashable, A : Swift.RawRepresentable, A.RawValue : ValueType
  public func value<A>(for key: KeyType) throws -> Swift.Set<A>? where A : Swift.Hashable, A : Swift.RawRepresentable, A.RawValue : ValueType
}
public enum ValueUnit : Swift.CaseIterable {
  case factor
  case milliseconds
  case seconds
  case minutes
  case hours
  case meters
  case count
  case index
  case percentage
  case date
  case string
  case other
  public static func == (a: ValueUnit, b: ValueUnit) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [ValueUnit]
  public static var allCases: [ValueUnit] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class StatisticsValue<T> : Swift.CustomStringConvertible where T : Swift.Equatable {
  public var value: T
  public var description: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class IntStatisticsValue : StatisticsValue<Swift.Int> {
  override final public var description: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DictStatisticsValue : StatisticsValue<[Swift.String : Swift.Float]> {
  override final public var description: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class IntArrayStatisticsValue : StatisticsValue<[Swift.Int]> {
  override final public var description: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DoubleStatisticsValue : StatisticsValue<Swift.Float> {
  override final public var description: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DateStatisticsValue : StatisticsValue<Foundation.Date> {
  override final public var description: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class StringStatisticsValue : StatisticsValue<Swift.String> {
  override final public var description: Swift.String {
    get
  }
  @objc deinit
}
public struct BestOutOfValue : Swift.Equatable {
  public let success: Swift.Int
  public let taken: Swift.Int
  public static func == (lhs: BestOutOfValue, rhs: BestOutOfValue) -> Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BestOutOfStatisticsValue : StatisticsValue<BestOutOfValue> {
  override final public var description: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class Int64StatisticsValue : StatisticsValue<Swift.Int64> {
  override final public var description: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class StatusStatisticsValue : StatisticsValue<Status> {
  override final public var description: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BandyStatistics : MatchStatistics {
  public var isPosition: Swift.Bool {
    get
  }
  public var isMatchesPlayed: Swift.Bool {
    get
  }
  public var isWins: Swift.Bool {
    get
  }
  public var isDraws: Swift.Bool {
    get
  }
  public var isLosses: Swift.Bool {
    get
  }
  public var isGoalsFor: Swift.Bool {
    get
  }
  public var isGoalsAgainst: Swift.Bool {
    get
  }
  public var isGoalDifference: Swift.Bool {
    get
  }
  public var isPoints: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FieldHockeySeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> FieldHockeySeasonDetailsParams
  @discardableResult
  final public func includeGoals() -> FieldHockeySeasonDetailsParams
  @discardableResult
  final public func includeOwnGoals() -> FieldHockeySeasonDetailsParams
  @discardableResult
  final public func includeAssists() -> FieldHockeySeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> FieldHockeySeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> FieldHockeySeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> FieldHockeySeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> FieldHockeySeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> FieldHockeySeasonDetailsParams
  @objc deinit
}
public protocol SeasonFixture {
  var groups: [SeasonFixtureGroup] { get }
  func getContestsForGroup(group: SeasonFixtureGroup) -> [Contest]?
  func getAllContests() -> [Contest]?
}
public protocol SeasonFixtureGroup {
  var name: Swift.String { get }
  var startDate: Foundation.Date { get }
  var endDate: Foundation.Date? { get }
}
@_hasMissingDesignatedInitializers final public class BaseballDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BaseballDetailsParams
  @discardableResult
  final public func includeLineups() -> BaseballDetailsParams
  @discardableResult
  final public func includeTeam1LeagueTable() -> BaseballDetailsParams
  @discardableResult
  final public func includeTeam2LeagueTable() -> BaseballDetailsParams
  @discardableResult
  final public func includeLiveRankingTable() -> BaseballDetailsParams
  @discardableResult
  final public func includeStaff() -> BaseballDetailsParams
  @discardableResult
  final public func includeEvents() -> BaseballDetailsParams
  @discardableResult
  final public func includeOdds() -> BaseballDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> BaseballDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> BaseballDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> BaseballDetailsParams
  @discardableResult
  final public func includeVenue() -> BaseballDetailsParams
  @discardableResult
  final public func includeAttendance() -> BaseballDetailsParams
  @discardableResult
  final public func includeStatistics() -> BaseballDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> BaseballDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> BaseballDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> BaseballDetailsParams
  @discardableResult
  final public func includeCommentary() -> BaseballDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> BaseballDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class LeagueOfLegendsPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> LeagueOfLegendsPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> LeagueOfLegendsPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> LeagueOfLegendsPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> LeagueOfLegendsPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> LeagueOfLegendsPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> LeagueOfLegendsPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> LeagueOfLegendsPlayerDetailsParams
  @objc deinit
}
extension PromotionRelegation : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class WaterPoloStatistics : MatchStatistics, CardsStatistics {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class WaterPoloSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> WaterPoloSeasonDetailsParams
  @discardableResult
  final public func includeCards() -> WaterPoloSeasonDetailsParams
  @discardableResult
  final public func includeGoals() -> WaterPoloSeasonDetailsParams
  @discardableResult
  final public func includeOwnGoals() -> WaterPoloSeasonDetailsParams
  @discardableResult
  final public func includeAssists() -> WaterPoloSeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> WaterPoloSeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> WaterPoloSeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> WaterPoloSeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> WaterPoloSeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> WaterPoloSeasonDetailsParams
  @objc deinit
}
public enum MonthType : Swift.Int {
  case January, February, March, April, May, June, July, August, September, October, November, December
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct Month : Swift.Hashable {
  public let type: MonthType
  public let name: Swift.String?
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: Month, rhs: Month) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TennisController : BaseController {
  final public func loadTennisCalendar(category: Category, completion: @escaping (Response<[Month : [TennisStage]]>) -> Swift.Void)
  final public func loadTennisRanking(gender: Gender, type: TennisRankingType, limit: Swift.Int, completion: @escaping (Response<[TennisTeamRank]>) -> Swift.Void)
  final public func loadTennisSurfaceRanking(gender: Gender, groundType: TennisGround, limit: Swift.Int, completion: @escaping (Response<[TennisSurfaceRank]>) -> Swift.Void)
  final public func loadTennisCompetitiors(tournament: TennisTournament, completion: @escaping (Response<[TennisTeam]>) -> Swift.Void)
  final public func loadTennisLastTournaments(team: TennisTeam, completion: @escaping (Response<[Swift.Int : [TennisStage]]>) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SquashTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> SquashTeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> SquashTeamDetailsParams
  @discardableResult
  final public func includeSquad() -> SquashTeamDetailsParams
  @discardableResult
  final public func includeRoles() -> SquashTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> SquashTeamDetailsParams
  @discardableResult
  final public func includeStages() -> SquashTeamDetailsParams
  @discardableResult
  final public func includeManager() -> SquashTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> SquashTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> SquashTeamDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FutsalDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> FutsalDetailsParams
  @discardableResult
  final public func includeBallCoordinate() -> FutsalDetailsParams
  @discardableResult
  final public func includeTableComparison() -> FutsalDetailsParams
  @discardableResult
  final public func includeLineups() -> FutsalDetailsParams
  @discardableResult
  final public func includeTeam1LeagueTable() -> FutsalDetailsParams
  @discardableResult
  final public func includeTeam2LeagueTable() -> FutsalDetailsParams
  @discardableResult
  final public func includeLiveRankingTable() -> FutsalDetailsParams
  @discardableResult
  final public func includeStaff() -> FutsalDetailsParams
  @discardableResult
  final public func includeEvents() -> FutsalDetailsParams
  @discardableResult
  final public func includeOdds() -> FutsalDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> FutsalDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> FutsalDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> FutsalDetailsParams
  @discardableResult
  final public func includeVenue() -> FutsalDetailsParams
  @discardableResult
  final public func includeAttendance() -> FutsalDetailsParams
  @discardableResult
  final public func includeStatistics() -> FutsalDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> FutsalDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> FutsalDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> FutsalDetailsParams
  @discardableResult
  final public func includeCommentary() -> FutsalDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> FutsalDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CyclingStageDisciplineDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> CyclingStageDisciplineDetailsParams
  @discardableResult
  final public func includeCompetitors() -> CyclingStageDisciplineDetailsParams
  @discardableResult
  final public func includeCompetitorStatistics() -> CyclingStageDisciplineDetailsParams
  @discardableResult
  final public func includeRaceStages() -> CyclingStageDisciplineDetailsParams
  @discardableResult
  final public func includeStageScores() -> CyclingStageDisciplineDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TeamStageDetails : Details {
  public var rankingTables: [Swift.Int : RankingTable]? {
    get
  }
  public var seasonFixtures: [Swift.Int : SeasonFixture]? {
    get
  }
  public var cupRosters: [Swift.Int : [CupRoster<Contest, Team>]]? {
    get
  }
  public var activeRankingTable: RankingTable? {
    get
  }
  public var activeFixtures: SeasonFixture? {
    get
  }
  public var activeCupRoster: [CupRoster<Contest, Team>]? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TeamStageDetailsParams : Params {
  public var seasons: [Season]
  public var forActiveSeason: Swift.Bool
  public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SoccerStageDetails : TeamStageDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AussieRulesStageDetails : TeamStageDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FutsalStageDetails : TeamStageDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class WaterPoloStageDetails : TeamStageDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BasketballStageDetails : TeamStageDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DartsStageDetails : TeamStageDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SnookerStageDetails : TeamStageDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PesapalloStageDetails : TeamStageDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class IceHockeyStageDetails : TeamStageDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BandyStageDetails : TeamStageDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FloorballStageDetails : TeamStageDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FieldHockeyStageDetails : TeamStageDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class HandballStageDetails : TeamStageDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BadmintonStageDetails : TeamStageDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SquashStageDetails : TeamStageDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class VolleyballStageDetails : TeamStageDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BeachVolleyStageDetails : TeamStageDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RugbyStageDetails : TeamStageDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BaseballStageDetails : TeamStageDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AmericanFootballStageDetails : TeamStageDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CounterStrikeStageDetails : TeamStageDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class LeagueOfLegendsStageDetails : TeamStageDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class Dota2StageDetails : TeamStageDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SpeedwayStageDetails : TeamStageDetails {
  @objc deinit
}
public struct TennisSurfaceRank {
  public let ranking: Swift.Int
  public let team: TennisTeam
  public let ground: TennisGround
  public let groundStatistics: [TennisPlayerStatistics]
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SeasonDetails<T> : Details where T : Team {
  public var fixture: SeasonFixture? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TeamSeasonDetails<T> : SeasonDetails<T>, AnySeasonDetails where T : Team {
  public var teams: [Team]? {
    get
  }
  public var rankingTables: [RankingTable]? {
    get
  }
  public var liveRankingTables: [RankingTable]? {
    get
  }
  public var cupRosters: [CupRoster<Contest, Team>]? {
    get
  }
  public var genericGoals: [AnyPlayerTeamSeasonStats]? {
    get
  }
  public var genericOwnGoals: [AnyPlayerTeamSeasonStats]? {
    get
  }
  public var genericAssists: [AnyPlayerTeamSeasonStats]? {
    get
  }
  public var genericCards: [AnyPlayerTeamSeasonStats]? {
    get
  }
  public var genericTeamStatistics: [Team : [MatchStatistics]]? {
    get
  }
  public var genericPlayerStats: [TeamPlayer : [PlayerStatistics]]? {
    get
  }
  @objc deinit
}
public protocol AnySeasonDetails {
  var teams: [Team]? { get }
  var fixture: SeasonFixture? { get }
  var rankingTables: [RankingTable]? { get }
  var liveRankingTables: [RankingTable]? { get }
  var cupRosters: [CupRoster<Contest, Team>]? { get }
  var genericGoals: [AnyPlayerTeamSeasonStats]? { get }
  var genericOwnGoals: [AnyPlayerTeamSeasonStats]? { get }
  var genericAssists: [AnyPlayerTeamSeasonStats]? { get }
  var genericCards: [AnyPlayerTeamSeasonStats]? { get }
  var genericTeamStatistics: [Team : [MatchStatistics]]? { get }
  var genericPlayerStats: [TeamPlayer : [PlayerStatistics]]? { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GoalsAssistsSeasonDetails<T, TP, PS> : TeamSeasonDetails<T>, AnyGoalsAssistsSeasonDetails where T : Team, TP : TeamPlayer, PS : PlayerStatistics {
  public var goals: [PlayerTeamSeasonStats<T, TP, PS>]? {
    get
  }
  public var ownGoals: [PlayerTeamSeasonStats<T, TP, PS>]? {
    get
  }
  public var assists: [PlayerTeamSeasonStats<T, TP, PS>]? {
    get
  }
  override public var genericGoals: [AnyPlayerTeamSeasonStats]? {
    get
  }
  override public var genericOwnGoals: [AnyPlayerTeamSeasonStats]? {
    get
  }
  override public var genericAssists: [AnyPlayerTeamSeasonStats]? {
    get
  }
  @objc deinit
}
public protocol AnyGoalsAssistsSeasonDetails {
  var genericGoals: [AnyPlayerTeamSeasonStats]? { get }
  var genericOwnGoals: [AnyPlayerTeamSeasonStats]? { get }
  var genericAssists: [AnyPlayerTeamSeasonStats]? { get }
}
public protocol SeasonCardsStatisticsDetails {
  var cards: [PlayerTeamSeasonStats<Team, TeamPlayer, PlayerStatistics>]? { get }
}
@_hasMissingDesignatedInitializers public class PlayerTeamSeasonStats<T, TP, PS> : AnyPlayerTeamSeasonStats where T : Team, TP : TeamPlayer, PS : PlayerStatistics {
  public var player: TP? {
    get
  }
  public var totalStats: [PS]? {
    get
  }
  public var teamStats: [T : [PS]]? {
    get
  }
  public var genericPlayer: TeamPlayer? {
    get
  }
  public var genericTotalStats: [PlayerStatistics]? {
    get
  }
  public var genericTeamStats: [Team : [PlayerStatistics]]? {
    get
  }
  @objc deinit
}
public protocol AnyPlayerTeamSeasonStats {
  var genericPlayer: TeamPlayer? { get }
  var genericTotalStats: [PlayerStatistics]? { get }
  var genericTeamStats: [Team : [PlayerStatistics]]? { get }
}
public protocol SeasonTeamStatisticsDetails {
  var teamStatistics: [Team : [MatchStatistics]]? { get }
}
public protocol SeasonPlayerStatisticsDetails {
  var playerStats: [TeamPlayer : [PlayerStatistics]]? { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SoccerSeasonDetails : GoalsAssistsSeasonDetails<SoccerTeam, SoccerPlayer, SoccerPlayerStatistics>, SeasonCardsStatisticsDetails, SeasonPlayerStatisticsDetails {
  final public var cards: [PlayerTeamSeasonStats<Team, TeamPlayer, PlayerStatistics>]? {
    get
  }
  final public var playerStats: [TeamPlayer : [PlayerStatistics]]? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AussieRulesSeasonDetails : GoalsAssistsSeasonDetails<AussieRulesTeam, AussieRulesPlayer, AussieRulesPlayerStatistics>, SeasonCardsStatisticsDetails {
  final public var cards: [PlayerTeamSeasonStats<Team, TeamPlayer, PlayerStatistics>]? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FutsalSeasonDetails : GoalsAssistsSeasonDetails<FutsalTeam, FutsalPlayer, FutsalPlayerStatistics>, SeasonCardsStatisticsDetails {
  final public var cards: [PlayerTeamSeasonStats<Team, TeamPlayer, PlayerStatistics>]? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class WaterPoloSeasonDetails : GoalsAssistsSeasonDetails<WaterPoloTeam, WaterPoloPlayer, WaterPoloPlayerStatistics>, SeasonCardsStatisticsDetails {
  final public var cards: [PlayerTeamSeasonStats<Team, TeamPlayer, PlayerStatistics>]? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BasketballSeasonDetails : TeamSeasonDetails<BasketballTeam>, SeasonPlayerStatisticsDetails {
  final public var assists: [PlayerTeamSeasonStats<BasketballTeam, BasketballPlayer, BasketballPlayerStatistics>]? {
    get
  }
  final public var playerStats: [TeamPlayer : [PlayerStatistics]]? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DartsSeasonDetails : TeamSeasonDetails<DartsTeam> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SnookerSeasonDetails : TeamSeasonDetails<SnookerTeam> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class IceHockeySeasonDetails : GoalsAssistsSeasonDetails<IceHockeyTeam, IceHockeyPlayer, IceHockeyPlayerStatistics>, SeasonTeamStatisticsDetails, SeasonPlayerStatisticsDetails {
  final public var teamStatistics: [Team : [MatchStatistics]]? {
    get
  }
  final public var playerStats: [TeamPlayer : [PlayerStatistics]]? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BandySeasonDetails : GoalsAssistsSeasonDetails<BandyTeam, BandyPlayer, BandyPlayerStatistics>, SeasonCardsStatisticsDetails, SeasonTeamStatisticsDetails {
  final public var teamStatistics: [Team : [MatchStatistics]]? {
    get
  }
  final public var cards: [PlayerTeamSeasonStats<Team, TeamPlayer, PlayerStatistics>]? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FloorballSeasonDetails : GoalsAssistsSeasonDetails<FloorballTeam, FloorballPlayer, FloorballPlayerStatistics>, SeasonCardsStatisticsDetails {
  final public var cards: [PlayerTeamSeasonStats<Team, TeamPlayer, PlayerStatistics>]? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FieldHockeySeasonDetails : GoalsAssistsSeasonDetails<FieldHockeyTeam, FieldHockeyPlayer, FieldHockeyPlayerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PesapalloSeasonDetails : TeamSeasonDetails<PesapalloTeam> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class HandballSeasonDetails : GoalsAssistsSeasonDetails<HandballTeam, HandballPlayer, HandballPlayerStatistics>, SeasonCardsStatisticsDetails {
  final public var cards: [PlayerTeamSeasonStats<Team, TeamPlayer, PlayerStatistics>]? {
    get
  }
  final public var goals2: [PlayerTeamSeasonStats<HandballTeam, HandballPlayer, HandballPlayerStatistics>]? {
    get
  }
  final public var shootingPercentage: [PlayerTeamSeasonStats<HandballTeam, HandballPlayer, HandballPlayerStatistics>]? {
    get
  }
  final public var assists2: [PlayerTeamSeasonStats<HandballTeam, HandballPlayer, HandballPlayerStatistics>]? {
    get
  }
  final public var goals7m: [PlayerTeamSeasonStats<HandballTeam, HandballPlayer, HandballPlayerStatistics>]? {
    get
  }
  final public var goalsFastbreak: [PlayerTeamSeasonStats<HandballTeam, HandballPlayer, HandballPlayerStatistics>]? {
    get
  }
  final public var technicalFaults: [PlayerTeamSeasonStats<HandballTeam, HandballPlayer, HandballPlayerStatistics>]? {
    get
  }
  final public var cardsYellow: [PlayerTeamSeasonStats<HandballTeam, HandballPlayer, HandballPlayerStatistics>]? {
    get
  }
  final public var penaltiesTime: [PlayerTeamSeasonStats<HandballTeam, HandballPlayer, HandballPlayerStatistics>]? {
    get
  }
  final public var cardsRed: [PlayerTeamSeasonStats<HandballTeam, HandballPlayer, HandballPlayerStatistics>]? {
    get
  }
  final public var cardsBlue: [PlayerTeamSeasonStats<HandballTeam, HandballPlayer, HandballPlayerStatistics>]? {
    get
  }
  final public var goalkeeperSaves: [PlayerTeamSeasonStats<HandballTeam, HandballPlayer, HandballPlayerStatistics>]? {
    get
  }
  final public var goalkeeperSavesPercentage: [PlayerTeamSeasonStats<HandballTeam, HandballPlayer, HandballPlayerStatistics>]? {
    get
  }
  final public var goalkeeperSaves7m: [PlayerTeamSeasonStats<HandballTeam, HandballPlayer, HandballPlayerStatistics>]? {
    get
  }
  final public var goalkeeperSaves9m: [PlayerTeamSeasonStats<HandballTeam, HandballPlayer, HandballPlayerStatistics>]? {
    get
  }
  final public var goalkeeperSavesWing: [PlayerTeamSeasonStats<HandballTeam, HandballPlayer, HandballPlayerStatistics>]? {
    get
  }
  final public var goalkeeperAssists: [PlayerTeamSeasonStats<HandballTeam, HandballPlayer, HandballPlayerStatistics>]? {
    get
  }
  final public var goalkeeperPlaytimePerMatch: [PlayerTeamSeasonStats<HandballTeam, HandballPlayer, HandballPlayerStatistics>]? {
    get
  }
  final public var goalkeeperCardsYellow: [PlayerTeamSeasonStats<HandballTeam, HandballPlayer, HandballPlayerStatistics>]? {
    get
  }
  final public var goalkeeperCardsRed: [PlayerTeamSeasonStats<HandballTeam, HandballPlayer, HandballPlayerStatistics>]? {
    get
  }
  final public var goalkeeperPenaltiesTime: [PlayerTeamSeasonStats<HandballTeam, HandballPlayer, HandballPlayerStatistics>]? {
    get
  }
  final public var misses: [PlayerTeamSeasonStats<HandballTeam, HandballPlayer, HandballPlayerStatistics>]? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BadmintonSeasonDetails : TeamSeasonDetails<BadmintonTeam> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SquashSeasonDetails : TeamSeasonDetails<SquashTeam> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class VolleyballSeasonDetails : TeamSeasonDetails<VolleyballTeam> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BeachVolleySeasonDetails : TeamSeasonDetails<BeachVolleyTeam> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RugbySeasonDetails : TeamSeasonDetails<RugbyTeam> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BaseballSeasonDetails : TeamSeasonDetails<BaseballTeam>, SeasonPlayerStatisticsDetails {
  final public var playerStats: [TeamPlayer : [PlayerStatistics]]? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AmericanFootballSeasonDetails : TeamSeasonDetails<AmericanFootballTeam> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TennisSeasonDetails : TeamSeasonDetails<TennisTeam> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TableTennisSeasonDetails : TeamSeasonDetails<TableTennisTeam> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CounterStrikeSeasonDetails : TeamSeasonDetails<CounterStrikeTeam> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class LeagueOfLegendsSeasonDetails : TeamSeasonDetails<LeagueOfLegendsTeam> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class Dota2SeasonDetails : TeamSeasonDetails<Dota2Team> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MotorsportSeasonDetails<D, DS, C> : Details, AnyMotorsportSeasonDetails where D : MotorsportDriver, DS : MotorsportDriverStatistics, C : Contest {
  public var stages: [C]? {
    get
  }
  public var drivers: [D]? {
    get
  }
  public var driverStats: [D : [DS]]? {
    get
  }
  public var genericStages: [AnyMotorsportRaceStage]? {
    get
  }
  public var genericDrivers: [MotorsportDriver]? {
    get
  }
  public var genericDriverStats: [MotorsportDriver : [MotorsportStatistics]]? {
    get
  }
  public var anyMotorsportTeamSeasonDetails: AnyMotorsportTeamSeasonDetails? {
    get
  }
  @objc deinit
}
public protocol AnyMotorsportSeasonDetails {
  var genericStages: [AnyMotorsportRaceStage]? { get }
  var genericDrivers: [MotorsportDriver]? { get }
  var genericDriverStats: [MotorsportDriver : [MotorsportStatistics]]? { get }
  var anyMotorsportTeamSeasonDetails: AnyMotorsportTeamSeasonDetails? { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MotorsportTeamSeasonDetails<D, DS, C, T, TS> : MotorsportSeasonDetails<D, DS, C>, AnyMotorsportTeamSeasonDetails where D : MotorsportDriver, DS : MotorsportDriverStatistics, C : Contest, T : Team, TS : MotorsportStatistics {
  public var teams: [T]? {
    get
  }
  public var teamStats: [T : [TS]]? {
    get
  }
  public var genericTeams: [Team]? {
    get
  }
  public var genericTeamStats: [Team : [MotorsportStatistics]]? {
    get
  }
  @objc deinit
}
public protocol AnyMotorsportTeamSeasonDetails {
  var genericTeams: [Team]? { get }
  var genericTeamStats: [Team : [MotorsportStatistics]]? { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FormulaOneSeasonDetails : MotorsportTeamSeasonDetails<FormulaOneDriver, FormulaOneDriverStatistics, FormulaOneRaceStage, FormulaOneTeam, FormulaOneTeamStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RallySeasonDetails : MotorsportSeasonDetails<RallyDriver, RallyDriverStatistics, RallyRaceStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class NascarSeasonDetails : MotorsportSeasonDetails<NascarDriver, NascarDriverStatistics, NascarRaceStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class MotorbikesSeasonDetails : MotorsportTeamSeasonDetails<MotorbikesDriver, MotorbikesDriverStatistics, MotorbikesRaceStage, MotorbikesTeam, MotorbikesTeamStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CyclingSeasonDetails : Details {
  final public var competitors: [CyclingRider]? {
    get
  }
  final public var competitorStatistics: [CyclingRider : [CyclingRiderStatistics]]? {
    get
  }
  final public var stages: [CyclingStageDiscipline]? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SpeedwaySeasonDetails : TeamSeasonDetails<SpeedwayTeam> {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FloorballSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> FloorballSeasonDetailsParams
  @discardableResult
  final public func includeCards() -> FloorballSeasonDetailsParams
  @discardableResult
  final public func includeGoals() -> FloorballSeasonDetailsParams
  @discardableResult
  final public func includeOwnGoals() -> FloorballSeasonDetailsParams
  @discardableResult
  final public func includeAssists() -> FloorballSeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> FloorballSeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> FloorballSeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> FloorballSeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> FloorballSeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> FloorballSeasonDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BasketballTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BasketballTeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> BasketballTeamDetailsParams
  @discardableResult
  final public func includeSquad() -> BasketballTeamDetailsParams
  @discardableResult
  final public func includeRoles() -> BasketballTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> BasketballTeamDetailsParams
  @discardableResult
  final public func includeStages() -> BasketballTeamDetailsParams
  @discardableResult
  final public func includeManager() -> BasketballTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> BasketballTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> BasketballTeamDetailsParams
  @objc deinit
}
public struct Comment : SportRadarModel {
  public let id: Swift.Int
  public let message: Swift.String
  public let event: Event?
}
extension Comment : Swift.Equatable {
  public static func == (lhs: Comment, rhs: Comment) -> Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CompetitionController : BaseCompetitionController {
  @objc deinit
}
public enum MotorsportStatType {
  case points
  case position
  case victories
  case fastestLapTime
  case laps
  case races
  case racesWithPoints
  case polePositions
  case podiums
  case fastestLaps
  case victoryPoleAndFastestLap
  case carNumber
  case bikeNumber
  case pitStopCount
  case grid
  case gap
  case time
  case status
  case bonusPoints
  case lapsLed
  case top5
  case top10
  public static func == (a: MotorsportStatType, b: MotorsportStatType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MotorsportStatistics : Statistics {
  public var statType: MotorsportStatType {
    get
  }
  public var isPoints: Swift.Bool {
    get
  }
  public var isVictories: Swift.Bool {
    get
  }
  public var isPosition: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MotorsportDriverStatistics : MotorsportStatistics {
  public var isRaces: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MotorsportDriverStatus : Status {
  final public let type: MotorsportDriverStatusType
  @objc deinit
}
public enum MotorsportDriverStatusType {
  case didNotStart
  case finished
  case inRace
  case mechanical
  case transmission
  case out
  case electrical
  case driveshaft
  case engine
  case brakes
  case accident
  case technical
  case oilPressure
  case gearbox
  case retired
  case didNotQualify
  case radiatorDamage
  case penalty
  case wheel
  case disqualified
  case pitStop
  case accidentDamage
  public static func == (a: MotorsportDriverStatusType, b: MotorsportDriverStatusType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class VolleyballTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> VolleyballTeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> VolleyballTeamDetailsParams
  @discardableResult
  final public func includeSquad() -> VolleyballTeamDetailsParams
  @discardableResult
  final public func includeRoles() -> VolleyballTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> VolleyballTeamDetailsParams
  @discardableResult
  final public func includeStages() -> VolleyballTeamDetailsParams
  @discardableResult
  final public func includeManager() -> VolleyballTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> VolleyballTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> VolleyballTeamDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RugbyStatistics : MatchStatistics, CardsStatistics {
  public var isTries: Swift.Bool {
    get
  }
  public var isConversations: Swift.Bool {
    get
  }
  public var isPenaltyGoals: Swift.Bool {
    get
  }
  public var isDropGoals: Swift.Bool {
    get
  }
  public var isPossession: Swift.Bool {
    get
  }
  public var isPenaltiesConceded: Swift.Bool {
    get
  }
  public var isLineouts: Swift.Bool {
    get
  }
  public var isScrums: Swift.Bool {
    get
  }
  public var isPenaltyTries: Swift.Bool {
    get
  }
  public var isTurnovers: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BadmintonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BadmintonDetailsParams
  @discardableResult
  final public func includeEvents() -> BadmintonDetailsParams
  @discardableResult
  final public func includeOdds() -> BadmintonDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> BadmintonDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> BadmintonDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> BadmintonDetailsParams
  @discardableResult
  final public func includeVenue() -> BadmintonDetailsParams
  @discardableResult
  final public func includeAttendance() -> BadmintonDetailsParams
  @discardableResult
  final public func includeStatistics() -> BadmintonDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> BadmintonDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> BadmintonDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> BadmintonDetailsParams
  @discardableResult
  final public func includeCommentary() -> BadmintonDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> BadmintonDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BeachVolleySeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BeachVolleySeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> BeachVolleySeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> BeachVolleySeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> BeachVolleySeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> BeachVolleySeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> BeachVolleySeasonDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Dota2DetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> Dota2DetailsParams
  @discardableResult
  final public func includeLiveRankingTable() -> Dota2DetailsParams
  @discardableResult
  final public func includeStaff() -> Dota2DetailsParams
  @discardableResult
  final public func includeEvents() -> Dota2DetailsParams
  @discardableResult
  final public func includeOdds() -> Dota2DetailsParams
  @discardableResult
  final public func includeMatchOdds() -> Dota2DetailsParams
  @discardableResult
  final public func includeOddsComparison() -> Dota2DetailsParams
  @discardableResult
  final public func includeLiveOdds() -> Dota2DetailsParams
  @discardableResult
  final public func includeVenue() -> Dota2DetailsParams
  @discardableResult
  final public func includeAttendance() -> Dota2DetailsParams
  @discardableResult
  final public func includeStatistics() -> Dota2DetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> Dota2DetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> Dota2DetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> Dota2DetailsParams
  @discardableResult
  final public func includeCommentary() -> Dota2DetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> Dota2DetailsParams
  @objc deinit
}
public enum MotorSportRaceType {
  case practice
  case qualification
  case race
  public static func == (a: MotorSportRaceType, b: MotorSportRaceType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol MotorsportRaceProtocol : SportRadarModel {
  var name: Swift.String { get }
  var status: MotorsportStatus? { get }
  var time: CountingContestTime? { get }
  var startTime: Foundation.Date? { get }
  var type: MotorSportRaceType? { get }
}
@_hasMissingDesignatedInitializers public class MotorsportRace<SP, D, S> : MotorsportRaceProtocol, AnyMotorsportRace where SP : Sport, D : MotorsportDriver, S : Statistics {
  public var id: Swift.Int
  public var name: Swift.String {
    get
  }
  public var status: MotorsportStatus? {
    get
  }
  public var time: CountingContestTime? {
    get
  }
  public var startTime: Foundation.Date? {
    get
  }
  public var competitors: [D]? {
    get
  }
  public var raceScores: RaceScore<D>? {
    get
  }
  public var winner: D? {
    get
  }
  public var driverStatistics: [D : [S]]? {
    get
  }
  public var type: MotorSportRaceType? {
    get
  }
  public var genericCompetitors: [MotorsportDriver]? {
    get
  }
  public var genericRaceScores: AnyRaceScore? {
    get
  }
  public var genericWinner: MotorsportDriver? {
    get
  }
  public var genericDriverStatistics: [MotorsportDriver : [Statistics]]? {
    get
  }
  public var anyMotorsportRaceWithCircut: AnyMotorsportRaceWithCircut? {
    get
  }
  @objc deinit
}
public protocol AnyMotorsportRace : MotorsportRaceProtocol {
  var genericCompetitors: [MotorsportDriver]? { get }
  var genericRaceScores: AnyRaceScore? { get }
  var genericWinner: MotorsportDriver? { get }
  var genericDriverStatistics: [MotorsportDriver : [Statistics]]? { get }
  var anyMotorsportRaceWithCircut: AnyMotorsportRaceWithCircut? { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TeamDetails<S> : Details, AnyTeamDetails where S : TournamentStage {
  public var competitions: [Competition]? {
    get
  }
  public var stages: [S]? {
    get
  }
  public var manager: Manager? {
    get
  }
  public var nextMatches: [Contest]? {
    get
  }
  public var lastMatches: [Contest]? {
    get
  }
  public var genericStages: [TournamentStage]? {
    get
  }
  public var squadTeamDetails: AnySquadTeamDetails? {
    get
  }
  @objc deinit
}
public protocol AnyTeamDetails {
  var competitions: [Competition]? { get }
  var genericStages: [TournamentStage]? { get }
  var manager: Manager? { get }
  var nextMatches: [Contest]? { get }
  var lastMatches: [Contest]? { get }
  var squadTeamDetails: AnySquadTeamDetails? { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SquadTeamDetails<P, T, K> : TeamDetails<K>, AnySquadTeamDetails where P : TeamPlayer, T : Team, K : TournamentStage {
  public var homeVenue: Venue? {
    get
  }
  public var squad: [P]? {
    get
  }
  public var roles: [P : [TeamPlayerRole<T>]]? {
    get
  }
  public var genericSquad: [TeamPlayer]? {
    get
  }
  public var genericRoles: [TeamPlayer : [AnyTeamPlayerRole]]? {
    get
  }
  @objc deinit
}
public protocol AnySquadTeamDetails : AnyTeamDetails {
  var homeVenue: Venue? { get }
  var genericSquad: [TeamPlayer]? { get }
  var genericRoles: [TeamPlayer : [AnyTeamPlayerRole]]? { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SoccerTeamDetails : SquadTeamDetails<SoccerPlayer, SoccerTeam, SoccerStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AussieRulesTeamDetails : SquadTeamDetails<AussieRulesPlayer, AussieRulesTeam, AussieRulesStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FutsalTeamDetails : SquadTeamDetails<FutsalPlayer, FutsalTeam, FutsalStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class WaterPoloTeamDetails : SquadTeamDetails<WaterPoloPlayer, WaterPoloTeam, WaterPoloStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BasketballTeamDetails : SquadTeamDetails<BasketballPlayer, BasketballTeam, BasketballStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DartsTeamDetails : SquadTeamDetails<DartsPlayer, DartsTeam, DartsStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SnookerTeamDetails : SquadTeamDetails<SnookerPlayer, SnookerTeam, SnookerStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class HandballTeamDetails : SquadTeamDetails<HandballPlayer, HandballTeam, HandballStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BadmintonTeamDetails : SquadTeamDetails<BadmintonPlayer, BadmintonTeam, BadmintonStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SquashTeamDetails : SquadTeamDetails<SquashPlayer, SquashTeam, SquashStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class VolleyballTeamDetails : SquadTeamDetails<VolleyballPlayer, VolleyballTeam, VolleyballStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BeachVolleyTeamDetails : SquadTeamDetails<BeachVolleyPlayer, BeachVolleyTeam, BeachVolleyStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RugbyTeamDetails : SquadTeamDetails<RugbyPlayer, RugbyTeam, RugbyStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BaseballTeamDetails : SquadTeamDetails<BaseballPlayer, BaseballTeam, BaseballStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AmericanFootballTeamDetails : SquadTeamDetails<AmericanFootballPlayer, AmericanFootballTeam, AmericanFootballStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TennisTeamDetails : TeamDetails<TennisStage>, TennisTeamPlayerDetailsProtocol {
  final public var yearTurnedPro: Swift.Int? {
    get
  }
  final public var birthDate: Foundation.Date? {
    get
  }
  final public var nationality: Country? {
    get
  }
  final public var height: Swift.Int? {
    get
  }
  final public var weight: Swift.Int? {
    get
  }
  final public var favouriteSurface: TennisGround? {
    get
  }
  final public var highestSinglesRanking: TennisRanking? {
    get
  }
  final public var highestDoublesRanking: TennisRanking? {
    get
  }
  final public var preferredHand: PreferredHand? {
    get
  }
  final public var ageTurnedPro: Swift.Int? {
    get
  }
  final public var ageStarted: Swift.Int? {
    get
  }
  final public var groundStats: [TennisGround : [TennisPlayerStatistics]]? {
    get
  }
  final public var singlesRanking: TennisTeamRank? {
    get
  }
  final public var doublesRanking: TennisTeamRank? {
    get
  }
  final public var singlesSurfaceStats: [Swift.Int : [TennisGround : [TennisPlayerStatistics]]]? {
    get
  }
  final public var doublesSurfaceStats: [Swift.Int : [TennisGround : [TennisPlayerStatistics]]]? {
    get
  }
  final public var mixedSurfaceStats: [Swift.Int : [TennisGround : [TennisPlayerStatistics]]]? {
    get
  }
  final public var singlesRankingByYear: [Swift.Int : Swift.Int]? {
    get
  }
  final public var doublesRankingByYear: [Swift.Int : Swift.Int]? {
    get
  }
  final public var mixedRankingByYear: [Swift.Int : Swift.Int]? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TableTennisTeamDetails : TeamDetails<TournamentStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PesapalloTeamDetails : SquadTeamDetails<PesapalloPlayer, PesapalloTeam, PesapalloStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class IceHockeyTeamDetails : SquadTeamDetails<IceHockeyPlayer, IceHockeyTeam, IceHockeyStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BandyTeamDetails : SquadTeamDetails<BandyPlayer, BandyTeam, BandyStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FloorballTeamDetails : SquadTeamDetails<FloorballPlayer, FloorballTeam, FloorballStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FieldHockeyTeamDetails : SquadTeamDetails<FieldHockeyPlayer, FieldHockeyTeam, FieldHockeyStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CounterStrikeTeamDetails : SquadTeamDetails<CounterStrikePlayer, CounterStrikeTeam, CounterStrikeStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class LeagueOfLegendsTeamDetails : SquadTeamDetails<LeagueOfLegendsPlayer, LeagueOfLegendsTeam, LeagueOfLegendsStage> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class Dota2TeamDetails : SquadTeamDetails<Dota2Player, Dota2Team, Dota2Stage> {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SnookerTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> SnookerTeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> SnookerTeamDetailsParams
  @discardableResult
  final public func includeSquad() -> SnookerTeamDetailsParams
  @discardableResult
  final public func includeRoles() -> SnookerTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> SnookerTeamDetailsParams
  @discardableResult
  final public func includeStages() -> SnookerTeamDetailsParams
  @discardableResult
  final public func includeManager() -> SnookerTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> SnookerTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> SnookerTeamDetailsParams
  @objc deinit
}
public enum CyclingStatType {
  case sprint
  case sprintRanking
  case climber
  case climberRanking
  case time
  case timeRanking
  case youngRider
  case youngRiderRanking
  public static func == (a: CyclingStatType, b: CyclingStatType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class CyclingStatistics : Statistics {
  public var type: CyclingStatType
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CyclingRiderStatistics : CyclingStatistics {
  final public var isSprint: Swift.Bool {
    get
  }
  final public var isSprintRanking: Swift.Bool {
    get
  }
  final public var isClimber: Swift.Bool {
    get
  }
  final public var isClimberRanking: Swift.Bool {
    get
  }
  final public var isTime: Swift.Bool {
    get
  }
  final public var isTimeRanking: Swift.Bool {
    get
  }
  final public var isYoungRider: Swift.Bool {
    get
  }
  final public var isYoungRiderRanking: Swift.Bool {
    get
  }
  @objc deinit
}
public enum PlayerStatTypeId : Swift.CaseIterable {
  case yellowCards
  case blueCards
  case yellowRedCards
  case redCards
  case goals
  case assists
  case penalties
  case shotsOnGoal
  case shotsOffGoal
  case shotsBlocked
  case goalByFoot
  case corners
  case offsides
  case goalByHead
  case substitutedIn
  case firstGoals
  case lastGoals
  case matchesDrawn
  case matchesLost
  case matchesWon
  case numberOfCardsInFirstHalf
  case numberOfCardsInSecondHalf
  case ownGoals
  case substitutedOut
  case totalShots
  case goalsByHeader
  case goalPoints
  case teamScored
  case teamConceded
  case points
  case rebounds
  case steals
  case turnovers
  case efficiency
  case twoPointsMade
  case twoPointsAttempted
  case twoPointsPercentage
  case threePointsMade
  case threePointsAttempted
  case threePointsPercentage
  case freeThrowsMade
  case freeThrowsAttempted
  case freeThrowsPercentage
  case minutesPlayed
  case fieldGoalsMade
  case fieldGoalsAttempted
  case fieldGoalsPercentage
  case blocks
  case personalFouls
  case gamesPlayed
  case blockedAttempts
  case defensiveRebounds
  case flagrantFouls
  case offensiveRebounds
  case plusMinus
  case technicalFouls
  case numberOfCardsFirstHalf
  case numberOfCardsSecondHalf
  case technicalFaults
  case saves
  case penaltySaves
  case suspension
  case disciplinaries
  case nineMeterShots
  case fieldThrows
  case fieldGoals
  case goals6Meter
  case throws6Meter
  case goalkeeperThrowsAgainst
  case goalkeeperSevenMeterThrowsAgainst
  case goalkeeperGoals
  case goalkeeperSevenMeterGoals
  case goalkeeperSixMeterGoals
  case goalkeeperNineMeterGoals
  case goalkeeperNineMeterSaves
  case goalkeeperWingGoals
  case goalkeeperWingSaves
  case goalkeeperPivotGoals
  case goalkeeperFastbreakGoals
  case goalkeeperFastbreakSaves
  case goalkeeperFieldSaves
  case goalkeeperSixMeterSaves
  case goalkeeperPivotSaves
  case numberOfPlayedMatches
  case matchesWonPercent
  case matchesLostPercent
  case totalTimeOnIce
  case penaltyMinutes
  case faceoffsWon
  case faceoffsLost
  case hits
  case blockedShots
  case numberOfShifts
  case timeOnIceShifts
  case giveaways
  case takeaways
  case powerplayGoals
  case shortHandedGoals
  case shootingPercentage
  case faceoffWinningPercentage
  case timeOnIceShiftsPerMatch
  case timeOnIcePerMatch
  case shootoutShotsOnGoal
  case averageTimeOnIce
  case penaltyGoals
  case passingYards
  case rushingYards
  case receivingYards
  case defenseTackles
  case defenseSacks
  case defenseInterception
  case passingAtempts
  case passingCompletions
  case passingTouchdowns
  case receptions
  case receivingTouchdown
  case rushingAttempts
  case rushingTouchdowns
  case tries
  case conversions
  case dropGoals
  case possession
  case penaltiesConceded
  case lineouts
  case scrums
  case penaltyTries
  case thrown180
  case thrown140Plus
  case thrown100Plus
  case highestCheckout
  case checkouts100Plus
  case checkoutsPercentage
  case allDartsAverage
  case fieldingGamesPlayed
  case fieldingGamesStarted
  case fieldingTotalChances
  case fieldingPutouts
  case fieldingAssists
  case fieldingErrorsTotal
  case fieldingDoublePlays
  case fieldingPassedBalls
  case fieldingWildPitchesWhileCatching
  case fieldingPercentage
  case fieldingRangeFactor
  case fieldingTriplePlays
  case fieldingErrorsThrowing
  case fieldingErrorsFielding
  case fieldingErrorsInterference
  case hittingGamesPlayed
  case hittingGamesStarted
  case hittingAtBats
  case hittingPlateAppearances
  case hittingTotalRunsScored
  case hittingHits
  case hittingDoubles
  case hittingTriples
  case hittingHomeRuns
  case hittingRunsBattedIn
  case hittingWalks
  case hittingTotalStrikeouts
  case hittingStolenBases
  case hittingCaughtStealing
  case hittingBattingAverage
  case hittingOnBasePercentage
  case hittingSluggingPercentage
  case hittingOnBasePercentagePlusSlugging
  case hittingIsolatedPower
  case hittingBattingAverageOnBallsInPlay
  case hittingWalksPerStrikeout
  case hittingGroundBallToFlyBallRatio
  case hittingExtraBaseHits
  case hittingAtBatsPerHomeRun
  case hittingAtBatsWithRunnersInScoringPosition
  case hittingHitsWithRunnersInScoringPosition
  case hittingGroundBallsIntoDoublePlay
  case hittingPickedOff
  case hittingRunnersOnBaseWithTwoOuts
  case hittingRunsBattedInWithTwoOuts
  case hittingTeamRunnersLeftOnBase
  case hittingTotalBases
  case pitchingOverallGamesPlayed
  case pitchingOverallGamesStarted
  case pitchingOverallWins
  case pitchingOverallLosses
  case pitchingOverallEarnedRunAverage
  case pitchingOverallHolds
  case pitchingOverallSaves
  case pitchingOverallSaveOpportunities
  case pitchingOverallInningsPitched
  case pitchingOverallHitsAllowed
  case pitchingOverallTotalRunsAllowed
  case pitchingOverallEarnedRunsAllowed
  case pitchingOverallHomeRunsAllowed
  case pitchingOverallWalks
  case pitchingOverallTotalStrikeouts
  case pitchingOverallOpponentsBattingAverage
  case pitchingOverallWalksPlusHitsPerInningsPitched
  case pitchingOverallStrikeoutsPer9Innings
  case pitchingOverallStrikeoutsPerWalk
  case pitchingOverallGroundBallToFlyBallRatio
  case pitchingOverallQualityStarts
  case pitchingOverallCompleteGames
  case pitchingOverallShutouts
  case pitchingOverallBattersFaced
  case pitchingOverallBlownSaves
  case pitchingOverallFlyOuts
  case pitchingOverallGroundOuts
  case pitchingOverallHitBatters
  case pitchingOverallIntentionalWalks
  case pitchingOverallPitchCount
  case pitchingOverallTotalStrikes
  case lastEvent
  case penaltyFailCount
  case penaltySuccessCount
  case active
  case started
  case teamMatches
  case fouls
  case goalkeeperBackcourtSaves
  case goalkeeperBackcourtGoals
  case nineMeterGoals
  case backcourtGoals
  case backcourtShots
  case unknown
  case goaltendingShootoutShotsAgainst
  case goaltendingShootoutGoalsAgainst
  case goaltendingShootoutSaves
  case missedShots
  case overtimeGoals
  case winningGoals
  case powerPlayShotsOnGoal
  case powerPlayAssists
  case shortHandedShotsOnGoal
  case shortHandedAssists
  case shootoutGoals
  case goaltendingTotalWins
  case goaltendingTotalLosses
  case goaltendingPowerPlayShotsAgainst
  case goaltendingPowerPlayGoalsAgainst
  case goaltendingPowerPlaySaves
  case goaltendingShortHandedShotsAgainst
  case goaltendingShortHandedSaves
  case shootoutAttempts
  case emptyNetGoals
  case errors
  case atBatsPerStrikeout
  case runnersLeftOnBase
  case ballsInPlay
  case walksPerPlateAppearance
  case secondaryAverage
  case pitchesFaced
  case lineDrive
  case flyBall
  case popUp
  case groundBall
  case singles
  case intentionalWalks
  case hitByPitch
  case fieldersChoice
  case reachedOnError
  case cycles
  case strikesLooking
  case strikesSwinging
  case totalStrikes
  case balls
  case intentionalBallsTaken
  case dirtBallsFaced
  case foulBalls
  case popOuts
  case flyOuts
  case flyOutsIntoDoublePlays
  case lineOut
  case lineOutInDoublePlay
  case groundOuts
  case strikeoutsLooking
  case strikeoutsSwinging
  case sacrificeFlys
  case sacrificeHits
  case stolenBasePercentage
  case overallOpponentsRunnersLeftOnBase
  case overallWildPitches
  case overallInningsPitchedFormatted
  case overallSinglesAllowed
  case overallDoublesAllowed
  case overallTriplesAllowed
  case overallTotalBasesAllowed
  case overallFieldersChoiceAllowed
  case overallReachedOnErrorAllowed
  case overallUnearnedRunsAllowed
  case overallStrikesLooking
  case overallBalls
  case overallIntentionalBalls
  case overallDirtBalls
  case overallFoulBalls
  case overallPopOuts
  case overallFlyOutsIntoDoublePlays
  case overallLineOuts
  case overallLineOutsInDoublePlays
  case overallGroundOutsIntoDoublePlays
  case overallStrikeoutsLooking
  case overallStrikeoutsSwinging
  case overallSacrififceFlys
  case overallSacrificeHits
  case overallPickoff
  case overallRunnersCaughtStealing
  case overallStolenBasesAllowed
  case overallBalks
  case overallStrikesSwinging
  case completeGames
  case gamesFinished
  case overallGamesTeamLoss
  case overallGamesTeamWin
  case overallGamesFinished
  case gamesStarted
  case primaryAssists
  case secondaryAssists
  case shorthandedTimeOnIce
  case goaltenderDecision
  case fastbreakGoals
  case savedPercentage
  case shirtNumber
  public static func == (a: PlayerStatTypeId, b: PlayerStatTypeId) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PlayerStatTypeId]
  public static var allCases: [PlayerStatTypeId] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class SoccerPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> SoccerPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> SoccerPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> SoccerPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> SoccerPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> SoccerPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> SoccerPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> SoccerPlayerDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Season : Competition, DetailsLoadableGeneric {
  public var startDate: Foundation.Date? {
    get
  }
  public var endDate: Foundation.Date? {
    get
  }
  public var isActive: Swift.Bool {
    get
  }
  public func loadGenericDetails(with params: AnySeasonDetailsParams, completion: @escaping (Response<AnySeasonDetails>) -> Swift.Void)
  public func loadGenericMotorsportDetails(with params: AnyMotorsportSeasonDetailsParams, completion: @escaping (Response<AnyMotorsportSeasonDetails>) -> Swift.Void)
  public typealias GD = AnySeasonDetails
  public typealias GP = AnySeasonDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SeasonWithDetails<D, P> : Season, DetailsLoadable where D : Details, P : Params {
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  public var details: D? {
    get
  }
  public func loadDetails(with params: P, completion: @escaping (Response<D>) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SoccerSeason : SeasonWithDetails<SoccerSeasonDetails, SoccerSeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AussieRulesSeason : SeasonWithDetails<AussieRulesSeasonDetails, AussieRulesSeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FutsalSeason : SeasonWithDetails<FutsalSeasonDetails, FutsalSeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class WaterPoloSeason : SeasonWithDetails<WaterPoloSeasonDetails, WaterPoloSeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PesapalloSeason : SeasonWithDetails<PesapalloSeasonDetails, PesapalloSeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TennisSeason : SeasonWithDetails<TennisSeasonDetails, TennisSeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TableTennisSeason : SeasonWithDetails<TableTennisSeasonDetails, TableTennisSeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BasketballSeason : SeasonWithDetails<BasketballSeasonDetails, BasketballSeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DartsSeason : SeasonWithDetails<DartsSeasonDetails, DartsSeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SnookerSeason : SeasonWithDetails<SnookerSeasonDetails, SnookerSeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class IceHockeySeason : SeasonWithDetails<IceHockeySeasonDetails, IceHockeySeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BandySeason : SeasonWithDetails<BandySeasonDetails, BandySeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FloorballSeason : SeasonWithDetails<FloorballSeasonDetails, FloorballSeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FieldHockeySeason : SeasonWithDetails<FieldHockeySeasonDetails, FieldHockeySeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class HandballSeason : SeasonWithDetails<HandballSeasonDetails, HandballSeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BadmintonSeason : SeasonWithDetails<BadmintonSeasonDetails, BadmintonSeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SquashSeason : SeasonWithDetails<SquashSeasonDetails, SquashSeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class VolleyballSeason : SeasonWithDetails<VolleyballSeasonDetails, VolleyballSeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BeachVolleySeason : SeasonWithDetails<BeachVolleySeasonDetails, BeachVolleySeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RugbySeason : SeasonWithDetails<RugbySeasonDetails, RugbySeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BaseballSeason : SeasonWithDetails<BaseballSeasonDetails, BaseballSeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AmericanFootballSeason : SeasonWithDetails<AmericanFootballSeasonDetails, AmericanFootballSeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CounterStrikeSeason : SeasonWithDetails<CounterStrikeSeasonDetails, CounterStrikeSeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class LeagueOfLegendsSeason : SeasonWithDetails<LeagueOfLegendsSeasonDetails, LeagueOfLegendsSeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class Dota2Season : SeasonWithDetails<Dota2SeasonDetails, Dota2SeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MotorsportSeason<MD, D, P> : SeasonWithDetails<D, P>, AnyMotorsportSeason where MD : MotorsportDriver, D : Details, P : Params {
  public var winner: MD? {
    get
  }
  public var status: MotorsportSeasonStatus? {
    get
  }
  public var genericWinner: MotorsportDriver? {
    get
  }
  @objc deinit
}
public protocol AnyMotorsportSeason {
  var genericWinner: MotorsportDriver? { get }
  var status: MotorsportSeasonStatus? { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FormulaOneSeason : MotorsportSeason<FormulaOneDriver, FormulaOneSeasonDetails, FormulaOneSeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RallySeason : MotorsportSeason<RallyDriver, RallySeasonDetails, RallySeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class NascarSeason : MotorsportSeason<NascarDriver, NascarSeasonDetails, NascarSeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class MotorbikesSeason : MotorsportSeason<MotorbikesDriver, MotorbikesSeasonDetails, MotorbikesSeasonDetailsParams> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CyclingSeason : SeasonWithDetails<CyclingSeasonDetails, CyclingSeasonDetailsParams> {
  final public var status: CyclingSeasonStatus? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SpeedwaySeason : SeasonWithDetails<SpeedwaySeasonDetails, SpeedwaySeasonDetailsParams> {
  final public var status: SpeedwaySeasonStatus? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DartsTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> DartsTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> DartsTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> DartsTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> DartsTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> DartsTournamentDetailsParams
  @objc deinit
}
public protocol KeyType {
  var stringValue: Swift.String { get }
}
extension Swift.String : KeyType {
  public var stringValue: Swift.String {
    get
  }
}
public enum StageTypeValue : Swift.Int {
  case qualifications
  case groupPhase
  case finalPhase
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class TournamentStage : SportRadarModel, NotificationSubscribable {
  public var id: Swift.Int {
    get
  }
  public var name: Swift.String {
    get
  }
  public var sport: Sport {
    get
  }
  public var parent: Competition? {
    get
  }
  public var sportId: Swift.Int {
    get
  }
  public var subscriptionType: SubscriptionTag {
    get
  }
  public var stageType: TournamentStage.StageType? {
    get
  }
  public var activeSeasonId: Swift.Int? {
    get
  }
  public var currentRound: Swift.Int? {
    get
  }
  public var isOutdated: Swift.Bool {
    get
  }
  public var groupName: Swift.String? {
    get
  }
  public var hasCupRounds: Swift.Bool? {
    get
  }
  public struct StageType {
    public var name: Swift.String {
      get
    }
    public var type: StageTypeValue {
      get
    }
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SoccerStage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AussieRulesStage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FutsalStage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class WaterPoloStage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PesapalloStage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BasketballStage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DartsStage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SnookerStage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class IceHockeyStage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BandyStage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FloorballStage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FieldHockeyStage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class HandballStage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BadmintonStage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SquashStage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class VolleyballStage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BeachVolleyStage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RugbyStage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BaseballStage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AmericanFootballStage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CounterStrikeStage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class LeagueOfLegendsStage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class Dota2Stage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SpeedwayStage : TournamentStage {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SpeedwayStatistics : MatchStatistics {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MotorsportRaceWithCircut<SP, D, S> : MotorsportRace<SP, D, S>, AnyMotorsportRaceWithCircut where SP : Sport, D : MotorsportDriver, S : Statistics {
  public var weatherInfo: RaceWeatherInfo? {
    get
  }
  public var circuit: Circuit? {
    get
  }
  public var laps: Statistics? {
    get
  }
  public var lapsCompleted: Statistics? {
    get
  }
  @objc deinit
}
public protocol AnyMotorsportRaceWithCircut : AnyMotorsportRace {
  var weatherInfo: RaceWeatherInfo? { get }
  var circuit: Circuit? { get }
  var laps: Statistics? { get }
  var lapsCompleted: Statistics? { get }
}
public struct RaceWeatherInfo {
  public let airTemperature: Swift.Int?
  public let trackTemperature: Swift.Int?
  public let humidity: Swift.Int?
  public let weather: Swift.String?
}
public enum MarshalError : Swift.Error, Swift.CustomStringConvertible {
  case keyNotFound(key: KeyType)
  case nullValue(key: KeyType)
  case typeMismatch(expected: Any, actual: Any)
  case typeMismatchWithKey(key: KeyType, expected: Any, actual: Any)
  public var description: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class DartsTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> DartsTeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> DartsTeamDetailsParams
  @discardableResult
  final public func includeSquad() -> DartsTeamDetailsParams
  @discardableResult
  final public func includeRoles() -> DartsTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> DartsTeamDetailsParams
  @discardableResult
  final public func includeStages() -> DartsTeamDetailsParams
  @discardableResult
  final public func includeManager() -> DartsTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> DartsTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> DartsTeamDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AussieRulesPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> AussieRulesPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> AussieRulesPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> AussieRulesPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> AussieRulesPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> AussieRulesPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> AussieRulesPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> AussieRulesPlayerDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SquashTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> SquashTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> SquashTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> SquashTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> SquashTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> SquashTournamentDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CounterStrikeSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> CounterStrikeSeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> CounterStrikeSeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> CounterStrikeSeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> CounterStrikeSeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> CounterStrikeSeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> CounterStrikeSeasonDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MotorbikesRaceStageDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> MotorbikesRaceStageDetailsParams
  @discardableResult
  final public func includeRace() -> MotorbikesRaceStageDetailsParams
  @discardableResult
  final public func includePractices() -> MotorbikesRaceStageDetailsParams
  @discardableResult
  final public func includeQualifications() -> MotorbikesRaceStageDetailsParams
  @discardableResult
  final public func includeTeams() -> MotorbikesRaceStageDetailsParams
  @discardableResult
  final public func includeTeamStats() -> MotorbikesRaceStageDetailsParams
  @discardableResult
  final public func includeRaces() -> MotorbikesRaceStageDetailsParams
  @discardableResult
  final public func includeDrivers() -> MotorbikesRaceStageDetailsParams
  @discardableResult
  final public func includeDriverStats() -> MotorbikesRaceStageDetailsParams
  @discardableResult
  final public func includeStageScores() -> MotorbikesRaceStageDetailsParams
  @objc deinit
}
public struct Officials : Swift.Decodable {
  public var home: [Official]? {
    get
  }
  public var away: [Official]? {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct MatchJerseys : Swift.Decodable {
  public var home: TeamJerseys? {
    get
  }
  public var away: TeamJerseys? {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct TeamJerseys : Swift.Decodable {
  public var player: PlayerJersey? {
    get
  }
  public var gk: PlayerJersey? {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct PlayerJersey : Swift.Decodable {
  public var key: Swift.String?
  public var base: Swift.String?
  public var sleeve: Swift.String?
  public var longSleeve: Swift.String?
  public var stripes: Swift.String?
  public var horizontalStripes: Swift.String?
  public var split: Swift.String?
  public var number: Swift.String?
  public var real: Swift.Bool?
  public var type: JerseyType?
  public init(from decoder: Swift.Decoder) throws
}
public enum JerseyType : Swift.String {
  case shortSleeves, longSleeves, noSleeves
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DartsStatistics : MatchStatistics {
  public var is180Thrown: Swift.Bool {
    get
  }
  public var is140PlusThrown: Swift.Bool {
    get
  }
  public var is100PlusThrown: Swift.Bool {
    get
  }
  public var isHighestCheckout: Swift.Bool {
    get
  }
  public var isCheckouts100Plus: Swift.Bool {
    get
  }
  public var isCheckoutsPercentage: Swift.Bool {
    get
  }
  public var isAllDartsAverage: Swift.Bool {
    get
  }
  public var isFirstDartAverage: Swift.Bool {
    get
  }
  public var isSecondDartAverage: Swift.Bool {
    get
  }
  public var isThirdDartAverage: Swift.Bool {
    get
  }
  public var isAverages: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BadmintonTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BadmintonTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> BadmintonTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> BadmintonTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> BadmintonTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> BadmintonTournamentDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IceHockeyStatistics : MatchStatistics {
  public var isTimeOnIce: Swift.Bool {
    get
  }
  public var isShifts: Swift.Bool {
    get
  }
  public var isPenaltyMinutes: Swift.Bool {
    get
  }
  public var isGoaltendingTotalAverageGoalsAgainst: Swift.Bool {
    get
  }
  public var isGoaltendingTotalShutouts: Swift.Bool {
    get
  }
  public var isGoaltendingTimeOnIce: Swift.Bool {
    get
  }
  public var isFaceoffsWon: Swift.Bool {
    get
  }
  public var isFaceoffsLost: Swift.Bool {
    get
  }
  public var isGoaltendingTotalShotsAgainst: Swift.Bool {
    get
  }
  public var isPowerplayGoals: Swift.Bool {
    get
  }
  public var isShotsOnGoal: Swift.Bool {
    get
  }
  public var isFaceoffWinningPercentage: Swift.Bool {
    get
  }
  public var isPowerplayOpportunities: Swift.Bool {
    get
  }
  public var isHits: Swift.Bool {
    get
  }
  public var isBlockedShots: Swift.Bool {
    get
  }
  public var isGiveaways: Swift.Bool {
    get
  }
  public var isTakeaways: Swift.Bool {
    get
  }
  public var isGoals: Swift.Bool {
    get
  }
  public var isGoaltendingTotalGoalsAgainst: Swift.Bool {
    get
  }
  public var isGoaltendingTotalSaves: Swift.Bool {
    get
  }
  public var isGoaltendingTotalSavesPercentage: Swift.Bool {
    get
  }
  public var isShootingPercentage: Swift.Bool {
    get
  }
  public var isPoints: Swift.Bool {
    get
  }
  public var isGamesPlayed: Swift.Bool {
    get
  }
  public var isPuckPossession: Swift.Bool {
    get
  }
  public var isMaxGoals: Swift.Bool {
    get
  }
  public var isSuspensions: Swift.Bool {
    get
  }
  public var isGoalsInPowerplay: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Duplicates isShortHandedGoals; Will be removed in SDK version 4.0.")
  public var isGoalsShortHanded: Swift.Bool {
    get
  }
  public var isPowerplays: Swift.Bool {
    get
  }
  public var isPenalties: Swift.Bool {
    get
  }
  public var isSuspensionMinutes: Swift.Bool {
    get
  }
  public var isPowerPlayGoalsPercent: Swift.Bool {
    get
  }
  public var isShortHandedGoalsPercent: Swift.Bool {
    get
  }
  public var isOpponentsGoals: Swift.Bool {
    get
  }
  public var isOpponentsPowerplayGoals: Swift.Bool {
    get
  }
  public var isShotsOnGoalPerMatch: Swift.Bool {
    get
  }
  public var isShortHandedGoals: Swift.Bool {
    get
  }
  public var isGoaltendingTotalOvertimeLosses: Swift.Bool {
    get
  }
  public var isOpponentsPowerplayOpportunities: Swift.Bool {
    get
  }
  public var isOpponentsShotsOnGoalPerMatch: Swift.Bool {
    get
  }
  public var isAssists: Swift.Bool {
    get
  }
  public var isGoaltendingShootoutShotsAgainst: Swift.Bool {
    get
  }
  public var isGoaltendingShootoutGoalsAgainst: Swift.Bool {
    get
  }
  public var isGoaltendingShootoutSaves: Swift.Bool {
    get
  }
  public var isGoaltendingShootoutSavesPercentage: Swift.Bool {
    get
  }
  public var isMissedShots: Swift.Bool {
    get
  }
  public var isOvertimeGoals: Swift.Bool {
    get
  }
  public var isWinningGoals: Swift.Bool {
    get
  }
  public var isPowerPlayShotsOnGoal: Swift.Bool {
    get
  }
  public var isPowerPlayAssists: Swift.Bool {
    get
  }
  public var isPowerPlayFaceoffs: Swift.Bool {
    get
  }
  public var isPowerPlayFaceoffsWon: Swift.Bool {
    get
  }
  public var isPowerPlayFaceoffsLost: Swift.Bool {
    get
  }
  public var isShortHandedShotsOnGoal: Swift.Bool {
    get
  }
  public var isShortHandedAssists: Swift.Bool {
    get
  }
  public var isShortHandedFaceoffs: Swift.Bool {
    get
  }
  public var isShortHandedFaceoffsWon: Swift.Bool {
    get
  }
  public var isShortHandedFaceoffsLost: Swift.Bool {
    get
  }
  public var isEvenStrengthShotsOnGoal: Swift.Bool {
    get
  }
  public var isEvenStrengthGoals: Swift.Bool {
    get
  }
  public var isEvenStrengthAssists: Swift.Bool {
    get
  }
  public var isEvenStrengthFaceoffs: Swift.Bool {
    get
  }
  public var isEvenStrengthFaceoffsWon: Swift.Bool {
    get
  }
  public var isEvenStrengthFaceoffsLost: Swift.Bool {
    get
  }
  public var isShootoutGoals: Swift.Bool {
    get
  }
  public var isGoaltendingTotalWins: Swift.Bool {
    get
  }
  public var isGoaltendingTotalLosses: Swift.Bool {
    get
  }
  public var isGoaltendingPowerPlayShotsAgainst: Swift.Bool {
    get
  }
  public var isGoaltendingPowerPlayGoalsAgainst: Swift.Bool {
    get
  }
  public var isGoaltendingPowerPlaySaves: Swift.Bool {
    get
  }
  public var isGoaltendingShortHandedShotsAgainst: Swift.Bool {
    get
  }
  public var isGoaltendingShortHandedSaves: Swift.Bool {
    get
  }
  public var isGoaltendingEvenStrengthShotsAgainst: Swift.Bool {
    get
  }
  public var isGoaltendingEvenStrengthSaves: Swift.Bool {
    get
  }
  public var isPowerPlay5v4Shots: Swift.Bool {
    get
  }
  public var isPowerPlay5v4Goals: Swift.Bool {
    get
  }
  public var isPowerPlay5v4Time: Swift.Bool {
    get
  }
  public var isPowerPlay5v3Shots: Swift.Bool {
    get
  }
  public var isPowerPlay5v3Goals: Swift.Bool {
    get
  }
  public var isPowerPlay5v3Time: Swift.Bool {
    get
  }
  public var isPowerPlay4v3Shots: Swift.Bool {
    get
  }
  public var isPowerPlay4v3Goals: Swift.Bool {
    get
  }
  public var isPowerPlay4v3Time: Swift.Bool {
    get
  }
  public var isShortHanded4v5Shots: Swift.Bool {
    get
  }
  public var isShortHanded4v5Goals: Swift.Bool {
    get
  }
  public var isShortHanded3v5Shots: Swift.Bool {
    get
  }
  public var isShortHanded3v5Goals: Swift.Bool {
    get
  }
  public var isShortHanded3v4Shots: Swift.Bool {
    get
  }
  public var isShortHanded3v4Goals: Swift.Bool {
    get
  }
  public var isEvenStrength5v5Shots: Swift.Bool {
    get
  }
  public var isEvenStrength5v5Goals: Swift.Bool {
    get
  }
  public var isEvenStrength4v4Shots: Swift.Bool {
    get
  }
  public var isEvenStrength4v4Goals: Swift.Bool {
    get
  }
  public var isEvenStrength3v3Shots: Swift.Bool {
    get
  }
  public var isEvenStrength3v3Goals: Swift.Bool {
    get
  }
  public var isOpponentsPenalties: Swift.Bool {
    get
  }
  public var isOpponentsPenaltyMinutes: Swift.Bool {
    get
  }
  public var isLossesTotal: Swift.Bool {
    get
  }
  public var isWinsTotal: Swift.Bool {
    get
  }
  public var isOvertimeLossesTotal: Swift.Bool {
    get
  }
  public var isTwoMinutePenalties: Swift.Bool {
    get
  }
  public var isFiveMinutePenalties: Swift.Bool {
    get
  }
  public var isTenMinutePenalties: Swift.Bool {
    get
  }
  public var isShootoutAttempts: Swift.Bool {
    get
  }
  public var isEmptyNetGoals: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TableTennisSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> TableTennisSeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> TableTennisSeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> TableTennisSeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> TableTennisSeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> TableTennisSeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> TableTennisSeasonDetailsParams
  @objc deinit
}
public typealias MarshalDictionary = [Swift.String : Any]
extension Swift.Dictionary : MarshaledObject {
  public func optionalAny(for key: KeyType) -> Any?
}
extension Foundation.NSDictionary : ValueType {
}
extension Foundation.NSDictionary : MarshaledObject {
  public func any(for key: KeyType) throws -> Any
  public func optionalAny(for key: KeyType) -> Any?
}
@_hasMissingDesignatedInitializers final public class BaseballTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BaseballTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> BaseballTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> BaseballTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> BaseballTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> BaseballTournamentDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SpeedwayTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> SpeedwayTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> SpeedwayTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> SpeedwayTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> SpeedwayTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> SpeedwayTournamentDetailsParams
  @objc deinit
}
public enum MatchStatType {
  public static let unknown: MatchStatTypeItem
  public static let yellowCards: MatchStatTypeItem
  public static let yellowRedCards: MatchStatTypeItem
  public static let redCards: MatchStatTypeItem
  public static let substitutions: MatchStatTypeItem
  public static let ballPossession: MatchStatTypeItem
  public static let freeKicks: MatchStatTypeItem
  public static let goalKicks: MatchStatTypeItem
  public static let throwIns: MatchStatTypeItem
  public static let offsides: MatchStatTypeItem
  public static let cornerKicks: MatchStatTypeItem
  public static let shotOnTarget: MatchStatTypeItem
  public static let shotOffTarget: MatchStatTypeItem
  public static let saves: MatchStatTypeItem
  public static let fouls: MatchStatTypeItem
  public static let aces: MatchStatTypeItem
  public static let doubleFaults: MatchStatTypeItem
  public static let maxPoints: MatchStatTypeItem
  public static let wonPoints: MatchStatTypeItem
  public static let firstServePointsWon: MatchStatTypeItem
  public static let firstServeSuccessful: MatchStatTypeItem
  public static let breakPointsWon: MatchStatTypeItem
  public static let servingPoints: MatchStatTypeItem
  public static let breakPoints: MatchStatTypeItem
  public static let maxGames: MatchStatTypeItem
  public static let serverGames: MatchStatTypeItem
  public static let injuries: MatchStatTypeItem
  public static let shotsBlocked: MatchStatTypeItem
  public static let dangerousAttack: MatchStatTypeItem
  public static let ballSafe: MatchStatTypeItem
  public static let freeThrowsScored: MatchStatTypeItem
  public static let rebounds: MatchStatTypeItem
  public static let teamRebounds: MatchStatTypeItem
  public static let totalRebounds: MatchStatTypeItem
  public static let sevenMetersScored: MatchStatTypeItem
  public static let twoMinutesPenalties: MatchStatTypeItem
  public static let goalsInPowerplay: MatchStatTypeItem
  public static let goalsShortHanded: MatchStatTypeItem
  public static let attackSuccess: MatchStatTypeItem
  public static let powerplays: MatchStatTypeItem
  public static let serviceErrors: MatchStatTypeItem
  public static let timeouts: MatchStatTypeItem
  public static let penalties: MatchStatTypeItem
  public static let attack: MatchStatTypeItem
  public static let tiebreaksWon: MatchStatTypeItem
  public static let secondServeSuccessful: MatchStatTypeItem
  public static let secondServePointsWon: MatchStatTypeItem
  public static let receiverPointsWon: MatchStatTypeItem
  public static let comebackToWin: MatchStatTypeItem
  public static let biggestLead: MatchStatTypeItem
  public static let tries: MatchStatTypeItem
  public static let conversions: MatchStatTypeItem
  public static let dropGoals: MatchStatTypeItem
  public static let lineouts: MatchStatTypeItem
  public static let scrums: MatchStatTypeItem
  public static let penaltyTries: MatchStatTypeItem
  public static let penaltyGoals: MatchStatTypeItem
  public static let penaltiesConceded: MatchStatTypeItem
  public static let steals: MatchStatTypeItem
  public static let technicalFaults: MatchStatTypeItem
  public static let technicalFouls: MatchStatTypeItem
  public static let gamesTwoPointers: MatchStatTypeItem
  public static let gamesThreePointers: MatchStatTypeItem
  public static let gamesSuccsessAttempts: MatchStatTypeItem
  public static let gamesWon: MatchStatTypeItem
  public static let matchPlayed: MatchStatTypeItem
  public static let totalAssists: MatchStatTypeItem
  public static let efficiency: MatchStatTypeItem
  public static let minutesPlayed: MatchStatTypeItem
  public static let blueCards: MatchStatTypeItem
  public static let goalAttempts: MatchStatTypeItem
  public static let shootingEfficiency: MatchStatTypeItem
  public static let goals7m: MatchStatTypeItem
  public static let fieldGoals: MatchStatTypeItem
  public static let fastbreakGoals: MatchStatTypeItem
  public static let wingGoals: MatchStatTypeItem
  public static let rightWingGoals: MatchStatTypeItem
  public static let leftWingGoals: MatchStatTypeItem
  public static let pivotGoals: MatchStatTypeItem
  public static let pivotMisses: MatchStatTypeItem
  public static let pivotPosts: MatchStatTypeItem
  public static let pivotBlocks: MatchStatTypeItem
  public static let wingMisses: MatchStatTypeItem
  public static let wingPosts: MatchStatTypeItem
  public static let wingBlocks: MatchStatTypeItem
  public static let goals9m: MatchStatTypeItem
  public static let goals6m: MatchStatTypeItem
  public static let shots: MatchStatTypeItem
  public static let awarded7m: MatchStatTypeItem
  public static let shots7m: MatchStatTypeItem
  public static let shots6m: MatchStatTypeItem
  public static let goalsShortHandedPercent: MatchStatTypeItem
  public static let goalsPowerplayPercent: MatchStatTypeItem
  public static let goals: MatchStatTypeItem
  public static let shotsPivot: MatchStatTypeItem
  public static let shots9m: MatchStatTypeItem
  public static let shotsFastbreak: MatchStatTypeItem
  public static let goalsBreakthrough: MatchStatTypeItem
  public static let goalsBreakthroughGoalkeeper: MatchStatTypeItem
  public static let savesBreakthrough: MatchStatTypeItem
  public static let missesBreakthrough: MatchStatTypeItem
  public static let postsBreakthrough: MatchStatTypeItem
  public static let blocksBreakthrough: MatchStatTypeItem
  public static let saves7m: MatchStatTypeItem
  public static let goals6mLeft: MatchStatTypeItem
  public static let goals6mCentre: MatchStatTypeItem
  public static let goals6mRight: MatchStatTypeItem
  public static let shots6mLeft: MatchStatTypeItem
  public static let shots6mCentre: MatchStatTypeItem
  public static let shots6mRight: MatchStatTypeItem
  public static let goals9mLeft: MatchStatTypeItem
  public static let goals9mCentre: MatchStatTypeItem
  public static let goals9mRight: MatchStatTypeItem
  public static let shots9mLeft: MatchStatTypeItem
  public static let shots9mCentre: MatchStatTypeItem
  public static let shots9mRight: MatchStatTypeItem
  public static let shotsRightWing: MatchStatTypeItem
  public static let shotsLeftWing: MatchStatTypeItem
  public static let shotsBreakthrough: MatchStatTypeItem
  public static let shotsBreakthroughGoalkeeper: MatchStatTypeItem
  public static let lastGoal: MatchStatTypeItem
  public static let wingSavesGoalkeeper: MatchStatTypeItem
  public static let wingShotsGoalkeeper: MatchStatTypeItem
  public static let backcourtShots: MatchStatTypeItem
  public static let backcourtGoals: MatchStatTypeItem
  public static let backcourtMisses: MatchStatTypeItem
  public static let backcourtSaves: MatchStatTypeItem
  public static let backcourtBlocks: MatchStatTypeItem
  public static let backcourtPosts: MatchStatTypeItem
  public static let missesFastBreak: MatchStatTypeItem
  public static let gkShots: MatchStatTypeItem
  public static let technicalFoulsPeriod: MatchStatTypeItem
  public static let gkShotsFastbreak: MatchStatTypeItem
  public static let gkShots7m: MatchStatTypeItem
  public static let gkSaves9m: MatchStatTypeItem
  public static let gkGoalsGastbreak: MatchStatTypeItem
  public static let awayGoals: MatchStatTypeItem
  public static let disciplinaryPoints: MatchStatTypeItem
  public static let gkGoalsFastBreak: MatchStatTypeItem
  public static let gkShots9m: MatchStatTypeItem
  public static let gkShots6m: MatchStatTypeItem
  public static let substitutionOut: MatchStatTypeItem
  public static let gkShotsbackCourt: MatchStatTypeItem
  public static let gkGoals7m: MatchStatTypeItem
  public static let secondsPlayed: MatchStatTypeItem
  public static let gkSaves7m: MatchStatTypeItem
  public static let blocks6m: MatchStatTypeItem
  public static let posts9m: MatchStatTypeItem
  public static let firstGoal: MatchStatTypeItem
  public static let gkGoalsPivot: MatchStatTypeItem
  public static let substitutionIn: MatchStatTypeItem
  public static let gkSaves: MatchStatTypeItem
  public static let gkSaves6m: MatchStatTypeItem
  public static let misses9m: MatchStatTypeItem
  public static let gkGoals9m: MatchStatTypeItem
  public static let misses7m: MatchStatTypeItem
  public static let gkShotsField: MatchStatTypeItem
  public static let gkSavesPivot: MatchStatTypeItem
  public static let gkGoalSwing: MatchStatTypeItem
  public static let gkGoalsField: MatchStatTypeItem
  public static let gkShotsPivot: MatchStatTypeItem
  public static let homeGoals: MatchStatTypeItem
  public static let blocks9m: MatchStatTypeItem
  public static let gkGoals: MatchStatTypeItem
  public static let gkSavesField: MatchStatTypeItem
  public static let gkGoals6m: MatchStatTypeItem
  public static let gkSavesBackCourt: MatchStatTypeItem
  public static let gksavesFastBreak: MatchStatTypeItem
  public static let misses6m: MatchStatTypeItem
  public static let gkSavesBreakthrough: MatchStatTypeItem
  public static let allPostShots: MatchStatTypeItem
  public static let savedShotsPercent: MatchStatTypeItem
  public static let timeSpentInLead: MatchStatTypeItem
  public static let leadChanges: MatchStatTypeItem
  public static let fieldShots: MatchStatTypeItem
  public static let points: MatchStatTypeItem
  public static let twoPointsMade: MatchStatTypeItem
  public static let twoPointsAttempted: MatchStatTypeItem
  public static let threePointsMade: MatchStatTypeItem
  public static let threePointsAttempted: MatchStatTypeItem
  public static let freeThrowMade: MatchStatTypeItem
  public static let freeThrowAttempted: MatchStatTypeItem
  public static let offensiveRebounds: MatchStatTypeItem
  public static let defensiveRebounds: MatchStatTypeItem
  public static let blocksAgainst: MatchStatTypeItem
  public static let turnovers: MatchStatTypeItem
  public static let personalFouls: MatchStatTypeItem
  public static let assistToTurnoverRatio: MatchStatTypeItem
  public static let blockedAttempts: MatchStatTypeItem
  public static let fastBreakPoints: MatchStatTypeItem
  public static let fieldGoalsAttempted: MatchStatTypeItem
  public static let fieldGoalsMade: MatchStatTypeItem
  public static let fieldGoalsPercentage: MatchStatTypeItem
  public static let flagrantFouls: MatchStatTypeItem
  public static let foulouts: MatchStatTypeItem
  public static let freeThrowsAttempted: MatchStatTypeItem
  public static let freeThrowsMade: MatchStatTypeItem
  public static let freeThrowsPercentage: MatchStatTypeItem
  public static let paintPoints: MatchStatTypeItem
  public static let pointsOffTurnover: MatchStatTypeItem
  public static let secondChancePoints: MatchStatTypeItem
  public static let threePointsPercentage: MatchStatTypeItem
  public static let twoPointsPercentage: MatchStatTypeItem
  public static let minutes: MatchStatTypeItem
  public static let duration: MatchStatTypeItem
  public static let attendance: MatchStatTypeItem
  public static let timesTied: MatchStatTypeItem
  public static let suspensionMinutes: MatchStatTypeItem
  public static let shotsOnGoal: MatchStatTypeItem
  public static let faceoffWinningPercentage: MatchStatTypeItem
  public static let powerplayOpportunities: MatchStatTypeItem
  public static let hits: MatchStatTypeItem
  public static let giveaways: MatchStatTypeItem
  public static let takeaways: MatchStatTypeItem
  public static let goaltendingTotalGoalsAgainst: MatchStatTypeItem
  public static let goaltendingTotalSaves: MatchStatTypeItem
  public static let goaltendingTotalSavesPercentage: MatchStatTypeItem
  public static let shootingPercentage: MatchStatTypeItem
  public static let gamesPlayed: MatchStatTypeItem
  public static let suspensions: MatchStatTypeItem
  public static let plusMinus: MatchStatTypeItem
  public static let goaltendingTimeOnIce: MatchStatTypeItem
  public static let faceoffsWon: MatchStatTypeItem
  public static let faceoffsLost: MatchStatTypeItem
  public static let goaltendingTotalShotsAgainst: MatchStatTypeItem
  public static let goaltendingTotalAverageGoalsAgainst: MatchStatTypeItem
  public static let goaltendingTotalShutouts: MatchStatTypeItem
  public static let penaltyMinutes: MatchStatTypeItem
  public static let timeOnIce: MatchStatTypeItem
  public static let shifts: MatchStatTypeItem
  public static let opponentGoals: MatchStatTypeItem
  public static let opponentPowerplayGoals: MatchStatTypeItem
  public static let shotsOnGoalPerMatch: MatchStatTypeItem
  public static let goaltendingTotalOvertimeLosses: MatchStatTypeItem
  public static let opponentsPowerplayOpportunities: MatchStatTypeItem
  public static let opponentsShotsOnGoalPerMatch: MatchStatTypeItem
  public static let ejections: MatchStatTypeItem
  public static let playerTechnicalFouls: MatchStatTypeItem
  public static let goaltendingShootoutShotsAgainst: MatchStatTypeItem
  public static let goaltendingShootoutGoalsAgainst: MatchStatTypeItem
  public static let goaltendingShootoutSaves: MatchStatTypeItem
  public static let goaltendingShootoutSavesPercentage: MatchStatTypeItem
  public static let missedShots: MatchStatTypeItem
  public static let overtimeGoals: MatchStatTypeItem
  public static let winningGoals: MatchStatTypeItem
  public static let powerPlayShotsOnGoal: MatchStatTypeItem
  public static let powerPlayAssists: MatchStatTypeItem
  public static let powerPlayFaceoffs: MatchStatTypeItem
  public static let powerPlayFaceoffsWon: MatchStatTypeItem
  public static let powerPlayFaceoffsLost: MatchStatTypeItem
  public static let shortHandedShotsOnGoal: MatchStatTypeItem
  public static let shortHandedAssists: MatchStatTypeItem
  public static let shortHandedFaceoffs: MatchStatTypeItem
  public static let shortHandedFaceoffsWon: MatchStatTypeItem
  public static let shortHandedFaceoffsLost: MatchStatTypeItem
  public static let evenStrengthShotsOnGoal: MatchStatTypeItem
  public static let evenStrengthGoals: MatchStatTypeItem
  public static let evenStrengthAssists: MatchStatTypeItem
  public static let evenStrengthFaceoffs: MatchStatTypeItem
  public static let evenStrengthFaceoffsWon: MatchStatTypeItem
  public static let evenStrengthFaceoffsLost: MatchStatTypeItem
  public static let shootoutGoals: MatchStatTypeItem
  public static let goaltendingTotalWins: MatchStatTypeItem
  public static let goaltendingTotalLosses: MatchStatTypeItem
  public static let goaltendingPowerPlayShotsAgainst: MatchStatTypeItem
  public static let goaltendingPowerPlayGoalsAgainst: MatchStatTypeItem
  public static let goaltendingPowerPlaySaves: MatchStatTypeItem
  public static let goaltendingShortHandedShotsAgainst: MatchStatTypeItem
  public static let goaltendingShortHandedSaves: MatchStatTypeItem
  public static let goaltendingEvenStrengthShotsAgainst: MatchStatTypeItem
  public static let goaltendingEvenStrengthSaves: MatchStatTypeItem
  public static let powerPlay5V4Shots: MatchStatTypeItem
  public static let powerPlay5V4Goals: MatchStatTypeItem
  public static let powerPlay5V4Time: MatchStatTypeItem
  public static let powerPlay5V3Shots: MatchStatTypeItem
  public static let powerPlay5V3Goals: MatchStatTypeItem
  public static let powerPlay5V3Time: MatchStatTypeItem
  public static let powerPlay4V3Shots: MatchStatTypeItem
  public static let powerPlay4V3Goals: MatchStatTypeItem
  public static let powerPlay4V3Time: MatchStatTypeItem
  public static let shortHanded4V5Shots: MatchStatTypeItem
  public static let shortHanded4V5Goals: MatchStatTypeItem
  public static let shortHanded3V5Shots: MatchStatTypeItem
  public static let shortHanded3V5Goals: MatchStatTypeItem
  public static let shortHanded3V4Shots: MatchStatTypeItem
  public static let shortHanded3V4Goals: MatchStatTypeItem
  public static let evenStrength5V5Shots: MatchStatTypeItem
  public static let evenStrength5V5Goals: MatchStatTypeItem
  public static let evenStrength4V4Shots: MatchStatTypeItem
  public static let evenStrength4V4Goals: MatchStatTypeItem
  public static let evenStrength3V3Shots: MatchStatTypeItem
  public static let evenStrength3V3Goals: MatchStatTypeItem
  public static let opponentsPenalties: MatchStatTypeItem
  public static let opponentsPenaltyMinutes: MatchStatTypeItem
  public static let lossesTotal: MatchStatTypeItem
  public static let winsTotal: MatchStatTypeItem
  public static let overtimeLossesTotal: MatchStatTypeItem
  public static let numberOfTwoMinutePenalties: MatchStatTypeItem
  public static let numberOfFiveMinutePenalties: MatchStatTypeItem
  public static let numberOfTenMinutePenalties: MatchStatTypeItem
  public static let shootoutAttempts: MatchStatTypeItem
  public static let emptyNetGoals: MatchStatTypeItem
  public static let errors: MatchStatTypeItem
  public static let atBatsPerStrikeout: MatchStatTypeItem
  public static let runnersLeftOnBase: MatchStatTypeItem
  public static let ballsInPlay: MatchStatTypeItem
  public static let walksPerPlateAppearance: MatchStatTypeItem
  public static let secondaryAverage: MatchStatTypeItem
  public static let pitchesFaced: MatchStatTypeItem
  public static let lineDrive: MatchStatTypeItem
  public static let flyBall: MatchStatTypeItem
  public static let popUp: MatchStatTypeItem
  public static let groundBall: MatchStatTypeItem
  public static let singles: MatchStatTypeItem
  public static let hitByPitch: MatchStatTypeItem
  public static let fieldersChoice: MatchStatTypeItem
  public static let reachedOnError: MatchStatTypeItem
  public static let cycles: MatchStatTypeItem
  public static let strikesLooking: MatchStatTypeItem
  public static let strikesSwinging: MatchStatTypeItem
  public static let totalStrikes: MatchStatTypeItem
  public static let balls: MatchStatTypeItem
  public static let intentionalBallsTaken: MatchStatTypeItem
  public static let dirtBallsFaced: MatchStatTypeItem
  public static let foulBalls: MatchStatTypeItem
  public static let popOuts: MatchStatTypeItem
  public static let flyOutsIntoDoublePlays: MatchStatTypeItem
  public static let lineOut: MatchStatTypeItem
  public static let lineOutInDoublePlay: MatchStatTypeItem
  public static let strikeoutsLooking: MatchStatTypeItem
  public static let strikeoutsSwinging: MatchStatTypeItem
  public static let sacrificeFlys: MatchStatTypeItem
  public static let sacrificeHits: MatchStatTypeItem
  public static let stolenBasePercentage: MatchStatTypeItem
  public static let overallOpponentsRunnersLeftOnBase: MatchStatTypeItem
  public static let overallWildPitches: MatchStatTypeItem
  public static let overallInningsPitchedFormatted: MatchStatTypeItem
  public static let overallSinglesAllowed: MatchStatTypeItem
  public static let overallDoublesAllowed: MatchStatTypeItem
  public static let overallTriplesAllowed: MatchStatTypeItem
  public static let overallTotalBasesAllowed: MatchStatTypeItem
  public static let overallFieldersChoiceAllowed: MatchStatTypeItem
  public static let overallReachedOnErrorAllowed: MatchStatTypeItem
  public static let overallUnearnedRunsAllowed: MatchStatTypeItem
  public static let overallStrikesLooking: MatchStatTypeItem
  public static let overallBalls: MatchStatTypeItem
  public static let overallIntentionalBalls: MatchStatTypeItem
  public static let overallDirtBalls: MatchStatTypeItem
  public static let overallFoulBalls: MatchStatTypeItem
  public static let overallPopOuts: MatchStatTypeItem
  public static let overallFlyOutsIntoDoublePlays: MatchStatTypeItem
  public static let overallLineOuts: MatchStatTypeItem
  public static let overallLineOutsInDoublePlays: MatchStatTypeItem
  public static let overallGroundOutsIntoDoublePlays: MatchStatTypeItem
  public static let overallStrikeoutsLooking: MatchStatTypeItem
  public static let overallStrikeoutsSwinging: MatchStatTypeItem
  public static let overallSacrififceFlys: MatchStatTypeItem
  public static let overallSacrificeHits: MatchStatTypeItem
  public static let overallPickoff: MatchStatTypeItem
  public static let overallRunnersCaughtStealing: MatchStatTypeItem
  public static let overallStolenBasesAllowed: MatchStatTypeItem
  public static let overallBalks: MatchStatTypeItem
  public static let overallStrikesSwinging: MatchStatTypeItem
  public static let baseballDayNight: MatchStatTypeItem
  public static let baseballGameNumber: MatchStatTypeItem
  public static let primaryAssists: MatchStatTypeItem
  public static let secondaryAssists: MatchStatTypeItem
  public static let shorthandedTimeOnIce: MatchStatTypeItem
  public static let goaltenderDecision: MatchStatTypeItem
  public static let probablePitcher: MatchStatTypeItem
  public static let startingPitcher: MatchStatTypeItem
  public static let totalWinners: MatchStatTypeItem
  public static let forehandWinners: MatchStatTypeItem
  public static let backhandWinners: MatchStatTypeItem
  public static let netPointsWon: MatchStatTypeItem
  public static let forcedErrors: MatchStatTypeItem
  public static let unforcedErrors: MatchStatTypeItem
  public static let fastest1stServe: MatchStatTypeItem
  public static let average1stServe: MatchStatTypeItem
  public static let fastest2stServe: MatchStatTypeItem
  public static let average2stServe: MatchStatTypeItem
  public static let challengesRemaining: MatchStatTypeItem
  public static let periodsDuration: MatchStatTypeItem
  public static let firstDartAverage: MatchStatTypeItem
  public static let secondDartAverage: MatchStatTypeItem
  public static let thirdDartAverage: MatchStatTypeItem
  public static let thrown180: MatchStatTypeItem
  public static let thrown140: MatchStatTypeItem
  public static let thrown100: MatchStatTypeItem
  public static let highestCheckout: MatchStatTypeItem
  public static let checkout100: MatchStatTypeItem
  public static let checkoutPercentage: MatchStatTypeItem
  public static let allDartsAverage: MatchStatTypeItem
  public static let averages3Darts: MatchStatTypeItem
  public static let matchPoints: MatchStatTypeItem
  public static let warnings: MatchStatTypeItem
  public static let numberOfLets: MatchStatTypeItem
  public static let directFouls: MatchStatTypeItem
  public static let directFreeKicks: MatchStatTypeItem
  public static let directFreeKicksScored: MatchStatTypeItem
  public static let directFreeKicksMissed: MatchStatTypeItem
  public static let penaltiesScored: MatchStatTypeItem
  public static let penaltiesMissed: MatchStatTypeItem
  public static let passingYards: MatchStatTypeItem
  public static let rushingYards: MatchStatTypeItem
  public static let rushingAverage: MatchStatTypeItem
  public static let extraPointsAttempted: MatchStatTypeItem
  public static let extraPointsMade: MatchStatTypeItem
  public static let firstDowns: MatchStatTypeItem
  public static let goalEfficiencyAttempted: MatchStatTypeItem
  public static let possesionTime: MatchStatTypeItem
  public static let redzoneEfficiencyAttempted: MatchStatTypeItem
  public static let remainingTimeouts: MatchStatTypeItem
  public static let thirdDownEfficiencyAttempted: MatchStatTypeItem
  public static let totalYards: MatchStatTypeItem
  public static let touchdowns: MatchStatTypeItem
  public static let rushingAttempts: MatchStatTypeItem
  public static let rushingTouchdowns: MatchStatTypeItem
  public static let receptions: MatchStatTypeItem
  public static let receivingTouchdowns: MatchStatTypeItem
  public static let receivingYards: MatchStatTypeItem
  public static let passingAttempts: MatchStatTypeItem
  public static let passingCompletions: MatchStatTypeItem
  public static let passingTouchdowns: MatchStatTypeItem
  public static let totalChances: MatchStatTypeItem
  public static let putouts: MatchStatTypeItem
  public static let totalErrors: MatchStatTypeItem
  public static let doublePlays: MatchStatTypeItem
  public static let passedBalls: MatchStatTypeItem
  public static let wildPitchesWhileCatching: MatchStatTypeItem
  public static let triplePlays: MatchStatTypeItem
  public static let throwingErrors: MatchStatTypeItem
  public static let fieldingErrors: MatchStatTypeItem
  public static let interferenceErrors: MatchStatTypeItem
  public static let atBats: MatchStatTypeItem
  public static let runsScored: MatchStatTypeItem
  public static let doubles: MatchStatTypeItem
  public static let triples: MatchStatTypeItem
  public static let homeRuns: MatchStatTypeItem
  public static let runsBattedIn: MatchStatTypeItem
  public static let walks: MatchStatTypeItem
  public static let strikeouts: MatchStatTypeItem
  public static let stolenBases: MatchStatTypeItem
  public static let caughtStealing: MatchStatTypeItem
  public static let atBatsWithRunnersInScoringPosition: MatchStatTypeItem
  public static let hitsWithRunnersInScoringPosition: MatchStatTypeItem
  public static let groundedIntoDoublePlay: MatchStatTypeItem
  public static let pickoffs: MatchStatTypeItem
  public static let runnersOnBaseWithTwoOuts: MatchStatTypeItem
  public static let battedInWithTwoOuts: MatchStatTypeItem
  public static let teamRunnersLeftOnBase: MatchStatTypeItem
  public static let bases: MatchStatTypeItem
  public static let wins: MatchStatTypeItem
  public static let losses: MatchStatTypeItem
  public static let holds: MatchStatTypeItem
  public static let inningsPitched: MatchStatTypeItem
  public static let hitsAllowed: MatchStatTypeItem
  public static let runsAllowed: MatchStatTypeItem
  public static let earnedRunsAllowed: MatchStatTypeItem
  public static let homeRunsAllowed: MatchStatTypeItem
  public static let battersFaced: MatchStatTypeItem
  public static let blownSaves: MatchStatTypeItem
  public static let flyOuts: MatchStatTypeItem
  public static let groundOuts: MatchStatTypeItem
  public static let battersHit: MatchStatTypeItem
  public static let intentionalWalks: MatchStatTypeItem
  public static let pitchCount: MatchStatTypeItem
  public static let strikes: MatchStatTypeItem
  public static let gamesStarted: MatchStatTypeItem
  public static let percentage: MatchStatTypeItem
  public static let rangeFactor: MatchStatTypeItem
  public static let plateAppearances: MatchStatTypeItem
  public static let battingAverage: MatchStatTypeItem
  public static let onBasePercentage: MatchStatTypeItem
  public static let sluggingPercentage: MatchStatTypeItem
  public static let onBasePlusSluggingPercentage: MatchStatTypeItem
  public static let isolatedPower: MatchStatTypeItem
  public static let walksPerStrikeout: MatchStatTypeItem
  public static let groundedToFlyBallRatio: MatchStatTypeItem
  public static let extraBaseHits: MatchStatTypeItem
  public static let earnedRunAverage: MatchStatTypeItem
  public static let saveOpportunities: MatchStatTypeItem
  public static let walksPlusHits: MatchStatTypeItem
  public static let qualityStarts: MatchStatTypeItem
  public static let completeGames: MatchStatTypeItem
  public static let shutouts: MatchStatTypeItem
  public static let gamesFinished: MatchStatTypeItem
  public static let overallGamesTeamLoss: MatchStatTypeItem
  public static let overallGamesTeamWin: MatchStatTypeItem
  public static let overallGamesFinished: MatchStatTypeItem
  public static let kills: MatchStatTypeItem
  public static let killAssists: MatchStatTypeItem
  public static let deaths: MatchStatTypeItem
  public static let level: MatchStatTypeItem
  public static let xp: MatchStatTypeItem
  public static let headshots: MatchStatTypeItem
  public static let killDeathRatio: MatchStatTypeItem
  public static let towers: MatchStatTypeItem
  public static let netWorthGold: MatchStatTypeItem
  public static let heroChampion: MatchStatTypeItem
  public static let barracks: MatchStatTypeItem
  public static let aegis: MatchStatTypeItem
  public static let lastHits: MatchStatTypeItem
  public static let denies: MatchStatTypeItem
  public static let items: MatchStatTypeItem
  public static let dragons: MatchStatTypeItem
  public static let barons: MatchStatTypeItem
  public static let minions: MatchStatTypeItem
  public static let inhibitors: MatchStatTypeItem
}
public struct MatchStatTypeItem : Swift.Equatable, Swift.Hashable {
  public static func == (lhs: MatchStatTypeItem, rhs: MatchStatTypeItem) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class SnookerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> SnookerDetailsParams
  @discardableResult
  final public func includeLiveRankingTable() -> SnookerDetailsParams
  @discardableResult
  final public func includeStaff() -> SnookerDetailsParams
  @discardableResult
  final public func includeEvents() -> SnookerDetailsParams
  @discardableResult
  final public func includeOdds() -> SnookerDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> SnookerDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> SnookerDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> SnookerDetailsParams
  @discardableResult
  final public func includeVenue() -> SnookerDetailsParams
  @discardableResult
  final public func includeAttendance() -> SnookerDetailsParams
  @discardableResult
  final public func includeStatistics() -> SnookerDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> SnookerDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> SnookerDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> SnookerDetailsParams
  @discardableResult
  final public func includeCommentary() -> SnookerDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> SnookerDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AmericanFootballDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> AmericanFootballDetailsParams
  @discardableResult
  final public func includeLineups() -> AmericanFootballDetailsParams
  @discardableResult
  final public func includeTeam1LeagueTable() -> AmericanFootballDetailsParams
  @discardableResult
  final public func includeTeam2LeagueTable() -> AmericanFootballDetailsParams
  @discardableResult
  final public func includeLiveRankingTable() -> AmericanFootballDetailsParams
  @discardableResult
  final public func includeStaff() -> AmericanFootballDetailsParams
  @discardableResult
  final public func includeEvents() -> AmericanFootballDetailsParams
  @discardableResult
  final public func includeOdds() -> AmericanFootballDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> AmericanFootballDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> AmericanFootballDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> AmericanFootballDetailsParams
  @discardableResult
  final public func includeVenue() -> AmericanFootballDetailsParams
  @discardableResult
  final public func includeAttendance() -> AmericanFootballDetailsParams
  @discardableResult
  final public func includeStatistics() -> AmericanFootballDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> AmericanFootballDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> AmericanFootballDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> AmericanFootballDetailsParams
  @discardableResult
  final public func includeCommentary() -> AmericanFootballDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> AmericanFootballDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BaseballStatistics : MatchStatistics {
  public var isFieldingTotalChances: Swift.Bool {
    get
  }
  public var isFieldingPutouts: Swift.Bool {
    get
  }
  public var isFieldingAssists: Swift.Bool {
    get
  }
  public var isFieldingErrorsTotal: Swift.Bool {
    get
  }
  public var isFieldingDoublePlays: Swift.Bool {
    get
  }
  public var isFieldingPassedBalls: Swift.Bool {
    get
  }
  public var isFieldingWildPitchesWhileCatching: Swift.Bool {
    get
  }
  public var isFieldingTriplePlays: Swift.Bool {
    get
  }
  public var isFieldingErrorsThrowing: Swift.Bool {
    get
  }
  public var isFieldingErrorsFielding: Swift.Bool {
    get
  }
  public var isFieldingErrorsInterference: Swift.Bool {
    get
  }
  public var isHittingAtBats: Swift.Bool {
    get
  }
  public var isHittingTotalRunsScored: Swift.Bool {
    get
  }
  public var isHittingHits: Swift.Bool {
    get
  }
  public var isHittingDoubles: Swift.Bool {
    get
  }
  public var isHittingTriples: Swift.Bool {
    get
  }
  public var isHittingHomeRuns: Swift.Bool {
    get
  }
  public var isHittingRunsBattedIn: Swift.Bool {
    get
  }
  public var isHittingWalks: Swift.Bool {
    get
  }
  public var isHittingTotalStrikeouts: Swift.Bool {
    get
  }
  public var isHittingStolenBases: Swift.Bool {
    get
  }
  public var isHittingCaughtStealing: Swift.Bool {
    get
  }
  public var isHittingAtBatsWithRunnersInScoringPosition: Swift.Bool {
    get
  }
  public var isHittingHitsWithRunnersInScoringPosition: Swift.Bool {
    get
  }
  public var isHittingGroundBallsIntoDoublePlay: Swift.Bool {
    get
  }
  public var isHittingPickedOff: Swift.Bool {
    get
  }
  public var isHittingRunnersOnBaseWithTwoOuts: Swift.Bool {
    get
  }
  public var isHittingRunsBattedInWithTwoOuts: Swift.Bool {
    get
  }
  public var isHittingTeamRunnersLeftOnBase: Swift.Bool {
    get
  }
  public var isHittingTotalBases: Swift.Bool {
    get
  }
  public var isPitchingOverallWins: Swift.Bool {
    get
  }
  public var isPitchingOverallLosses: Swift.Bool {
    get
  }
  public var isPitchingOverallHolds: Swift.Bool {
    get
  }
  public var isPitchingOverallSaves: Swift.Bool {
    get
  }
  public var isPitchingOverallInningsPitched: Swift.Bool {
    get
  }
  public var isPitchingOverallHitsAllowed: Swift.Bool {
    get
  }
  public var isPitchingOverallTotalRunsAllowed: Swift.Bool {
    get
  }
  public var isPitchingOverallEarnedRunsAllowed: Swift.Bool {
    get
  }
  public var isPitchingOverallHomeRunsAllowed: Swift.Bool {
    get
  }
  public var isPitchingOverallWalks: Swift.Bool {
    get
  }
  public var isPitchingOverallTotalStrikeouts: Swift.Bool {
    get
  }
  public var isPitchingOverallBattersFaced: Swift.Bool {
    get
  }
  public var isPitchingOverallBlownSaves: Swift.Bool {
    get
  }
  public var isPitchingOverallFlyOuts: Swift.Bool {
    get
  }
  public var isPitchingOverallGroundOuts: Swift.Bool {
    get
  }
  public var isPitchingOverallHitBatters: Swift.Bool {
    get
  }
  public var isPitchingOverallIntentionalWalks: Swift.Bool {
    get
  }
  public var isPitchingOverallPitchCount: Swift.Bool {
    get
  }
  public var isPitchingOverallTotalStrikes: Swift.Bool {
    get
  }
  public var isFieldingErrors: Swift.Bool {
    get
  }
  public var isHittingAtBatsPerStrikeout: Swift.Bool {
    get
  }
  public var isHittingRunnersLeftOnBase: Swift.Bool {
    get
  }
  public var isHittingBallsInPlay: Swift.Bool {
    get
  }
  public var isHittingWalksPerPlateAppearance: Swift.Bool {
    get
  }
  public var isHittingSecondaryAverage: Swift.Bool {
    get
  }
  public var isHittingPitchesFaced: Swift.Bool {
    get
  }
  public var isHittingLineDrive: Swift.Bool {
    get
  }
  public var isHittingFlyBall: Swift.Bool {
    get
  }
  public var isHittingPopUp: Swift.Bool {
    get
  }
  public var isHittingGroundBall: Swift.Bool {
    get
  }
  public var isHittingSingles: Swift.Bool {
    get
  }
  public var isHittingIntentionalWalks: Swift.Bool {
    get
  }
  public var isHittingHitByPitch: Swift.Bool {
    get
  }
  public var isHittingFieldersChoice: Swift.Bool {
    get
  }
  public var isHittingReachedOnError: Swift.Bool {
    get
  }
  public var isHittingCycle: Swift.Bool {
    get
  }
  public var isHittingStrikesLooking: Swift.Bool {
    get
  }
  public var isHittingStrikesSwinging: Swift.Bool {
    get
  }
  public var isHittingTotalStrikes: Swift.Bool {
    get
  }
  public var isHittingBalls: Swift.Bool {
    get
  }
  public var isHittingIntentionalBallsTaken: Swift.Bool {
    get
  }
  public var isHittingDirtBallsFaced: Swift.Bool {
    get
  }
  public var isHittingFoulBalls: Swift.Bool {
    get
  }
  public var isHittingPopOuts: Swift.Bool {
    get
  }
  public var isHittingFlyOuts: Swift.Bool {
    get
  }
  public var isHittingFlyOutsIntoDoublePlays: Swift.Bool {
    get
  }
  public var isHittingLineOut: Swift.Bool {
    get
  }
  public var isHittingLineOutInDoublePlay: Swift.Bool {
    get
  }
  public var isHittingGroundOuts: Swift.Bool {
    get
  }
  public var isHittingStrikeoutsLooking: Swift.Bool {
    get
  }
  public var isHittingStrikeoutsSwinging: Swift.Bool {
    get
  }
  public var isHittingSacrificeFlys: Swift.Bool {
    get
  }
  public var isHittingSacrificeHits: Swift.Bool {
    get
  }
  public var isHittingStolenBasePercentage: Swift.Bool {
    get
  }
  public var isPitchingOverallOpponentsRunnersLeftOnBase: Swift.Bool {
    get
  }
  public var isPitchingOverallWildPitches: Swift.Bool {
    get
  }
  public var isPitchingOverallInningsPitchedFormatted: Swift.Bool {
    get
  }
  public var isPitchingOverallSinglesAllowed: Swift.Bool {
    get
  }
  public var isPitchingOverallDoublesAllowed: Swift.Bool {
    get
  }
  public var isPitchingOverallTriplesAllowed: Swift.Bool {
    get
  }
  public var isPitchingOverallTotalBasesAllowed: Swift.Bool {
    get
  }
  public var isPitchingOverallFieldersChoice: Swift.Bool {
    get
  }
  public var isPitchingOverallReachedOnError: Swift.Bool {
    get
  }
  public var isPitchingOverallUnearnedRunsAllowed: Swift.Bool {
    get
  }
  public var isPitchingOverallStrikesLooking: Swift.Bool {
    get
  }
  public var isPitchingOverallBalls: Swift.Bool {
    get
  }
  public var isPitchingOverallIntentionalBalls: Swift.Bool {
    get
  }
  public var isPitchingOverallDirtBalls: Swift.Bool {
    get
  }
  public var isPitchingOverallFoulBalls: Swift.Bool {
    get
  }
  public var isPitchingOverallPopOuts: Swift.Bool {
    get
  }
  public var isPitchingOverallFlyOutsIntoDoublePlays: Swift.Bool {
    get
  }
  public var isPitchingOverallLineOuts: Swift.Bool {
    get
  }
  public var isPitchingOverallLineOutsInDoublePlays: Swift.Bool {
    get
  }
  public var isPitchingOverallGroundOutsIntoDoublePlays: Swift.Bool {
    get
  }
  public var isPitchingOverallStrikeoutsLooking: Swift.Bool {
    get
  }
  public var isPitchingOverallStrikeoutsSwinging: Swift.Bool {
    get
  }
  public var isPitchingOverallSacrififceFlys: Swift.Bool {
    get
  }
  public var isPitchingOverallSacrificeHits: Swift.Bool {
    get
  }
  public var isPitchingOverallPickoff: Swift.Bool {
    get
  }
  public var isPitchingOverallRunnersCaughtStealing: Swift.Bool {
    get
  }
  public var isPitchingOverallStolenBasesAllowed: Swift.Bool {
    get
  }
  public var isPitchingOverallBalks: Swift.Bool {
    get
  }
  public var isPitchingOverallStrikesSwinging: Swift.Bool {
    get
  }
  public var isFieldingCompleteGames: Swift.Bool {
    get
  }
  public var isFieldingGamesFinished: Swift.Bool {
    get
  }
  public var isPitchingOverallGamesTeamLoss: Swift.Bool {
    get
  }
  public var isPitchingOverallGamesTeamWin: Swift.Bool {
    get
  }
  public var isHittingGamesFinished: Swift.Bool {
    get
  }
  public var isPitchingOverallGamesFinished: Swift.Bool {
    get
  }
  public var isPlayerTechnicalFouls: Swift.Bool {
    get
  }
  public var isEjections: Swift.Bool {
    get
  }
  public var isLossesTotal: Swift.Bool {
    get
  }
  public var isWinsTotal: Swift.Bool {
    get
  }
  public var isAttendance: Swift.Bool {
    get
  }
  public var isDuration: Swift.Bool {
    get
  }
  public var isDayOrNight: Swift.Bool {
    get
  }
  public var isGameNumber: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FormulaOneDriver : MotorsportDriver {
  final public var teamCountry: Country? {
    get
  }
  final public var parentId: Swift.Int? {
    get
  }
  final public var team: FormulaOneTeam? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RallyDriver : MotorsportDriver {
  final public var parentId: Swift.Int? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class NascarDriver : MotorsportDriver {
  final public var parentId: Swift.Int? {
    get
  }
  final public var teamCountry: Country? {
    get
  }
  final public var team: NascarTeam? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class MotorbikesDriver : MotorsportDriver {
  final public var teamCountry: Country? {
    get
  }
  final public var parentId: Swift.Int? {
    get
  }
  final public var team: MotorbikesTeam? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AnyTournametDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> AnyTournametDetailsParams
  @discardableResult
  final public func includeTeams() -> AnyTournametDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> AnyTournametDetailsParams
  @discardableResult
  final public func includeSeasons() -> AnyTournametDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> AnyTournametDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CounterStrikeTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> CounterStrikeTeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> CounterStrikeTeamDetailsParams
  @discardableResult
  final public func includeSquad() -> CounterStrikeTeamDetailsParams
  @discardableResult
  final public func includeRoles() -> CounterStrikeTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> CounterStrikeTeamDetailsParams
  @discardableResult
  final public func includeStages() -> CounterStrikeTeamDetailsParams
  @discardableResult
  final public func includeManager() -> CounterStrikeTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> CounterStrikeTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> CounterStrikeTeamDetailsParams
  @objc deinit
}
public class PopularItem : Unmarshaling {
  required public init(object: MarshaledObject) throws
  public typealias ConvertibleType = PopularItem
  public typealias Value = PopularItem
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RepeatingTask : ObjectiveC.NSObject {
  @objc override convenience dynamic public init()
  @objc deinit
  public func stop()
}
@_hasMissingDesignatedInitializers final public class VolleyballPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> VolleyballPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> VolleyballPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> VolleyballPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> VolleyballPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> VolleyballPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> VolleyballPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> VolleyballPlayerDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SquashStatistics : MatchStatistics {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CounterStrikePlayerStatistics : PlayerStatistics {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TableTennisDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> TableTennisDetailsParams
  @discardableResult
  final public func includeEvents() -> TableTennisDetailsParams
  @discardableResult
  final public func includeOdds() -> TableTennisDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> TableTennisDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> TableTennisDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> TableTennisDetailsParams
  @discardableResult
  final public func includeVenue() -> TableTennisDetailsParams
  @discardableResult
  final public func includeAttendance() -> TableTennisDetailsParams
  @discardableResult
  final public func includeStatistics() -> TableTennisDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> TableTennisDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> TableTennisDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> TableTennisDetailsParams
  @discardableResult
  final public func includeCommentary() -> TableTennisDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> TableTennisDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class WaterPoloPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> WaterPoloPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> WaterPoloPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> WaterPoloPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> WaterPoloPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> WaterPoloPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> WaterPoloPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> WaterPoloPlayerDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CyclingRaceStageDetails : Details {
  final public var competitors: [CyclingRider]? {
    get
  }
  final public var competitorStatistics: [CyclingRider : [CyclingRiderStatistics]]? {
    get
  }
  final public var teams: [CyclingTeam]? {
    get
  }
  final public var races: [CyclingRace]? {
    get
  }
  final public var stageScores: CyclingRaceScore? {
    get
  }
  @objc deinit
}
public struct CyclingEndpointLocations {
  public var departureCity: Swift.String {
    get
  }
  public var arrivalCity: Swift.String {
    get
  }
  public var distance: CyclingDistance? {
    get
  }
}
public struct CyclingDistance {
  public var name: Swift.String {
    get
  }
  public var distance: Swift.Float {
    get
  }
  public var unit: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class RugbyTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> RugbyTeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> RugbyTeamDetailsParams
  @discardableResult
  final public func includeSquad() -> RugbyTeamDetailsParams
  @discardableResult
  final public func includeRoles() -> RugbyTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> RugbyTeamDetailsParams
  @discardableResult
  final public func includeStages() -> RugbyTeamDetailsParams
  @discardableResult
  final public func includeManager() -> RugbyTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> RugbyTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> RugbyTeamDetailsParams
  @objc deinit
}
public enum LocksmithError : Swift.String, Swift.Error {
  case allocate
  case authFailed
  case decode
  case duplicate
  case interactionNotAllowed
  case noError
  case notAvailable
  case notFound
  case param
  case requestNotSet
  case typeNotFound
  case unableToClear
  case undefined
  case unimplemented
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FutsalPlayerStatistics : PlayerStatistics, CardsStatistics {
  @objc deinit
}
public protocol Marshaling {
  associatedtype MarshalType : MarshaledObject
  func marshaled() -> Self.MarshalType
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RallyStatistics : MotorsportStatistics {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RallyDriverStatistics : MotorsportDriverStatistics {
  final public var isGap: Swift.Bool {
    get
  }
  @objc deinit
}
public protocol TennisTeamPlayerDetailsProtocol {
  var yearTurnedPro: Swift.Int? { get }
  var birthDate: Foundation.Date? { get }
  var nationality: Country? { get }
  var height: Swift.Int? { get }
  var weight: Swift.Int? { get }
  var favouriteSurface: TennisGround? { get }
  var highestSinglesRanking: TennisRanking? { get }
  var highestDoublesRanking: TennisRanking? { get }
  var preferredHand: PreferredHand? { get }
  var ageTurnedPro: Swift.Int? { get }
  var ageStarted: Swift.Int? { get }
  var singlesRanking: TennisTeamRank? { get }
  var doublesRanking: TennisTeamRank? { get }
  var groundStats: [TennisGround : [TennisPlayerStatistics]]? { get }
  var singlesSurfaceStats: [Swift.Int : [TennisGround : [TennisPlayerStatistics]]]? { get }
  var doublesSurfaceStats: [Swift.Int : [TennisGround : [TennisPlayerStatistics]]]? { get }
  var mixedSurfaceStats: [Swift.Int : [TennisGround : [TennisPlayerStatistics]]]? { get }
  var singlesRankingByYear: [Swift.Int : Swift.Int]? { get }
  var doublesRankingByYear: [Swift.Int : Swift.Int]? { get }
  var mixedRankingByYear: [Swift.Int : Swift.Int]? { get }
}
@_hasMissingDesignatedInitializers final public class TableTennisTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> TableTennisTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> TableTennisTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> TableTennisTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> TableTennisTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> TableTennisTournamentDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PesapalloPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> PesapalloPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> PesapalloPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> PesapalloPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> PesapalloPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> PesapalloPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> PesapalloPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> PesapalloPlayerDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class MotorbikesRace : MotorsportRaceWithCircut<MotorbikesSport, MotorbikesDriver, MotorbikesDriverStatistics> {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Venue : SportRadarModel {
  public var id: Swift.Int {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var city: Swift.String? {
    get
  }
  public var description: Swift.String? {
    get
  }
  public var country: Country? {
    get
  }
  public var capacity: Swift.Int? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SpeedwayDriverDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> SpeedwayDriverDetailsParams
  @discardableResult
  final public func includeSeasons() -> SpeedwayDriverDetailsParams
  @discardableResult
  final public func includeTournaments() -> SpeedwayDriverDetailsParams
  @discardableResult
  final public func includeRoles() -> SpeedwayDriverDetailsParams
  @discardableResult
  final public func includeTeams() -> SpeedwayDriverDetailsParams
  @discardableResult
  final public func includeTotalStats() -> SpeedwayDriverDetailsParams
  @discardableResult
  final public func includeTeamStats() -> SpeedwayDriverDetailsParams
  @objc deinit
}
public enum Fishnet {
}
extension Fishnet {
  public enum Sport : Swift.Int {
    case soccer
    case basketball
    case baseball
    case iceHockey
    case aussieRules
    case bandy
    case floorball
    case fieldHockey
    case futsal
    case tennis
    case tableTennis
    case handball
    case badminton
    case squash
    case darts
    case waterPolo
    case snooker
    case volleyball
    case beachVolley
    case rugby
    case americanFootball
    case counterStrike
    case leagueOfLegends
    case dota2
    case formula1
    case pesapallo
    case rally
    case nascar
    case motorsport
    case motorbikes
    case cycling
    case speedway
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
public enum MotorsportStatusTypes : Swift.Int {
  case running
  case finished
  case redFlag
  case yellowFlag
  case redAndYellowStripedFlag
  case whiteFlag
  case safetyCar
  case notStarted
  case warmup
  case inGrid
  case cancelled
  case gridMustBeCleared
  case interrupted
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum EventType : Swift.Int, Swift.CaseIterable {
  case unknown
  case funFact
  case matchStarted
  case temporaryInteruptionOver
  case matchEnded
  case currentPeriod
  case secondPeriodStarted
  case periodStarted
  case scoreChanged
  case scoreAfterNormal
  case scoreAfterExtratime
  case scoreAfterPenalties
  case scoreAfterPeriod1
  case scoreAfterPeriod2
  case scoreAfterPeriod3
  case scoreAfterPeriod4
  case scoreAfterPeriod5
  case yellowCard
  case scoreInExtraPeriod1
  case scoreInExtraPeriod2
  case suspension
  case redCardAfterSecondYellow
  case blueCard
  case redCard
  case substitution
  case cornerKicksForATeam
  case scoreAfterPeriod6
  case scoreAfterPeriod7
  case scoreAfterPeriod8
  case scoreAfterPeriod9
  case lineupAvailable
  case injuryTimeShown
  case injuryTimePlayed
  case ballPossession
  case freekickTaken
  case goalkickTaken
  case throwinTaken
  case offside
  case cornerKickTaken
  case shotOnTarget
  case shotOffTarget
  case goalkeeperSave
  case playerInjured
  case penaltyRewarded
  case weatherCondition
  case attendance
  case playerGoesToInjury
  case playerBackFromInjury
  case shotBlocked
  case penaltyMissed
  case penaltyShot
  case kickoffTeam
  case matchStatus
  case pitchCondition
  case goalCanceled
  case firstServer
  case matchAboutToStart
  case tennisScoreChanged
  case ballInPlay
  case tennisFirstServeFault
  case wonJumpBall
  case rebound
  case timeout
  case timeStartStop
  case scoreAttemptMissed
  case timeoutOver
  case suspensionOver
  case emptyNet
  case emptyNetOver
  case freeThrow
  case tennisServiceTaken
  case playResumesAfterGoal
  case matchtime
  case currentServe
  case scrumAwarded
  case goalUnderReview
  case scrumWon
  case conversionMissed
  case lineoutAwarded
  case throwin
  case gameOn
  case toiletBreak
  case toiletBreakOver
  case stopMatch
  case stopMatchEnded
  case trainerCalled
  case trainerCalledOver
  case wonCoinToss
  case whoDecideService
  case matchCalled
  case startPlayOnLeft
  case matchSituation
  case ballCoordinates
  case ballRecycled
  case ballKickedDownfield
  case scrumReset
  case lineoutWon
  case tapAndGo
  case kickToTouch
  case twentyTwoDropOut
  case temperature
  case windCondition
  case penaltyTry
  case conversion
  case penaltyGoalScored
  case dropGoal
  case turnover
  case attemptingKickAtGoal
  case televisionMatchOfficial
  case dropGoalAttempt
  case deniedTry
  case deniedDropGoal
  case playersWarmingUp
  case foul
  case penaltyAdvantage
  case playersOnPitch
  case playAboutToStart
  case dropOut
  case twentyMRestart
  case fortyTwenty
  case coinToss
  case sessionStarted
  case sessionFinished
  case inningsStarted
  case inningsFinished
  case overStarted
  case overFinished
  case bowlerRunningIn
  case ballFinished
  case pitchMap
  case ballHit
  case dotBall
  case boundary
  case runs
  case oneShort
  case extrasNoBall
  case extrasWide
  case extrasBye
  case extrasLegBye
  case extrasPenaltyRuns
  case freeHit
  case dismissalRetired
  case dismissalBowled
  case dismissalTimedOut
  case dismissalCaught
  case dismissalHandledTheBall
  case dismissalHitBallTwice
  case dismissalHitWicket
  case dismissalLbw
  case dismissalObstructingTheField
  case dismissalRunOut
  case dismissalStumped
  case deadBall
  case wicketCommon
  case appeal
  case thirdUmpire
  case decisionReview
  case decisionReviewResult
  case batsmanComingOn
  case bowlerChange
  case retiredHurt
  case followOn
  case newBall
  case duckworthEwis
  case defensiveFoul
  case steal
  case technicalBallRuleFault
  case technicalRuleFault
  case exclusion
  case tvTimeoutStart
  case tvTimeoutStop
  case replacement
  case passivePlay
  case passivePlayCalled
  case passivePlayCancelled
  case seventhPlayer
  case activeGoalkeeper
  case attackingView
  case matchSituationDangerousAttackEvent
  case matchSituationSafeEvent
  case matchSituationAttackingEvent
  case timeRunning
  case interrupted
  case cancelled
  case stealBasket
  case turnoverBasket
  case shotBlockedBasket
  case videoAssistantRefereeRequestEvent
  case videoAssistantRefereeResponseEvent
  case tennisLastPoint
  case raceRunning
  case raceFinished
  case redFlag
  case yellowFlag
  case redAndYellowStripedFlag
  case whiteFlag
  case safetyCar
  case raceNotStarted
  case warmup
  case inGrid
  case raceCancelled
  case gridMustBeCleared
  case raceCompleted
  case raceClosed
  case preliminary
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [EventType]
  public typealias RawValue = Swift.Int
  public static var allCases: [EventType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MatchRound {
  @objc deinit
}
public enum CupRoundType : Swift.Int {
  case round1
  case round2
  case round7
  case final
  case bronze
  case semifinals
  case quarterFinals
  case qualificationRound
  case qualificationRound1
  case qualificationRound2
  case qualificationRound3
  case qualificationRound7
  case r16
  case r32
  case r64
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class TableRound : MatchRound, Swift.Comparable {
  final public let index: Swift.Int
  public static func < (lhs: TableRound, rhs: TableRound) -> Swift.Bool
  public static func == (lhs: TableRound, rhs: TableRound) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MatchCupRound : MatchRound, Swift.Comparable {
  final public let roundType: CupRoundType
  final public let name: Swift.String?
  final public let shortNname: Swift.String?
  public static func == (lhs: MatchCupRound, rhs: MatchCupRound) -> Swift.Bool
  public static func < (lhs: MatchCupRound, rhs: MatchCupRound) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AnySeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> AnySeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> AnySeasonDetailsParams
  @discardableResult
  final public func includeRankingTable() -> AnySeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTable() -> AnySeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> AnySeasonDetailsParams
  @discardableResult
  final public func includeGoals() -> AnySeasonDetailsParams
  @discardableResult
  final public func includeOwnGoals() -> AnySeasonDetailsParams
  @discardableResult
  final public func includeAssists() -> AnySeasonDetailsParams
  @discardableResult
  final public func includeCards() -> AnySeasonDetailsParams
  @discardableResult
  final public func includePlayerStats() -> AnySeasonDetailsParams
  @objc deinit
}
public enum SubscriptionTag {
  case match
  case tournament
  case team
  case stage
  case event
  public static func == (a: SubscriptionTag, b: SubscriptionTag) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum FavouriteTag : Swift.String {
  case match
  case tournament
  case team
  case stage
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol DetailsLoadableGeneric : AnyObject {
  associatedtype GD
  associatedtype GP : Params
  func loadGenericDetails(with params: Self.GP, completion: @escaping (Response<Self.GD>) -> Swift.Void)
}
public protocol DetailsLoadable : AnyObject {
  associatedtype D : Details
  associatedtype P : Params
  @available(*, deprecated, message: "Use details from loadDetails(with:completion:); Will be removed in SDK version 4.0.")
  var details: Self.D? { get }
  func loadDetails(with params: Self.P, completion: @escaping (Response<Self.D>) -> Swift.Void)
}
public protocol RepeatingDetailsLoadableGeneric : AnyObject {
  associatedtype GD
  associatedtype GP : Params
  func trackGenericDetails(with params: Self.GP, completion: @escaping (RepeatingResponse<Self.GD>) -> Swift.Void) -> RepeatingTask
}
public protocol RepeatingDetailsLoadable : AnyObject {
  associatedtype D : Details
  associatedtype P : Params
  @available(*, deprecated, message: "Use details from trackDetails(with:completion:); Will be removed in SDK version 4.0.")
  var details: Self.D? { get }
  func trackDetails(with params: Self.P, completion: @escaping (RepeatingResponse<Self.D>) -> Swift.Void) -> RepeatingTask
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TennisMatch : BaseTennisMatch {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BeachVolleyPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BeachVolleyPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> BeachVolleyPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> BeachVolleyPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> BeachVolleyPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> BeachVolleyPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> BeachVolleyPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> BeachVolleyPlayerDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RankingTableStatistics : Statistics {
  public var isPosition: Swift.Bool {
    get
  }
  public var isPositionChange: Swift.Bool {
    get
  }
  public var isDraws: Swift.Bool {
    get
  }
  public var isGoalDiff: Swift.Bool {
    get
  }
  public var isGoalsAgainst: Swift.Bool {
    get
  }
  public var isGoalsFor: Swift.Bool {
    get
  }
  public var isLosses: Swift.Bool {
    get
  }
  public var isMatchesPlayed: Swift.Bool {
    get
  }
  public var isPoints: Swift.Bool {
    get
  }
  public var isWins: Swift.Bool {
    get
  }
  public var isNormalTimeLoss: Swift.Bool {
    get
  }
  public var isOverTimeLoss: Swift.Bool {
    get
  }
  public var isNormalTimeWin: Swift.Bool {
    get
  }
  public var isOverTimeWin: Swift.Bool {
    get
  }
  public var isConfLoss: Swift.Bool {
    get
  }
  public var isConfWin: Swift.Bool {
    get
  }
  public var isDivLoss: Swift.Bool {
    get
  }
  public var isDivWin: Swift.Bool {
    get
  }
  public var isPct: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class LeagueOfLegendsTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> LeagueOfLegendsTeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> LeagueOfLegendsTeamDetailsParams
  @discardableResult
  final public func includeSquad() -> LeagueOfLegendsTeamDetailsParams
  @discardableResult
  final public func includeRoles() -> LeagueOfLegendsTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> LeagueOfLegendsTeamDetailsParams
  @discardableResult
  final public func includeStages() -> LeagueOfLegendsTeamDetailsParams
  @discardableResult
  final public func includeManager() -> LeagueOfLegendsTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> LeagueOfLegendsTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> LeagueOfLegendsTeamDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RecommendationController : BaseController {
  public func getPopularMatches(completion: @escaping (Response<[PopularItem]>) -> Swift.Void)
  public func getPopularTournaments(completion: @escaping (Response<[PopularItem]>) -> Swift.Void)
  public func getPopularTeams(completion: @escaping (Response<[PopularItem]>) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Dota2TournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> Dota2TournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> Dota2TournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> Dota2TournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> Dota2TournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> Dota2TournamentDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FloorballTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> FloorballTeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> FloorballTeamDetailsParams
  @discardableResult
  final public func includeSquad() -> FloorballTeamDetailsParams
  @discardableResult
  final public func includeRoles() -> FloorballTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> FloorballTeamDetailsParams
  @discardableResult
  final public func includeStages() -> FloorballTeamDetailsParams
  @discardableResult
  final public func includeManager() -> FloorballTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> FloorballTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> FloorballTeamDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class MotorbikesController : BaseController, GenericMotorsportController {
  final public func toGenericMotorsportController() -> GenericMotorsportController?
  final public func loadSeasons(forMotorbikes filterMmotorbikes: [MotorbikesSport.Type]?, completion: @escaping (Response<[MotorbikesSeason]>) -> Swift.Void)
  final public func loadActiveSeasons(forMotorbikes filterMmotorbikes: [MotorbikesSport.Type]?, completion: @escaping (Response<[MotorbikesSeason]>) -> Swift.Void)
  final public func loadLastSeasonsStages(forMotorbikes filterMmotorbikes: [MotorbikesSport.Type]?, completion: @escaping (Response<[MotorbikesRaceStage]?>) -> Swift.Void)
  final public func loadStagesForSeason(season: MotorbikesSeason, completion: @escaping (Response<[MotorbikesRaceStage]>) -> Swift.Void)
  final public func getSeason(by id: Swift.Int, completion: @escaping (Response<MotorbikesSeason>) -> Swift.Void)
  final public func getStage(by id: Swift.Int, completion: @escaping (Response<MotorbikesRaceStage>) -> Swift.Void)
  final public func loadGenericSeasons(completion: @escaping (Response<[Season]>) -> Swift.Void)
  final public func loadGenericActiveSeason(completion: @escaping (Response<Season>) -> Swift.Void)
  final public func loadGenericStagesForSeason(season: Season, completion: @escaping (Response<[Contest]>) -> Swift.Void)
  final public func loadGenericLastSeasonStages(completion: @escaping (Response<[Contest]?>) -> Swift.Void)
  final public func getGenericSeason(by id: Swift.Int, completion: @escaping (Response<Season>) -> Swift.Void)
  final public func getGenericStage(by id: Swift.Int, completion: @escaping (Response<Contest>) -> Swift.Void)
  final public func loadGenericActiveSeasons(completion: @escaping (Response<[Season]>) -> Swift.Void)
  final public func loadGenericLastSeasonsStages(completion: @escaping (Response<[Contest]?>) -> Swift.Void)
  @objc deinit
}
public struct BreakTime {
  public let start: Foundation.Date?
  public let duration: Foundation.TimeInterval
}
@_hasMissingDesignatedInitializers public class PointFlow {
  public var periodIndex: Swift.Int? {
    get
  }
  public var groups: [PointFlowStructureGroup]? {
    get
  }
  public var pointItems: [PointFlowStructureGroup : [PointFlowStructureItem]]? {
    get
  }
  public var lastGroup1Score: Swift.Int {
    get
  }
  public var lastGroup2Score: Swift.Int {
    get
  }
  public func getGroups() -> [PointFlowStructureGroup]?
  public func getItemsForGroup(group: PointFlowStructureGroup) -> [PointFlowStructureItem]?
  public func hasActiveGroup() -> Swift.Bool
  @objc deinit
}
public struct PointFlowStructureGroup : Swift.Hashable {
  public var id: Swift.Int? {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var groupStartingTeam: Team? {
    get
  }
  public var groupScoringTeam: Team? {
    get
  }
  public var team1Score: Swift.Int? {
    get
  }
  public var team2Score: Swift.Int? {
    get
  }
  public var active: Swift.Bool? {
    get
  }
  public var timestamp: Foundation.Date? {
    get
  }
  public var periodIndex: Swift.Int? {
    get
  }
  public var isDummy: Swift.Bool {
    get
  }
  public var tiebreak: Swift.String? {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: PointFlowStructureGroup, rhs: PointFlowStructureGroup) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct PointFlowStructureItem : Swift.Hashable {
  public let event: TennisScoreEvent?
  public var scoringTeam: TennisTeam? {
    get
  }
  public var scoringFlag: TennisPointType? {
    get
  }
  public var team1Score: Swift.Int? {
    get
  }
  public var team2Score: Swift.Int? {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: PointFlowStructureItem, rhs: PointFlowStructureItem) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class NascarSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> NascarSeasonDetailsParams
  @discardableResult
  final public func includeStages() -> NascarSeasonDetailsParams
  @discardableResult
  final public func includeDrivers() -> NascarSeasonDetailsParams
  @discardableResult
  final public func includeDriverStats() -> NascarSeasonDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class NascarDriverStatistics : MotorsportDriverStatistics {
  final public var isGap: Swift.Bool {
    get
  }
  final public var isBonusPoints: Swift.Bool {
    get
  }
  final public var isLaps: Swift.Bool {
    get
  }
  final public var isGrid: Swift.Bool {
    get
  }
  final public var isLapsLed: Swift.Bool {
    get
  }
  final public var isStatus: Swift.Bool {
    get
  }
  final public var isTop5: Swift.Bool {
    get
  }
  final public var isTop10: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FavouritesController {
  final public func getFavouriteIds(response: @escaping (Response<[FavouriteTag : [Swift.Int]]>) -> Swift.Void)
  final public func getFavouriteMatchIds(response: @escaping (Response<Swift.Array<Swift.Int>>) -> Swift.Void)
  final public func getFavouriteTeamIds(response: @escaping (Response<Swift.Array<Swift.Int>>) -> Swift.Void)
  final public func getFavouriteStageIds(response: @escaping (Response<Swift.Array<Swift.Int>>) -> Swift.Void)
  final public func getFavouriteTournamentIds(response: @escaping (Response<Swift.Array<Swift.Int>>) -> Swift.Void)
  final public func addFavouriteId(favouriteId: Swift.Int, tag: FavouriteTag, response: @escaping (Response<Swift.Array<Swift.Int>>) -> Swift.Void)
  final public func addFavouriteMatchId(matchId: Swift.Int, response: @escaping (Response<Swift.Array<Swift.Int>>) -> Swift.Void)
  final public func addFavouriteTeamId(teamId: Swift.Int, response: @escaping (Response<Swift.Array<Swift.Int>>) -> Swift.Void)
  final public func addFavouriteTournamentId(tournamentId: Swift.Int, response: @escaping (Response<Swift.Array<Swift.Int>>) -> Swift.Void)
  final public func addFavouriteStageId(stageId: Swift.Int, response: @escaping (Response<Swift.Array<Swift.Int>>) -> Swift.Void)
  final public func removeFavouriteId(favouriteId: Swift.Int, tag: FavouriteTag, response: @escaping (Response<Swift.Array<Swift.Int>>) -> Swift.Void)
  final public func removeFavouriteMatch(matchId: Swift.Int, response: @escaping (Response<Swift.Array<Swift.Int>>) -> Swift.Void)
  final public func removeFavouriteTeam(teamId: Swift.Int, response: @escaping (Response<Swift.Array<Swift.Int>>) -> Swift.Void)
  final public func removeFavouriteTournament(tournamentId: Swift.Int, response: @escaping (Response<Swift.Array<Swift.Int>>) -> Swift.Void)
  final public func removeFavouriteStage(stageId: Swift.Int, response: @escaping (Response<Swift.Array<Swift.Int>>) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BadmintonSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BadmintonSeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> BadmintonSeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> BadmintonSeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> BadmintonSeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> BadmintonSeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> BadmintonSeasonDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BasketballPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BasketballPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> BasketballPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> BasketballPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> BasketballPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> BasketballPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> BasketballPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> BasketballPlayerDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SoccerDetails : LineupsRankingContestDetails<SoccerTeam, SoccerPlayer, SoccerStatistics> {
  final public var ballCoordinate: ContesterCoordinate<SoccerTeam>? {
    get
  }
  final public var tableComparison: [Any]? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AussieRulesDetails : LineupsRankingContestDetails<AussieRulesTeam, AussieRulesPlayer, AussieRulesStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FutsalDetails : LineupsRankingContestDetails<FutsalTeam, FutsalPlayer, FutsalStatistics> {
  final public var ballCoordinate: ContesterCoordinate<FutsalTeam>? {
    get
  }
  final public var tableComparison: [Any]? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class WaterPoloDetails : LineupsRankingContestDetails<WaterPoloTeam, WaterPoloPlayer, WaterPoloStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BasketballDetails : LineupsRankingContestDetails<BasketballTeam, BasketballPlayer, BasketballStatistics> {
  final public var ballCoordinate: ContesterCoordinate<BasketballTeam>? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DartsDetails : RankingContestDetails<DartsTeam, DartsPlayer, DartsStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SnookerDetails : RankingContestDetails<SnookerTeam, SnookerPlayer, SnookerStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class IceHockeyDetails : LineupsRankingContestDetails<IceHockeyTeam, IceHockeyPlayer, IceHockeyStatistics> {
  final public var ballCoordinate: ContesterCoordinate<IceHockeyTeam>? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BandyDetails : LineupsRankingContestDetails<BandyTeam, BandyPlayer, BandyStatistics> {
  final public var ballCoordinate: ContesterCoordinate<BandyTeam>? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FloorballDetails : LineupsRankingContestDetails<FloorballTeam, FloorballPlayer, FloorballStatistics> {
  final public var ballCoordinate: ContesterCoordinate<FloorballTeam>? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FieldHockeyDetails : LineupsRankingContestDetails<FieldHockeyTeam, FieldHockeyPlayer, FieldHockeyStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class HandballDetails : LineupsRankingContestDetails<HandballTeam, HandballPlayer, HandballStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BadmintonDetails : MatchDetails<BadmintonTeam, BadmintonPlayer, BadmintonStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SquashDetails : MatchDetails<SquashTeam, SquashPlayer, SquashStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class VolleyballDetails : LineupsRankingContestDetails<VolleyballTeam, VolleyballPlayer, VolleyballStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BeachVolleyDetails : LineupsRankingContestDetails<BeachVolleyTeam, BeachVolleyPlayer, BeachVolleyStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RugbyDetails : LineupsRankingContestDetails<RugbyTeam, RugbyPlayer, RugbyStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BaseballDetails : LineupsRankingContestDetails<BaseballTeam, BaseballPlayer, BaseballStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AmericanFootballDetails : LineupsRankingContestDetails<AmericanFootballTeam, AmericanFootballPlayer, AmericanFootballStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TennisDetails : MatchDetails<TennisTeam, TennisPlayer, TennisStatistics> {
  final public var pointsFlow: PointFlow? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TableTennisDetails : MatchDetails<TableTennisTeam, TableTennisPlayer, TableTennisStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PesapalloDetails : LineupsRankingContestDetails<PesapalloTeam, PesapalloPlayer, PesapalloStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CounterStrikeDetails : RankingContestDetails<CounterStrikeTeam, CounterStrikePlayer, CounterStrikeStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class LeagueOfLegendsDetails : RankingContestDetails<LeagueOfLegendsTeam, LeagueOfLegendsPlayer, LeagueOfLegendsStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class Dota2Details : RankingContestDetails<Dota2Team, Dota2Player, DotaStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SpeedwayDetails : RankingContestDetails<SpeedwayTeam, SpeedwayDriver, SpeedwayStatistics> {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CyclingRace : SportRadarModel {
  final public var id: Swift.Int
  final public var name: Swift.String {
    get
  }
  final public var startTime: Foundation.Date? {
    get
  }
  final public var time: CountingContestTime? {
    get
  }
  final public var startAndFinish: CyclingEndpointLocations? {
    get
  }
  final public var status: CyclingStatus? {
    get
  }
  final public var classification: CyclingRaceClassification? {
    get
  }
  final public var winner: CyclingRider? {
    get
  }
  final public var competitors: [CyclingRider] {
    get
  }
  @objc deinit
}
public enum CyclingRaceClassification : Swift.String {
  case flat
  case mediumMountain
  case highMountain
  case individualTimeTrial
  case teamTimeTrial
  case noClassification
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class CyclingStageDiscipline : ContestWithDetails<CyclingRider, CyclingStageDisciplineDetails, DetailsCoverage, CyclingStatus, CyclingRaceScore, CyclingRacePosition, CyclingSport> {
  final public var name: Swift.String {
    get
  }
  final public var startDate: Foundation.Date? {
    get
  }
  final public var endDate: Foundation.Date? {
    get
  }
  @objc deinit
}
extension CyclingStageDiscipline : DetailsLoadable {
  final public func loadDetails(with params: CyclingStageDisciplineDetailsParams, completion: @escaping (Response<CyclingStageDisciplineDetails>) -> Swift.Void)
  public typealias D = CyclingStageDisciplineDetails
  public typealias P = CyclingStageDisciplineDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CyclingStageDisciplineDetails : Details {
  final public var competitors: [CyclingRider]? {
    get
  }
  final public var competitorStatistics: [CyclingRider : [CyclingRiderStatistics]]? {
    get
  }
  final public var raceStages: [CyclingRaceStage]? {
    get
  }
  final public var stageScores: CyclingRaceScore? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PesapalloSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> PesapalloSeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> PesapalloSeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> PesapalloSeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> PesapalloSeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> PesapalloSeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> PesapalloSeasonDetailsParams
  @objc deinit
}
public struct TeamsHead2Head {
  public let team1: Team?
  public let team2: Team?
  public let nextMatch: Contest?
  public let lastMatches: [Contest]?
  public let lastMatchesOnVenue: [Contest]?
  public let team1VersusStatistics: VersusMatchStats?
  public let team2VersusStatistics: VersusMatchStats?
}
@_hasMissingDesignatedInitializers final public class BandyDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BandyDetailsParams
  @discardableResult
  final public func includeBallCoordinate() -> BandyDetailsParams
  @discardableResult
  final public func includeLineups() -> BandyDetailsParams
  @discardableResult
  final public func includeTeam1LeagueTable() -> BandyDetailsParams
  @discardableResult
  final public func includeTeam2LeagueTable() -> BandyDetailsParams
  @discardableResult
  final public func includeLiveRankingTable() -> BandyDetailsParams
  @discardableResult
  final public func includeStaff() -> BandyDetailsParams
  @discardableResult
  final public func includeEvents() -> BandyDetailsParams
  @discardableResult
  final public func includeOdds() -> BandyDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> BandyDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> BandyDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> BandyDetailsParams
  @discardableResult
  final public func includeVenue() -> BandyDetailsParams
  @discardableResult
  final public func includeAttendance() -> BandyDetailsParams
  @discardableResult
  final public func includeStatistics() -> BandyDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> BandyDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> BandyDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> BandyDetailsParams
  @discardableResult
  final public func includeCommentary() -> BandyDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> BandyDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FieldHockeyTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> FieldHockeyTeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> FieldHockeyTeamDetailsParams
  @discardableResult
  final public func includeSquad() -> FieldHockeyTeamDetailsParams
  @discardableResult
  final public func includeRoles() -> FieldHockeyTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> FieldHockeyTeamDetailsParams
  @discardableResult
  final public func includeStages() -> FieldHockeyTeamDetailsParams
  @discardableResult
  final public func includeManager() -> FieldHockeyTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> FieldHockeyTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> FieldHockeyTeamDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SnookerStatistics : MatchStatistics {
  @objc deinit
}
public enum RepeatingResponse<Value> {
  case onInitialLoad(Value)
  case onValueChanged(Value)
  case onFailure
}
@_hasMissingDesignatedInitializers final public class BandyPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BandyPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> BandyPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> BandyPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> BandyPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> BandyPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> BandyPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> BandyPlayerDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CounterStrikePlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> CounterStrikePlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> CounterStrikePlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> CounterStrikePlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> CounterStrikePlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> CounterStrikePlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> CounterStrikePlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> CounterStrikePlayerDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ESportsPlayer<D, P> : TeamPlayerWithDetails<D, P> where D : Details, P : Params {
  public var mediaUrls: SocialMediaUrls? {
    get
  }
  @objc deinit
}
public struct SocialMediaUrls {
  public let twitter: Swift.String?
  public let facebook: Swift.String?
  public let twitch: Swift.String?
  public let steam: Swift.String?
}
@_hasMissingDesignatedInitializers final public class LeagueOfLegendsSeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> LeagueOfLegendsSeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> LeagueOfLegendsSeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> LeagueOfLegendsSeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> LeagueOfLegendsSeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> LeagueOfLegendsSeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> LeagueOfLegendsSeasonDetailsParams
  @objc deinit
}
public protocol NotificationSubscribable {
  var id: Swift.Int { get }
  var subscriptionType: SubscriptionTag { get }
  var sportId: Swift.Int { get }
}
public struct NotificationSubscription : NotificationSubscribable, Swift.Hashable {
  public var id: Swift.Int {
    get
  }
  public var subscriptionType: SubscriptionTag {
    get
  }
  public var sport: AnySport {
    get
  }
  public var sportId: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: NotificationSubscription, b: NotificationSubscription) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class BaseNotificationsController {
  public func registerForPushNotifications(deviceToken: Foundation.Data, completion: @escaping (Response<Swift.Bool>) -> Swift.Void)
  public func subscribeTo(model: NotificationSubscribable, eventTypes: Swift.Set<NotificationEventType>, delay: Swift.Double = 0, completion: @escaping (Response<Swift.Bool>) -> Swift.Void)
  public func subscribeTo(notificationSubscribables: [NotificationSubscribable], eventTypes: Swift.Set<NotificationEventType>, delay: Swift.Double = 0, completion: @escaping (Response<Swift.Bool>) -> Swift.Void)
  public func subscribeToMatch(matchId: Swift.Int, sport: AnySport, eventTypes: Swift.Set<NotificationEventType>, delay: Swift.Double = 0, completion: @escaping (Response<Swift.Bool>) -> Swift.Void)
  public func subscribeToStage(stageId: Swift.Int, sport: AnySport, eventTypes: Swift.Set<NotificationEventType>, delay: Swift.Double = 0, completion: @escaping (Response<Swift.Bool>) -> Swift.Void)
  public func subscribeToTournament(tournamentId: Swift.Int, sport: AnySport, eventTypes: Swift.Set<NotificationEventType>, delay: Swift.Double = 0, completion: @escaping (Response<Swift.Bool>) -> Swift.Void)
  public func subscribeToTeam(teamId: Swift.Int, sport: AnySport, eventTypes: Swift.Set<NotificationEventType>, delay: Swift.Double = 0, completion: @escaping (Response<Swift.Bool>) -> Swift.Void)
  public func subscribeToChannel(channel: Swift.String, completion: @escaping (Response<Swift.Bool>) -> Swift.Void)
  public func unsubscribeFromNotifications(model: NotificationSubscribable, eventTypes: Swift.Set<NotificationEventType>, completion: @escaping (Response<Swift.Bool>) -> Swift.Void)
  public func unsubscribeFromNotifications(models: [NotificationSubscribable], eventTypes: Swift.Set<NotificationEventType>, completion: @escaping (Response<Swift.Bool>) -> Swift.Void)
  public func unsubscribeFromAllNotifications(completion: @escaping (Response<Swift.Bool>) -> Swift.Void)
  public func unsubscribeFromTeam(teamId: Swift.Int, sport: AnySport, eventTypes: Swift.Set<NotificationEventType>, completion: @escaping (Response<Swift.Bool>) -> Swift.Void)
  public func unsubscribeFromTournament(tournamentId: Swift.Int, sport: AnySport, eventTypes: Swift.Set<NotificationEventType>, completion: @escaping (Response<Swift.Bool>) -> Swift.Void)
  public func unsubscribeFromStage(stageId: Swift.Int, sport: AnySport, eventTypes: Swift.Set<NotificationEventType>, completion: @escaping (Response<Swift.Bool>) -> Swift.Void)
  public func unsubscribeFromMatch(matchId: Swift.Int, sport: AnySport, eventTypes: Swift.Set<NotificationEventType>, completion: @escaping (Response<Swift.Bool>) -> Swift.Void)
  public func unsubscribeFromChannel(channel: Swift.String, completion: @escaping (Response<Swift.Bool>) -> Swift.Void)
  public func getEventTypes(for sport: AnySport) -> Swift.Set<NotificationEventType>
  public func getAllSubscriptions(completion: @escaping (Response<[SubscriptionTag : [NotificationSubscription : [NotificationEventType]]]>) -> Swift.Void)
  public func getSubscriptionTypes(model: NotificationSubscribable, completion: @escaping (Response<[NotificationSubscription : [NotificationEventType]]>) -> Swift.Void)
  public func getSubscribedStages(completion: @escaping (Response<[NotificationSubscription : [NotificationEventType]]>) -> Swift.Void)
  public func getSubscribedContests(completion: @escaping (Response<[NotificationSubscription : [NotificationEventType]]>) -> Swift.Void)
  public func getSubscribedContesters(completion: @escaping (Response<[NotificationSubscription : [NotificationEventType]]>) -> Swift.Void)
  public func getSubscribedTournaments(completion: @escaping (Response<[NotificationSubscription : [NotificationEventType]]>) -> Swift.Void)
  public func getAllChannels(completion: @escaping (Response<[Swift.String]>) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SoccerTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> SoccerTeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> SoccerTeamDetailsParams
  @discardableResult
  final public func includeSquad() -> SoccerTeamDetailsParams
  @discardableResult
  final public func includeRoles() -> SoccerTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> SoccerTeamDetailsParams
  @discardableResult
  final public func includeStages() -> SoccerTeamDetailsParams
  @discardableResult
  final public func includeManager() -> SoccerTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> SoccerTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> SoccerTeamDetailsParams
  @objc deinit
}
public enum Response<Value> {
  case onSuccess(Value)
  case onFailure
}
public enum BatchResponse<SuccessValue, FailureValue> {
  case onResult(succeed: [SuccessValue], failed: [FailureValue])
  case onFailure
}
public struct GenericSearchResult {
  public let id: Swift.Int
  public let type: SearchResultType?
  public let name: Swift.String?
  public let sportId: Swift.Int?
  public let country: Country?
  public let gender: Gender?
  public let score: Swift.Float?
  public let tournamentName: Swift.String?
  public let ageTag: Swift.String?
  public let youth: Swift.Bool?
}
public struct MultilingualSearchResult : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public enum SearchResultType {
  case tournament, stage, season, contest, team, player
  public static func == (a: SearchResultType, b: SearchResultType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct MDPSearchResponse {
  public let results: [GenericSearchResult]
}
@_hasMissingDesignatedInitializers public class ResultBooster : ResultFilter {
  public init(filterProperty: ResultPropertyType, boostValue: Swift.String, boostAmount: Swift.Double)
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public enum ResultPropertyType : Swift.String, Swift.Encodable {
  case id
  case docType
  case name
  case youth
  case women
  case sportId
  case country
  case countryCode
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class ResultFilter : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public struct ResultSorting : Swift.Encodable {
  public init(sortProperty: ResultPropertyType, sortOrder: SortOrder)
  public func encode(to encoder: Swift.Encoder) throws
}
public enum SortOrder : Swift.String, Swift.Encodable {
  case desc
  case asc
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class StringFilter : ResultFilter {
  public init(filterProperty: ResultPropertyType, filterValue: [Swift.String])
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TypeFilter : ResultFilter {
  public init(filterProperty: ResultPropertyType, filterValue: [SearchResultType])
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NumericFilter : ResultFilter {
  public init(filterProperty: ResultPropertyType, filterValue: [Swift.Int])
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FloorballStatistics : MatchStatistics {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RallyRace : MotorsportRace<RallySport, RallyDriver, RallyDriverStatistics> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BaseballPlayerStatistics : PlayerStatistics {
  final public var isFieldingGamesPlayed: Swift.Bool {
    get
  }
  final public var isFieldingGamesStarted: Swift.Bool {
    get
  }
  final public var isFieldingTotalChances: Swift.Bool {
    get
  }
  final public var isFieldingPutouts: Swift.Bool {
    get
  }
  final public var isFieldingAssists: Swift.Bool {
    get
  }
  final public var isFieldingErrorsTotal: Swift.Bool {
    get
  }
  final public var isFieldingDoublePlays: Swift.Bool {
    get
  }
  final public var isFieldingPassedBalls: Swift.Bool {
    get
  }
  final public var isFieldingWildPitchesWhileCatching: Swift.Bool {
    get
  }
  final public var isFieldingPercentage: Swift.Bool {
    get
  }
  final public var isFieldingRangeFactor: Swift.Bool {
    get
  }
  final public var isFieldingTriplePlays: Swift.Bool {
    get
  }
  final public var isFieldingErrorsThrowing: Swift.Bool {
    get
  }
  final public var isFieldingErrorsFielding: Swift.Bool {
    get
  }
  final public var isFieldingErrorsInterference: Swift.Bool {
    get
  }
  final public var isHittingGamesPlayed: Swift.Bool {
    get
  }
  final public var isHittingGamesStarted: Swift.Bool {
    get
  }
  final public var isHittingAtBats: Swift.Bool {
    get
  }
  final public var isHittingPlateAppearances: Swift.Bool {
    get
  }
  final public var isHittingTotalRunsScored: Swift.Bool {
    get
  }
  final public var isHittingHits: Swift.Bool {
    get
  }
  final public var isHittingDoubles: Swift.Bool {
    get
  }
  final public var isHittingTriples: Swift.Bool {
    get
  }
  final public var isHittingHomeRuns: Swift.Bool {
    get
  }
  final public var isHittingRunsBattedIn: Swift.Bool {
    get
  }
  final public var isHittingWalks: Swift.Bool {
    get
  }
  final public var isHittingTotalStrikeouts: Swift.Bool {
    get
  }
  final public var isHittingStolenBases: Swift.Bool {
    get
  }
  final public var isHittingCaughtStealing: Swift.Bool {
    get
  }
  final public var isHittingBattingAverage: Swift.Bool {
    get
  }
  final public var isHittingOnBasePercentage: Swift.Bool {
    get
  }
  final public var isHittingSluggingPercentage: Swift.Bool {
    get
  }
  final public var isHittingOnBasePercentagePlusSlugging: Swift.Bool {
    get
  }
  final public var isHittingIsolatedPower: Swift.Bool {
    get
  }
  final public var isHittingBattingAverageOnBallsInPlay: Swift.Bool {
    get
  }
  final public var isHittingWalksPerStrikeout: Swift.Bool {
    get
  }
  final public var isHittingGroundBallToFlyBallRatio: Swift.Bool {
    get
  }
  final public var isHittingExtraBaseHits: Swift.Bool {
    get
  }
  final public var isHittingAtBatsPerHomeRun: Swift.Bool {
    get
  }
  final public var isHittingAtBatsWithRunnersInScoringPosition: Swift.Bool {
    get
  }
  final public var isHittingHitsWithRunnersInScoringPosition: Swift.Bool {
    get
  }
  final public var isHittingGroundBallsIntoDoublePlay: Swift.Bool {
    get
  }
  final public var isHittingPickedOff: Swift.Bool {
    get
  }
  final public var isHittingRunnersOnBaseWithTwoOuts: Swift.Bool {
    get
  }
  final public var isHittingRunsBattedInWithTwoOuts: Swift.Bool {
    get
  }
  final public var isHittingTeamRunnersLeftOnBase: Swift.Bool {
    get
  }
  final public var isHittingTotalBases: Swift.Bool {
    get
  }
  final public var isPitchingOverallGamesPlayed: Swift.Bool {
    get
  }
  final public var isPitchingOverallGamesStarted: Swift.Bool {
    get
  }
  final public var isPitchingOverallWins: Swift.Bool {
    get
  }
  final public var isPitchingOverallLosses: Swift.Bool {
    get
  }
  final public var isPitchingOverallEarnedRunAverage: Swift.Bool {
    get
  }
  final public var isPitchingOverallHolds: Swift.Bool {
    get
  }
  final public var isPitchingOverallSaves: Swift.Bool {
    get
  }
  final public var isPitchingOverallSaveOpportunities: Swift.Bool {
    get
  }
  final public var isPitchingOverallInningsPitched: Swift.Bool {
    get
  }
  final public var isPitchingOverallHitsAllowed: Swift.Bool {
    get
  }
  final public var isPitchingOverallTotalRunsAllowed: Swift.Bool {
    get
  }
  final public var isPitchingOverallEarnedRunsAllowed: Swift.Bool {
    get
  }
  final public var isPitchingOverallHomeRunsAllowed: Swift.Bool {
    get
  }
  final public var isPitchingOverallWalks: Swift.Bool {
    get
  }
  final public var isPitchingOverallTotalStrikeouts: Swift.Bool {
    get
  }
  final public var isPitchingOverallOpponentsBattingAverage: Swift.Bool {
    get
  }
  final public var isPitchingOverallWalksPlusHitsPerInningsPitched: Swift.Bool {
    get
  }
  final public var isPitchingOverallStrikeoutsPer9Innings: Swift.Bool {
    get
  }
  final public var isPitchingOverallStrikeoutsPerWalk: Swift.Bool {
    get
  }
  final public var isPitchingOverallGroundBallToFlyBallRatio: Swift.Bool {
    get
  }
  final public var isPitchingOverallQualityStarts: Swift.Bool {
    get
  }
  final public var isPitchingOverallCompleteGames: Swift.Bool {
    get
  }
  final public var isPitchingOverallShutouts: Swift.Bool {
    get
  }
  final public var isPitchingOverallBattersFaced: Swift.Bool {
    get
  }
  final public var isPitchingOverallBlownSaves: Swift.Bool {
    get
  }
  final public var isPitchingOverallFlyOuts: Swift.Bool {
    get
  }
  final public var isPitchingOverallGroundOuts: Swift.Bool {
    get
  }
  final public var isPitchingOverallHitBatters: Swift.Bool {
    get
  }
  final public var isPitchingOverallIntentionalWalks: Swift.Bool {
    get
  }
  final public var isPitchingOverallPitchCount: Swift.Bool {
    get
  }
  final public var isPitchingOverallTotalStrikes: Swift.Bool {
    get
  }
  final public var isFieldingErrors: Swift.Bool {
    get
  }
  final public var isHittingAtBatsPerStrikeout: Swift.Bool {
    get
  }
  final public var isHittingRunnersLeftOnBase: Swift.Bool {
    get
  }
  final public var isHittingBallsInPlay: Swift.Bool {
    get
  }
  final public var isHittingWalksPerPlateAppearance: Swift.Bool {
    get
  }
  final public var isHittingSecondaryAverage: Swift.Bool {
    get
  }
  final public var isHittingPitchesFaced: Swift.Bool {
    get
  }
  final public var isHittingLineDrive: Swift.Bool {
    get
  }
  final public var isHittingFlyBall: Swift.Bool {
    get
  }
  final public var isHittingPopUp: Swift.Bool {
    get
  }
  final public var isHittingGroundBall: Swift.Bool {
    get
  }
  final public var isHittingSingles: Swift.Bool {
    get
  }
  final public var isHittingIntentionalWalks: Swift.Bool {
    get
  }
  final public var isHittingHitByPitch: Swift.Bool {
    get
  }
  final public var isHittingFieldersChoice: Swift.Bool {
    get
  }
  final public var isHittingReachedOnError: Swift.Bool {
    get
  }
  final public var isHittingCycle: Swift.Bool {
    get
  }
  final public var isHittingStrikesLooking: Swift.Bool {
    get
  }
  final public var isHittingStrikesSwinging: Swift.Bool {
    get
  }
  final public var isHittingTotalStrikes: Swift.Bool {
    get
  }
  final public var isHittingBalls: Swift.Bool {
    get
  }
  final public var isHittingIntentionalBallsTaken: Swift.Bool {
    get
  }
  final public var isHittingDirtBallsFaced: Swift.Bool {
    get
  }
  final public var isHittingFoulBalls: Swift.Bool {
    get
  }
  final public var isHittingPopOuts: Swift.Bool {
    get
  }
  final public var isHittingFlyOuts: Swift.Bool {
    get
  }
  final public var isHittingFlyOutsIntoDoublePlays: Swift.Bool {
    get
  }
  final public var isHittingLineOut: Swift.Bool {
    get
  }
  final public var isHittingLineOutInDoublePlay: Swift.Bool {
    get
  }
  final public var isHittingGroundOuts: Swift.Bool {
    get
  }
  final public var isHittingStrikeoutsLooking: Swift.Bool {
    get
  }
  final public var isHittingStrikeoutsSwinging: Swift.Bool {
    get
  }
  final public var isHittingSacrificeFlys: Swift.Bool {
    get
  }
  final public var isHittingSacrificeHits: Swift.Bool {
    get
  }
  final public var isHittingStolenBasePercentage: Swift.Bool {
    get
  }
  final public var isPitchingOverallOpponentsRunnersLeftOnBase: Swift.Bool {
    get
  }
  final public var isPitchingOverallWildPitches: Swift.Bool {
    get
  }
  final public var isPitchingOverallInningsPitchedFormatted: Swift.Bool {
    get
  }
  final public var isPitchingOverallSinglesAllowed: Swift.Bool {
    get
  }
  final public var isPitchingOverallDoublesAllowed: Swift.Bool {
    get
  }
  final public var isPitchingOverallTriplesAllowed: Swift.Bool {
    get
  }
  final public var isPitchingOverallTotalBasesAllowed: Swift.Bool {
    get
  }
  final public var isPitchingOverallFieldersChoice: Swift.Bool {
    get
  }
  final public var isPitchingOverallReachedOnError: Swift.Bool {
    get
  }
  final public var isPitchingOverallUnearnedRunsAllowed: Swift.Bool {
    get
  }
  final public var isPitchingOverallStrikesLooking: Swift.Bool {
    get
  }
  final public var isPitchingOverallBalls: Swift.Bool {
    get
  }
  final public var isPitchingOverallIntentionalBalls: Swift.Bool {
    get
  }
  final public var isPitchingOverallDirtBalls: Swift.Bool {
    get
  }
  final public var isPitchingOverallFoulBalls: Swift.Bool {
    get
  }
  final public var isPitchingOverallPopOuts: Swift.Bool {
    get
  }
  final public var isPitchingOverallFlyOutsIntoDoublePlays: Swift.Bool {
    get
  }
  final public var isPitchingOverallLineOuts: Swift.Bool {
    get
  }
  final public var isPitchingOverallLineOutsInDoublePlays: Swift.Bool {
    get
  }
  final public var isPitchingOverallGroundOutsIntoDoublePlays: Swift.Bool {
    get
  }
  final public var isPitchingOverallStrikeoutsLooking: Swift.Bool {
    get
  }
  final public var isPitchingOverallStrikeoutsSwinging: Swift.Bool {
    get
  }
  final public var isPitchingOverallSacrififceFlys: Swift.Bool {
    get
  }
  final public var isPitchingOverallSacrificeHits: Swift.Bool {
    get
  }
  final public var isPitchingOverallPickoff: Swift.Bool {
    get
  }
  final public var isPitchingOverallRunnersCaughtStealing: Swift.Bool {
    get
  }
  final public var isPitchingOverallStolenBasesAllowed: Swift.Bool {
    get
  }
  final public var isPitchingOverallBalks: Swift.Bool {
    get
  }
  final public var isPitchingOverallStrikesSwinging: Swift.Bool {
    get
  }
  final public var isFieldingCompleteGames: Swift.Bool {
    get
  }
  final public var isFieldingGamesFinished: Swift.Bool {
    get
  }
  final public var isPitchingOverallGamesTeamLoss: Swift.Bool {
    get
  }
  final public var isPitchingOverallGamesTeamWin: Swift.Bool {
    get
  }
  final public var isHittingGamesFinished: Swift.Bool {
    get
  }
  final public var isPitchingOverallGamesFinished: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DartsDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> DartsDetailsParams
  @discardableResult
  final public func includeLiveRankingTable() -> DartsDetailsParams
  @discardableResult
  final public func includeStaff() -> DartsDetailsParams
  @discardableResult
  final public func includeEvents() -> DartsDetailsParams
  @discardableResult
  final public func includeOdds() -> DartsDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> DartsDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> DartsDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> DartsDetailsParams
  @discardableResult
  final public func includeVenue() -> DartsDetailsParams
  @discardableResult
  final public func includeAttendance() -> DartsDetailsParams
  @discardableResult
  final public func includeStatistics() -> DartsDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> DartsDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> DartsDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> DartsDetailsParams
  @discardableResult
  final public func includeCommentary() -> DartsDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> DartsDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OddsBase<T> : Odds where T : OddsOutcome {
  public var id: Swift.Int {
    get
  }
  public var marketType: Swift.String {
    get
  }
  public var active: Swift.Bool {
    get
  }
  public var outcomes: T? {
    get
  }
  public var genericOutcomes: OddsOutcome? {
    get
  }
  public var bookmaker: Bookmaker? {
    get
  }
  public var matchId: Swift.Int? {
    get
  }
  public func hasEqualsValue(as other: Odds?) -> Swift.Bool
  @objc deinit
}
public protocol Odds : SportRadarModel {
  var id: Swift.Int { get }
  var marketType: Swift.String { get }
  var active: Swift.Bool { get }
  var genericOutcomes: OddsOutcome? { get }
  func hasEqualsValue(as other: Odds?) -> Swift.Bool
  var matchId: Swift.Int? { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TwoWayOdds : OddsBase<HomeAwayOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TwoWayFirstHalfOdds : OddsBase<HomeAwayOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TwoWayIncludingOvertimeOdds : OddsBase<HomeAwayOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class ThreeWayOdds : OddsBase<HomeAwayOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class OverUnderOdds : OddsBase<OverUnderOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class OverUnderCurrentPeriodOdds : OddsBase<OverUnderOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class OverUnderIncludingOvertimeOdds : OddsBase<OverUnderOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class HandicapOdds : OddsBase<HomeAwayStringOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class HandicapFirstHalfOdds : OddsBase<HomeAwayStringOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AsianHandicapOdds : OddsBase<HomeAwayNumberOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AsianHandicapCurrentPeriodOdds : OddsBase<HomeAwayNumberOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AsianHandicapFirstHalfOdds : OddsBase<HomeAwayNumberOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AsianHandicapIncludingOvertimeOdds : OddsBase<HomeAwayNumberOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CurrentPeriodOdds : OddsBase<HomeAwayNumberOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RaceToXPointsOdds : OddsBase<HomeAwayNumberOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TotalFirstHalfOdds : OddsBase<OverUnderOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SpreadOdds : OddsBase<HomeAwayNumberOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DoubleChanceOdds : OddsBase<DoubleChanceOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DrawNoBetOdds : OddsBase<HomeAwayOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class HalfTimeOdds : OddsBase<HomeAwayOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class HalfTimeWhoWinsTheRestOdds : OddsBase<HomeAwayStringOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class WinTennisMatchOdds : OddsBase<HomeAwayOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class WinTennisSetOdds : OddsBase<HomeAwayNumberOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TennisGamesOfSetOdds : OddsBase<HomeAwayNumberOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class ResultThreeSetsOdds : OddsBase<ScoresOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class ResultFiveSetsOdds : OddsBase<ScoresOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class NumberOfSetsOdds : OddsBase<NumberOfSetsOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TotalGamesInMatchOdds : OddsBase<OverUnderOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class WhoScoresXthPointOdds : OddsBase<HomeAwayNumberOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class WinGamesXAndYOdds : OddsBase<HomeAwaySetGamesOddsOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RestOfTheMatchOdds : OddsBase<HomeAwayStringOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RestOfThePeriodOdds : OddsBase<HomeAwayStringOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class GoalNoGoalOdds : OddsBase<GoalNoGoalOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class NextGoalOdds : OddsBase<HomeAwayStringOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class NextGoalHalfTimeOdds : OddsBase<HomeAwayStringOddsOutcome> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CorrectScoreOdds : OddsBase<ScoresOddsOutcome> {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OddsOutcome : SportRadarModel {
  public var id: Swift.Int {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class HomeAwayOddsOutcome : OddsOutcome {
  final public let home: Swift.Float
  final public let away: Swift.Float
  final public let draw: Swift.Float?
  final public let homeBookmakerId: Swift.Int?
  final public let awayBookmakerId: Swift.Int?
  final public let drawBookmakerId: Swift.Int?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class HomeAwayStringOddsOutcome : HomeAwayOddsOutcome {
  final public let extra: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class HomeAwayNumberOddsOutcome : HomeAwayOddsOutcome {
  final public let extra: Swift.Float
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class HomeAwaySetGamesOddsOddsOutcome : HomeAwayOddsOutcome {
  final public let set: Swift.Int
  final public let games: [Swift.Int]
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class OverUnderOddsOutcome : OddsOutcome {
  final public let over: Swift.Float
  final public let under: Swift.Float
  final public let total: Swift.Float
  final public let overBookmakerId: Swift.Int?
  final public let underBookmakerId: Swift.Int?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ScoresOddsOutcome : OddsOutcome {
  final public let scores: [Swift.String : Swift.Float]
  final public let scoresBookmakerIds: [Swift.String : Swift.Int]?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class NumberOfSetsOddsOutcome : OddsOutcome {
  final public let sets: [Swift.Int : Swift.Float]
  final public let setBookmakerIds: [Swift.Int : Swift.Int]?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DoubleChanceOddsOutcome : OddsOutcome {
  final public let homeWinOrDraw: Swift.Float
  final public let awayWinOrDraw: Swift.Float
  final public let homeOrAwayWin: Swift.Float
  final public let homeWinOrDrawBookmakerId: Swift.Int?
  final public let awayWinOrDrawBookmakerId: Swift.Int?
  final public let homeOrAwayWinBookmakerId: Swift.Int?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class GoalNoGoalOddsOutcome : OddsOutcome {
  final public let goal: Swift.Float
  final public let noGoal: Swift.Float
  final public let goalBookmakerId: Swift.Int?
  final public let noGoalBookmakerId: Swift.Int?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class OddsComparison {
  final public let availableOdds: [Odds]?
  final public let bestOdds: [Odds]?
  final public let averageOdds: [Odds]?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Bookmaker : SportRadarModel {
  final public var id: Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BandySeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BandySeasonDetailsParams
  @discardableResult
  final public func includeTeamStatistics() -> BandySeasonDetailsParams
  @discardableResult
  final public func includeCards() -> BandySeasonDetailsParams
  @discardableResult
  final public func includeGoals() -> BandySeasonDetailsParams
  @discardableResult
  final public func includeOwnGoals() -> BandySeasonDetailsParams
  @discardableResult
  final public func includeAssists() -> BandySeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> BandySeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> BandySeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> BandySeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> BandySeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> BandySeasonDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Team : Contester, Swift.Hashable, Swift.Equatable, NotificationSubscribable, DetailsLoadableGeneric {
  public var sportId: Swift.Int {
    get
  }
  public var subscriptionType: SubscriptionTag {
    get
  }
  public var id: Swift.Int {
    get
  }
  public var name: Swift.String {
    get
  }
  public var abbr: Swift.String? {
    get
  }
  public var sport: AnySport {
    get
  }
  public var representsCountry: Swift.Bool {
    get
  }
  public var representedCountry: Country? {
    get
  }
  public var isVirtual: Swift.Bool {
    get
  }
  public var gender: Gender? {
    get
  }
  public var tournamentInfo: Swift.String? {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: Team, rhs: Team) -> Swift.Bool
  public func loadGenericDetails(with params: AnyTeamDetailsParams, completion: @escaping (Response<AnyTeamDetails>) -> Swift.Void)
  public func teamCrestURL(size: ImageSize = .large) -> Swift.String
  public func getTeamSeasonPositions(seasonId: Swift.Int, completion: @escaping (Response<[Swift.Int : ([SeasonPosition], [PromotionRelegation])]>) -> Swift.Void)
  public func getSquad(for seasonId: Swift.Int, completion: @escaping (Response<[TeamPlayer]>) -> Swift.Void)
  public func getSquadWithRoles(for seasonId: Swift.Int, completion: @escaping (Response<TeamSquadResult>) -> Swift.Void)
  public typealias GD = AnyTeamDetails
  public typealias GP = AnyTeamDetailsParams
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public enum ImageSize {
  case large
  case medium
  case small
  public static func == (a: ImageSize, b: ImageSize) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SeasonPosition {
  public let round: Swift.Int
  public let position: Swift.Int
  public let matchId: Swift.Int
  public let moved: PositionMovement?
  public let numberOfRounds: Swift.Int?
  public let numberOfTeams: Swift.Int?
}
public enum PositionMovement {
  case up
  case down
  public static func == (a: PositionMovement, b: PositionMovement) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MotorsportSeasonStatus : Status {
  public var isActive: Swift.Bool {
    get
  }
  public var isEnded: Swift.Bool {
    get
  }
  public var isNotStarted: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class LeagueOfLegendsDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> LeagueOfLegendsDetailsParams
  @discardableResult
  final public func includeLiveRankingTable() -> LeagueOfLegendsDetailsParams
  @discardableResult
  final public func includeStaff() -> LeagueOfLegendsDetailsParams
  @discardableResult
  final public func includeEvents() -> LeagueOfLegendsDetailsParams
  @discardableResult
  final public func includeOdds() -> LeagueOfLegendsDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> LeagueOfLegendsDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> LeagueOfLegendsDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> LeagueOfLegendsDetailsParams
  @discardableResult
  final public func includeVenue() -> LeagueOfLegendsDetailsParams
  @discardableResult
  final public func includeAttendance() -> LeagueOfLegendsDetailsParams
  @discardableResult
  final public func includeStatistics() -> LeagueOfLegendsDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> LeagueOfLegendsDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> LeagueOfLegendsDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> LeagueOfLegendsDetailsParams
  @discardableResult
  final public func includeCommentary() -> LeagueOfLegendsDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> LeagueOfLegendsDetailsParams
  @objc deinit
}
public typealias Player = Contester & Person
public protocol Person {
  var fullname: Swift.String? { get }
  var nationality: Country? { get }
  var birthDate: Foundation.Date? { get }
  var gender: Gender? { get }
  var nickname: Swift.String? { get }
}
public enum MatchStatusType : Swift.Int {
  case unknown
  case notStarted
  case firstPeriod
  case secondPeriod
  case thirdPeriod
  case fourthPeriod
  case fifthPeriod
  case sixthPeriod
  case seventhPeriod
  case eighthPeriod
  case ninthPeriod
  case firstHalf
  case secondHalf
  case firstSet
  case secondSet
  case thirdSet
  case fourthSet
  case fifthSet
  case firstQuarter
  case secondQuarter
  case thirdQuarter
  case fourthQuarter
  case goldenSet
  case started
  case paused
  case halftime
  case awaitingExtraTime
  case overtime
  case firstExtra
  case secondExtra
  case extraTimeHalftime
  case afterExtraTime
  case awaitingPenalties
  case awaitingPenaltiesIceHockey
  case penalties
  case penaltiesNotSoccer
  case penaltiesIceHockey
  case postponed
  case startDelayed
  case cancelled
  case game1
  case game2
  case game3
  case game4
  case game5
  case game6
  case game7
  case interrupted
  case suspended
  case abandoned
  case walkover
  case retired
  case walkoverPlayer1Won
  case walkoverPlayer2Won
  case player1Retired
  case player2Retired
  case defaulted
  case onlyResult
  case ended
  case afterPenalties
  case afterPenaltiesNotSoccer
  case afterPenaltiesIceHockey
  case ags
  case firstBreak
  case secondBreak
  case thirdBreak
  case fourthBreak
  case snookerBreak
  case firstInningsHomeTeam
  case firstInningsAwayTeam
  case secondInningsHomeTeam
  case secondInningsAwayTeam
  case awaitingSuperOver
  case superOverHomeTeam
  case superOverAwayTeam
  case afterSuperOver
  case inningsBreak
  case superOverBreak
  case lunchBreak
  case teaBreak
  case stumps
  case upcoming
  case running
  case finished
  case redFlag
  case yellowFlag
  case redAndYellowStripedFlag
  case whiteFlag
  case safetyCar
  case warmup
  case inGrid
  case gridMustBeCleared
  case completed
  case closed
  case preliminary
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class HandballPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> HandballPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> HandballPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> HandballPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> HandballPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> HandballPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> HandballPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> HandballPlayerDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TennisPlayerDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeManager() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeCompetitions() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeStages() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeYearTurnedPro() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeBirthDate() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeNationality() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeHeight() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeWeight() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeFavouriteSurface() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeHighestSinglesRanking() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeHighestDoublesRanking() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includePreferredHand() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeAgeTurnedPro() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeAgeStarted() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeSinglesRanking() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeDoublesRanking() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeGroundStats() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeSinglesSurfaceStats() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeDoublesSurfaceStats() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeMixedSurfaceStats() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeSinglesRankingByYear() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeDoublesRankingByYear() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeMixedRankingByYear() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeSeasons() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeTournaments() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeRoles() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeTeams() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeTotalStats() -> TennisPlayerDetailsParams
  @discardableResult
  final public func includeTeamStats() -> TennisPlayerDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PesapalloDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> PesapalloDetailsParams
  @discardableResult
  final public func includeLineups() -> PesapalloDetailsParams
  @discardableResult
  final public func includeTeam1LeagueTable() -> PesapalloDetailsParams
  @discardableResult
  final public func includeTeam2LeagueTable() -> PesapalloDetailsParams
  @discardableResult
  final public func includeLiveRankingTable() -> PesapalloDetailsParams
  @discardableResult
  final public func includeStaff() -> PesapalloDetailsParams
  @discardableResult
  final public func includeEvents() -> PesapalloDetailsParams
  @discardableResult
  final public func includeOdds() -> PesapalloDetailsParams
  @discardableResult
  final public func includeMatchOdds() -> PesapalloDetailsParams
  @discardableResult
  final public func includeOddsComparison() -> PesapalloDetailsParams
  @discardableResult
  final public func includeLiveOdds() -> PesapalloDetailsParams
  @discardableResult
  final public func includeVenue() -> PesapalloDetailsParams
  @discardableResult
  final public func includeAttendance() -> PesapalloDetailsParams
  @discardableResult
  final public func includeStatistics() -> PesapalloDetailsParams
  @discardableResult
  final public func includePeriodStatistics() -> PesapalloDetailsParams
  @discardableResult
  final public func includePlayerStatistics() -> PesapalloDetailsParams
  @discardableResult
  final public func includePlayerPeriodStatistics() -> PesapalloDetailsParams
  @discardableResult
  final public func includeCommentary() -> PesapalloDetailsParams
  @discardableResult
  final public func includeMatchStatistics() -> PesapalloDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AnyContest {
  final public var id: Swift.Int {
    get
  }
  final public var sportId: Swift.Int {
    get
  }
  final public var sport: Swift.String {
    get
  }
  final public var tournament: Swift.String {
    get
  }
  final public var stage: Swift.String {
    get
  }
  final public var team1Name: Swift.String {
    get
  }
  final public var team2Name: Swift.String {
    get
  }
  final public var team1Score: Swift.String {
    get
  }
  final public var team2Score: Swift.String {
    get
  }
  final public var team1Image: Swift.String? {
    get
  }
  final public var team2Image: Swift.String? {
    get
  }
  final public var matchStartDate: Foundation.Date? {
    get
  }
  final public var matchTime: Swift.String? {
    get
  }
  final public var status: ContestStatus {
    get
  }
  final public var isLive: Swift.Bool {
    get
  }
  final public var baseContest: Contest? {
    get
  }
  @objc deinit
}
extension AnyContest {
  final public func toSoccerMatch() -> SoccerMatch?
  final public func toWaterPoloMatch() -> WaterPoloMatch?
  final public func toPesapalloMatch() -> PesapalloMatch?
  final public func toBasketballMatch() -> BasketballMatch?
  final public func toHandballMatch() -> HandballMatch?
  final public func toBadmintonMatch() -> BadmintonMatch?
  final public func toSquashMatch() -> SquashMatch?
  final public func toIceHockeyMatch() -> IceHockeyMatch?
  final public func toBandyMatch() -> BandyMatch?
  final public func toFloorballMatch() -> FloorballMatch?
  final public func toTennisMatch() -> TennisMatch?
  final public func toDartsMatch() -> DartsMatch?
  final public func toSnookerMatch() -> SnookerMatch?
  final public func toCounterStrikeMatch() -> CounterStrikeMatch?
  final public func toDota2Match() -> Dota2Match?
  final public func toLeaugeOfLegendsMatch() -> LeagueOfLegendsMatch?
}
extension AnyContest : Swift.Hashable {
  final public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AnyContest, rhs: AnyContest) -> Swift.Bool
  final public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CounterStrikeStatistics : ESportsStatistics {
  public var isHeadshots: Swift.Bool {
    get
  }
  public var isKillDeathRatio: Swift.Bool {
    get
  }
  @objc deinit
}
extension MarshaledObject {
  public func valueOrNil<A>(for key: KeyType) throws -> [Swift.String : A]? where A : ValueType
  public func valueOrNil(for key: KeyType) throws -> Foundation.Date?
}
public protocol UnmarshalingWithContext {
  associatedtype ContextType
  associatedtype ConvertibleType = Self
  static func value(from object: MarshaledObject, inContext context: Self.ContextType) throws -> Self.ConvertibleType
}
public protocol UnmarshalUpdatingWithContext {
  associatedtype ContextType
  mutating func update(object: MarshaledObject, inContext context: Self.ContextType) throws
}
extension MarshaledObject {
  public func value<A>(for key: KeyType, inContext context: A.ContextType) throws -> A where A : UnmarshalingWithContext
  public func value<A>(for key: KeyType, inContext context: A.ContextType) throws -> A? where A : UnmarshalingWithContext
  public func value<A>(for key: KeyType, inContext context: A.ContextType) throws -> [A] where A : UnmarshalingWithContext
  public func value<A>(for key: KeyType, inContext context: A.ContextType) throws -> [A]? where A : UnmarshalingWithContext
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TournametDetails<T, S> : Details, AnyTournametDetails where T : Team, S : Season {
  public var teams: [T]? {
    get
  }
  public var activeSeason: S? {
    get
  }
  public var seasons: [S]? {
    get
  }
  public var defendingChampion: T? {
    get
  }
  public var genericTeams: [Team]? {
    get
  }
  public var genericActiveSeason: Season? {
    get
  }
  public var genericSeasons: [Season]? {
    get
  }
  public var genericDefendingChampion: Team? {
    get
  }
  @objc deinit
}
public protocol AnyTournametDetails {
  var genericTeams: [Team]? { get }
  var genericActiveSeason: Season? { get }
  var genericSeasons: [Season]? { get }
  var genericDefendingChampion: Team? { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SoccerTournamentDetails : TournametDetails<SoccerTeam, SoccerSeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AussieRulesTournamentDetails : TournametDetails<AussieRulesTeam, AussieRulesSeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FutsalTournamentDetails : TournametDetails<FutsalTeam, FutsalSeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class WaterPoloTournamentDetails : TournametDetails<WaterPoloTeam, WaterPoloSeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BasketballTournamentDetails : TournametDetails<BasketballTeam, BasketballSeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DartsTournamentDetails : TournametDetails<DartsTeam, DartsSeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SnookerTournamentDetails : TournametDetails<SnookerTeam, SnookerSeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PesapalloTournamentDetails : TournametDetails<PesapalloTeam, PesapalloSeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class IceHockeyTournamentDetails : TournametDetails<IceHockeyTeam, IceHockeySeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BandyTournamentDetails : TournametDetails<BandyTeam, BandySeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FloorballTournamentDetails : TournametDetails<FloorballTeam, FloorballSeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FieldHockeyTournamentDetails : TournametDetails<FieldHockeyTeam, FieldHockeySeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class HandballTournamentDetails : TournametDetails<HandballTeam, HandballSeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BadmintonTournamentDetails : TournametDetails<BadmintonTeam, BadmintonSeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SquashTournamentDetails : TournametDetails<SquashTeam, SquashSeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class VolleyballTournamentDetails : TournametDetails<VolleyballTeam, VolleyballSeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BeachVolleyTournamentDetails : TournametDetails<BeachVolleyTeam, BeachVolleySeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RugbyTournamentDetails : TournametDetails<RugbyTeam, RugbySeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BaseballTournamentDetails : TournametDetails<BaseballTeam, BaseballSeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AmericanFootballTournamentDetails : TournametDetails<AmericanFootballTeam, AmericanFootballSeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TennisTournamentDetails : TournametDetails<TennisTeam, TennisSeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TableTennisTournamentDetails : TournametDetails<TableTennisTeam, TableTennisSeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CounterStrikeTournamentDetails : TournametDetails<CounterStrikeTeam, CounterStrikeSeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class LeagueOfLegendsTournamentDetails : TournametDetails<LeagueOfLegendsTeam, LeagueOfLegendsSeason> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class Dota2TournamentDetails : TournametDetails<Dota2Team, Dota2Season> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SpeedwayTournamentDetails : TournametDetails<SpeedwayTeam, SpeedwaySeason> {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SnookerTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> SnookerTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> SnookerTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> SnookerTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> SnookerTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> SnookerTournamentDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BaseballTeamDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> BaseballTeamDetailsParams
  @discardableResult
  final public func includeHomeVenue() -> BaseballTeamDetailsParams
  @discardableResult
  final public func includeSquad() -> BaseballTeamDetailsParams
  @discardableResult
  final public func includeRoles() -> BaseballTeamDetailsParams
  @discardableResult
  final public func includeCompetitions() -> BaseballTeamDetailsParams
  @discardableResult
  final public func includeStages() -> BaseballTeamDetailsParams
  @discardableResult
  final public func includeManager() -> BaseballTeamDetailsParams
  @discardableResult
  final public func includeNextMatches(limit: Swift.Int = 0) -> BaseballTeamDetailsParams
  @discardableResult
  final public func includeLastMatches(limit: Swift.Int = 0) -> BaseballTeamDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FutsalTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> FutsalTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> FutsalTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> FutsalTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> FutsalTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> FutsalTournamentDetailsParams
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BaseController {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class RugbySeasonDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> RugbySeasonDetailsParams
  @discardableResult
  final public func includeTeams() -> RugbySeasonDetailsParams
  @discardableResult
  final public func includeRankingTables() -> RugbySeasonDetailsParams
  @discardableResult
  final public func includeLiveRankingTables() -> RugbySeasonDetailsParams
  @discardableResult
  final public func includeCupRosters() -> RugbySeasonDetailsParams
  @discardableResult
  final public func includeFixture() -> RugbySeasonDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SpeedwayDriverStatistics : PlayerStatistics {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class LeagueOfLegendsTournamentDetailsParams : Params {
  public init()
  @discardableResult
  final public func includeAll() -> LeagueOfLegendsTournamentDetailsParams
  @discardableResult
  final public func includeTeams() -> LeagueOfLegendsTournamentDetailsParams
  @discardableResult
  final public func includeActiveSeason() -> LeagueOfLegendsTournamentDetailsParams
  @discardableResult
  final public func includeSeasons() -> LeagueOfLegendsTournamentDetailsParams
  @discardableResult
  final public func includeDefendingChampion() -> LeagueOfLegendsTournamentDetailsParams
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BaseCompetitionController : BaseController {
  public func loadSports(completion: @escaping (Response<[AnySport]>) -> Swift.Void)
  public func getCategory<S>(id: Swift.Int, sport: S.Type, completion: @escaping (Response<Category>) -> Swift.Void) where S : Sport
  public func getTournament<T>(_ type: T.Type, id: Swift.Int, completion: @escaping (Response<T>) -> Swift.Void) where T : Tournament
  public func getTournament<S>(id: Swift.Int, sport: S.Type, completion: @escaping (Response<Tournament>) -> Swift.Void) where S : Sport
  public func getTournaments(idSportPairs: [IdSportPair], completion: @escaping (BatchResponse<Tournament, IdSportPair>) -> Swift.Void)
  public func getStage<S>(_ type: S.Type, id: Swift.Int, completion: @escaping (Response<S>) -> Swift.Void) where S : TournamentStage
  public func getStage<S>(id: Swift.Int, sport: S.Type, completion: @escaping (Response<TournamentStage>) -> Swift.Void) where S : Sport
  public func getStages(idSportPairs: [IdSportPair], completion: @escaping (BatchResponse<TournamentStage, IdSportPair>) -> Swift.Void)
  @available(*, deprecated, message: "Does not necessarily load all categories. Use getCompetitions(for:completion:) or getTournaments(for sport:completion:) instead; Will be removed in SDK version 4.0.")
  public func getTournaments(for category: Category, completion: @escaping (Response<[Tournament]?>) -> Swift.Void)
  @available(*, deprecated, message: "Does not necessarily load all categories. Use getCompetitions(for:completion:) or getTournaments(for sport:completion:) instead; Will be removed in SDK version 4.0.")
  public func getCategories<S>(for sport: S.Type, completion: @escaping (Response<[Category]>) -> Swift.Void) where S : Sport
  public func getStages(for tournament: Tournament, completion: @escaping (Response<[TournamentStage]?>) -> Swift.Void)
  public func getCompetitions<S, T>(for sport: S.Type, completion: @escaping (Response<[Category : [T]]?>) -> Swift.Void) where S : Sport, T : Tournament
  public func getTournaments<S>(for sport: S.Type, completion: @escaping (Response<[Tournament]?>) -> Swift.Void) where S : Sport
  public func getRankingTables(for tournamentId: [Swift.Int], sport: Sport.Type, completion: @escaping (Response<[RankingTable]?>) -> Swift.Void)
  @available(*, deprecated, message: "Use contesterController.getTournamentTeams; Will be removed in SDK version 4.0.")
  public func getTournamentTeams(for tournamentId: [Swift.Int], sport: Sport.Type, completion: @escaping (Response<[Swift.Int : [Team]]?>) -> Swift.Void)
  public func getTournamentActiveSeasonDetails(for tournament: Tournament, params: AnySeasonDetailsParams, completion: @escaping (Response<AnySeasonDetails?>) -> Swift.Void)
  public func getTeamStatsForSeason(seasonId: Swift.Int, sport: Sport.Type, completion: @escaping (Response<[Season : [Team : [Statistics]]]?>) -> Swift.Void)
  @objc deinit
}
public struct IdSportPair {
  public let id: Swift.Int
  public let sport: AnySport.Type
  public init(id: Swift.Int, sport: AnySport.Type)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ESportsStatistics : MatchStatistics {
  public var isKills: Swift.Bool {
    get
  }
  public var isKillAssists: Swift.Bool {
    get
  }
  public var isDeaths: Swift.Bool {
    get
  }
  public var isLevel: Swift.Bool {
    get
  }
  public var isXP: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BaseTennisTeam : Team {
  public var details: TennisTeamDetails? {
    get
  }
  @objc deinit
}
extension TennisTeam : DetailsLoadable {
  public func loadDetails(with params: TennisTeamDetailsParams, completion: @escaping (Response<TennisTeamDetails>) -> Swift.Void)
  public typealias D = TennisTeamDetails
  public typealias P = TennisTeamDetailsParams
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TennisSinglesTeam : TennisTeam {
  final public var player: TennisPlayer? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TennisDoublesTeam : TennisTeam {
  final public var player1: TennisPlayer? {
    get
  }
  final public var player2: TennisPlayer? {
    get
  }
  @objc deinit
}
public struct TennisRanking {
  public let date: Foundation.Date
  public let ranking: Swift.Int
}
public enum PreferredHand {
  case left
  case right
  case any
  public static func == (a: PreferredHand, b: PreferredHand) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}



extension Status : Swift.Equatable {}












extension LocksmithAccessibleOption : Swift.Equatable {}
extension LocksmithAccessibleOption : Swift.Hashable {}



extension ServicePosition : Swift.Equatable {}
extension ServicePosition : Swift.Hashable {}








extension NotificationEventType : Swift.Equatable {}
extension NotificationEventType : Swift.Hashable {}
extension NotificationEventType : Swift.RawRepresentable {}

extension TennisGameOpportunity : Swift.Equatable {}
extension TennisGameOpportunity : Swift.Hashable {}

extension LocksmithSecurityClass : Swift.Equatable {}
extension LocksmithSecurityClass : Swift.Hashable {}
extension ContestTimeType : Swift.Equatable {}
extension ContestTimeType : Swift.Hashable {}




extension StatValueType : Swift.Equatable {}
extension StatValueType : Swift.Hashable {}
extension MatchStatTypeId : Swift.Equatable {}
extension MatchStatTypeId : Swift.Hashable {}

extension VoteTag : Swift.Equatable {}
extension VoteTag : Swift.Hashable {}
extension VoteTag : Swift.RawRepresentable {}
extension VoteType : Swift.Equatable {}
extension VoteType : Swift.Hashable {}
extension VoteType : Swift.RawRepresentable {}


extension GoalType : Swift.Equatable {}
extension GoalType : Swift.Hashable {}
extension LastPointType : Swift.Equatable {}
extension LastPointType : Swift.Hashable {}
extension PlayerPosition.PlayerPositionType : Swift.Equatable {}
extension PlayerPosition.PlayerPositionType : Swift.Hashable {}





extension MatchWeather : Swift.Equatable {}
extension MatchWeather : Swift.Hashable {}
extension PitchCondition : Swift.Equatable {}
extension PitchCondition : Swift.Hashable {}

extension Card : Swift.Equatable {}
extension Card : Swift.Hashable {}


extension LocksmithInternetProtocol : Swift.Equatable {}
extension LocksmithInternetProtocol : Swift.Hashable {}
extension CyclingStatusTypes : Swift.Equatable {}
extension CyclingStatusTypes : Swift.Hashable {}
extension TennisGround : Swift.Equatable {}
extension TennisGround : Swift.Hashable {}
extension TennisGround : Swift.RawRepresentable {}
extension Gender : Swift.Equatable {}
extension Gender : Swift.Hashable {}
extension Gender : Swift.RawRepresentable {}
extension TennisTournamentType : Swift.Equatable {}
extension TennisTournamentType : Swift.Hashable {}
extension TennisTournamentType : Swift.RawRepresentable {}
extension TennisRankingType : Swift.Equatable {}
extension TennisRankingType : Swift.Hashable {}
extension TennisRankingType : Swift.RawRepresentable {}
extension TennisPointType : Swift.Equatable {}
extension TennisPointType : Swift.Hashable {}




extension PreferredFoot : Swift.Equatable {}
extension PreferredFoot : Swift.Hashable {}

extension CornerSide : Swift.Equatable {}
extension CornerSide : Swift.Hashable {}



extension LocksmithInternetAuthenticationType : Swift.Equatable {}
extension LocksmithInternetAuthenticationType : Swift.Hashable {}
extension ValueUnit : Swift.Equatable {}
extension ValueUnit : Swift.Hashable {}


extension MonthType : Swift.Equatable {}
extension MonthType : Swift.Hashable {}
extension MonthType : Swift.RawRepresentable {}
extension MotorsportStatType : Swift.Equatable {}
extension MotorsportStatType : Swift.Hashable {}



extension MotorsportDriverStatusType : Swift.Equatable {}
extension MotorsportDriverStatusType : Swift.Hashable {}

extension MotorSportRaceType : Swift.Equatable {}
extension MotorSportRaceType : Swift.Hashable {}
extension CyclingStatType : Swift.Equatable {}
extension CyclingStatType : Swift.Hashable {}


extension PlayerStatTypeId : Swift.Equatable {}
extension PlayerStatTypeId : Swift.Hashable {}
extension StageTypeValue : Swift.Equatable {}
extension StageTypeValue : Swift.Hashable {}
extension StageTypeValue : Swift.RawRepresentable {}

extension JerseyType : Swift.Equatable {}
extension JerseyType : Swift.Hashable {}
extension JerseyType : Swift.RawRepresentable {}





extension LocksmithError : Swift.Equatable {}
extension LocksmithError : Swift.Hashable {}
extension LocksmithError : Swift.RawRepresentable {}



extension Fishnet.Sport : Swift.Equatable {}
extension Fishnet.Sport : Swift.Hashable {}
extension Fishnet.Sport : Swift.RawRepresentable {}
extension MotorsportStatusTypes : Swift.Equatable {}
extension MotorsportStatusTypes : Swift.Hashable {}
extension MotorsportStatusTypes : Swift.RawRepresentable {}
extension EventType : Swift.Equatable {}
extension EventType : Swift.Hashable {}
extension EventType : Swift.RawRepresentable {}
extension CupRoundType : Swift.Equatable {}
extension CupRoundType : Swift.Hashable {}
extension CupRoundType : Swift.RawRepresentable {}
extension SubscriptionTag : Swift.Equatable {}
extension SubscriptionTag : Swift.Hashable {}
extension FavouriteTag : Swift.Equatable {}
extension FavouriteTag : Swift.Hashable {}
extension FavouriteTag : Swift.RawRepresentable {}


extension CyclingRaceClassification : Swift.Equatable {}
extension CyclingRaceClassification : Swift.Hashable {}
extension CyclingRaceClassification : Swift.RawRepresentable {}

extension SearchResultType : Swift.Equatable {}
extension SearchResultType : Swift.Hashable {}
extension ResultPropertyType : Swift.Equatable {}
extension ResultPropertyType : Swift.Hashable {}
extension ResultPropertyType : Swift.RawRepresentable {}
extension SortOrder : Swift.Equatable {}
extension SortOrder : Swift.Hashable {}
extension SortOrder : Swift.RawRepresentable {}


extension ImageSize : Swift.Equatable {}
extension ImageSize : Swift.Hashable {}
extension PositionMovement : Swift.Equatable {}
extension PositionMovement : Swift.Hashable {}
extension MotorsportSeasonStatus : Swift.Equatable {}
extension MatchStatusType : Swift.Equatable {}
extension MatchStatusType : Swift.Hashable {}
extension MatchStatusType : Swift.RawRepresentable {}



extension PreferredHand : Swift.Equatable {}
extension PreferredHand : Swift.Hashable {}
